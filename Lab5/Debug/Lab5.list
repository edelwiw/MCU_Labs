
Lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ebc  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005080  08005080  00006080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050a0  080050a0  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  080050a0  080050a0  000060a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050a8  080050a8  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050a8  080050a8  000060a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050ac  080050ac  000060ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080050b0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000010  080050c0  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080050c0  000071c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ecec  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020d4  00000000  00000000  00015d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  00017e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ac8  00000000  00000000  00018bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000230e6  00000000  00000000  00019680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010562  00000000  00000000  0003c766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd694  00000000  00000000  0004ccc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012a35c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b74  00000000  00000000  0012a3a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0012df14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005068 	.word	0x08005068

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08005068 	.word	0x08005068

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	@ 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	3c01      	subs	r4, #1
 8000340:	bf28      	it	cs
 8000342:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000346:	d2e9      	bcs.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ee:	bf08      	it	eq
 80004f0:	4770      	bxeq	lr
 80004f2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004f6:	bf04      	itt	eq
 80004f8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000508:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800050c:	e71c      	b.n	8000348 <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_ul2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	e00a      	b.n	8000536 <__aeabi_l2d+0x16>

08000520 <__aeabi_l2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800052e:	d502      	bpl.n	8000536 <__aeabi_l2d+0x16>
 8000530:	4240      	negs	r0, r0
 8000532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000536:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800053e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000542:	f43f aed8 	beq.w	80002f6 <__adddf3+0xe6>
 8000546:	f04f 0203 	mov.w	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000556:	bf18      	it	ne
 8000558:	3203      	addne	r2, #3
 800055a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055e:	f1c2 0320 	rsb	r3, r2, #32
 8000562:	fa00 fc03 	lsl.w	ip, r0, r3
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 fe03 	lsl.w	lr, r1, r3
 800056e:	ea40 000e 	orr.w	r0, r0, lr
 8000572:	fa21 f102 	lsr.w	r1, r1, r2
 8000576:	4414      	add	r4, r2
 8000578:	e6bd      	b.n	80002f6 <__adddf3+0xe6>
 800057a:	bf00      	nop

0800057c <__aeabi_dmul>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000582:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000586:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058a:	bf1d      	ittte	ne
 800058c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000590:	ea94 0f0c 	teqne	r4, ip
 8000594:	ea95 0f0c 	teqne	r5, ip
 8000598:	f000 f8de 	bleq	8000758 <__aeabi_dmul+0x1dc>
 800059c:	442c      	add	r4, r5
 800059e:	ea81 0603 	eor.w	r6, r1, r3
 80005a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ae:	bf18      	it	ne
 80005b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005bc:	d038      	beq.n	8000630 <__aeabi_dmul+0xb4>
 80005be:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c2:	f04f 0500 	mov.w	r5, #0
 80005c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ca:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d2:	f04f 0600 	mov.w	r6, #0
 80005d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005da:	f09c 0f00 	teq	ip, #0
 80005de:	bf18      	it	ne
 80005e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005e8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005ec:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f0:	d204      	bcs.n	80005fc <__aeabi_dmul+0x80>
 80005f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f6:	416d      	adcs	r5, r5
 80005f8:	eb46 0606 	adc.w	r6, r6, r6
 80005fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000600:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000604:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000608:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800060c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000610:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000614:	bf88      	it	hi
 8000616:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061a:	d81e      	bhi.n	800065a <__aeabi_dmul+0xde>
 800061c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000634:	ea46 0101 	orr.w	r1, r6, r1
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	ea81 0103 	eor.w	r1, r1, r3
 8000640:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000644:	bfc2      	ittt	gt
 8000646:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064e:	bd70      	popgt	{r4, r5, r6, pc}
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f04f 0e00 	mov.w	lr, #0
 8000658:	3c01      	subs	r4, #1
 800065a:	f300 80ab 	bgt.w	80007b4 <__aeabi_dmul+0x238>
 800065e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000662:	bfde      	ittt	le
 8000664:	2000      	movle	r0, #0
 8000666:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066a:	bd70      	pople	{r4, r5, r6, pc}
 800066c:	f1c4 0400 	rsb	r4, r4, #0
 8000670:	3c20      	subs	r4, #32
 8000672:	da35      	bge.n	80006e0 <__aeabi_dmul+0x164>
 8000674:	340c      	adds	r4, #12
 8000676:	dc1b      	bgt.n	80006b0 <__aeabi_dmul+0x134>
 8000678:	f104 0414 	add.w	r4, r4, #20
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f305 	lsl.w	r3, r0, r5
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f205 	lsl.w	r2, r1, r5
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	fa21 f604 	lsr.w	r6, r1, r4
 80006a0:	eb42 0106 	adc.w	r1, r2, r6
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 040c 	rsb	r4, r4, #12
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f304 	lsl.w	r3, r0, r4
 80006bc:	fa20 f005 	lsr.w	r0, r0, r5
 80006c0:	fa01 f204 	lsl.w	r2, r1, r4
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	f141 0100 	adc.w	r1, r1, #0
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f205 	lsl.w	r2, r0, r5
 80006e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006ec:	fa20 f304 	lsr.w	r3, r0, r4
 80006f0:	fa01 f205 	lsl.w	r2, r1, r5
 80006f4:	ea43 0302 	orr.w	r3, r3, r2
 80006f8:	fa21 f004 	lsr.w	r0, r1, r4
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	fa21 f204 	lsr.w	r2, r1, r4
 8000704:	ea20 0002 	bic.w	r0, r0, r2
 8000708:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800070c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000710:	bf08      	it	eq
 8000712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f094 0f00 	teq	r4, #0
 800071c:	d10f      	bne.n	800073e <__aeabi_dmul+0x1c2>
 800071e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000722:	0040      	lsls	r0, r0, #1
 8000724:	eb41 0101 	adc.w	r1, r1, r1
 8000728:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800072c:	bf08      	it	eq
 800072e:	3c01      	subeq	r4, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1a6>
 8000732:	ea41 0106 	orr.w	r1, r1, r6
 8000736:	f095 0f00 	teq	r5, #0
 800073a:	bf18      	it	ne
 800073c:	4770      	bxne	lr
 800073e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000742:	0052      	lsls	r2, r2, #1
 8000744:	eb43 0303 	adc.w	r3, r3, r3
 8000748:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800074c:	bf08      	it	eq
 800074e:	3d01      	subeq	r5, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1c6>
 8000752:	ea43 0306 	orr.w	r3, r3, r6
 8000756:	4770      	bx	lr
 8000758:	ea94 0f0c 	teq	r4, ip
 800075c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000760:	bf18      	it	ne
 8000762:	ea95 0f0c 	teqne	r5, ip
 8000766:	d00c      	beq.n	8000782 <__aeabi_dmul+0x206>
 8000768:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076c:	bf18      	it	ne
 800076e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000772:	d1d1      	bne.n	8000718 <__aeabi_dmul+0x19c>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000786:	bf06      	itte	eq
 8000788:	4610      	moveq	r0, r2
 800078a:	4619      	moveq	r1, r3
 800078c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000790:	d019      	beq.n	80007c6 <__aeabi_dmul+0x24a>
 8000792:	ea94 0f0c 	teq	r4, ip
 8000796:	d102      	bne.n	800079e <__aeabi_dmul+0x222>
 8000798:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800079c:	d113      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 800079e:	ea95 0f0c 	teq	r5, ip
 80007a2:	d105      	bne.n	80007b0 <__aeabi_dmul+0x234>
 80007a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a8:	bf1c      	itt	ne
 80007aa:	4610      	movne	r0, r2
 80007ac:	4619      	movne	r1, r3
 80007ae:	d10a      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007bc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ca:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ce:	bd70      	pop	{r4, r5, r6, pc}

080007d0 <__aeabi_ddiv>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007d6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007de:	bf1d      	ittte	ne
 80007e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e4:	ea94 0f0c 	teqne	r4, ip
 80007e8:	ea95 0f0c 	teqne	r5, ip
 80007ec:	f000 f8a7 	bleq	800093e <__aeabi_ddiv+0x16e>
 80007f0:	eba4 0405 	sub.w	r4, r4, r5
 80007f4:	ea81 0e03 	eor.w	lr, r1, r3
 80007f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000800:	f000 8088 	beq.w	8000914 <__aeabi_ddiv+0x144>
 8000804:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000808:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800080c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000810:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000814:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000818:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800081c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000820:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000824:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000828:	429d      	cmp	r5, r3
 800082a:	bf08      	it	eq
 800082c:	4296      	cmpeq	r6, r2
 800082e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000832:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000836:	d202      	bcs.n	800083e <__aeabi_ddiv+0x6e>
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	1ab6      	subs	r6, r6, r2
 8000840:	eb65 0503 	sbc.w	r5, r5, r3
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800084e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 000c 	orrcs.w	r0, r0, ip
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ac:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b0:	d018      	beq.n	80008e4 <__aeabi_ddiv+0x114>
 80008b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ce:	d1c0      	bne.n	8000852 <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d4:	d10b      	bne.n	80008ee <__aeabi_ddiv+0x11e>
 80008d6:	ea41 0100 	orr.w	r1, r1, r0
 80008da:	f04f 0000 	mov.w	r0, #0
 80008de:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e2:	e7b6      	b.n	8000852 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	bf04      	itt	eq
 80008ea:	4301      	orreq	r1, r0
 80008ec:	2000      	moveq	r0, #0
 80008ee:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f2:	bf88      	it	hi
 80008f4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008f8:	f63f aeaf 	bhi.w	800065a <__aeabi_dmul+0xde>
 80008fc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000900:	bf04      	itt	eq
 8000902:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000906:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090a:	f150 0000 	adcs.w	r0, r0, #0
 800090e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000918:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800091c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000920:	bfc2      	ittt	gt
 8000922:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092a:	bd70      	popgt	{r4, r5, r6, pc}
 800092c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000930:	f04f 0e00 	mov.w	lr, #0
 8000934:	3c01      	subs	r4, #1
 8000936:	e690      	b.n	800065a <__aeabi_dmul+0xde>
 8000938:	ea45 0e06 	orr.w	lr, r5, r6
 800093c:	e68d      	b.n	800065a <__aeabi_dmul+0xde>
 800093e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000942:	ea94 0f0c 	teq	r4, ip
 8000946:	bf08      	it	eq
 8000948:	ea95 0f0c 	teqeq	r5, ip
 800094c:	f43f af3b 	beq.w	80007c6 <__aeabi_dmul+0x24a>
 8000950:	ea94 0f0c 	teq	r4, ip
 8000954:	d10a      	bne.n	800096c <__aeabi_ddiv+0x19c>
 8000956:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095a:	f47f af34 	bne.w	80007c6 <__aeabi_dmul+0x24a>
 800095e:	ea95 0f0c 	teq	r5, ip
 8000962:	f47f af25 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e72c      	b.n	80007c6 <__aeabi_dmul+0x24a>
 800096c:	ea95 0f0c 	teq	r5, ip
 8000970:	d106      	bne.n	8000980 <__aeabi_ddiv+0x1b0>
 8000972:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000976:	f43f aefd 	beq.w	8000774 <__aeabi_dmul+0x1f8>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e722      	b.n	80007c6 <__aeabi_dmul+0x24a>
 8000980:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000984:	bf18      	it	ne
 8000986:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098a:	f47f aec5 	bne.w	8000718 <__aeabi_dmul+0x19c>
 800098e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000992:	f47f af0d 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000996:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099a:	f47f aeeb 	bne.w	8000774 <__aeabi_dmul+0x1f8>
 800099e:	e712      	b.n	80007c6 <__aeabi_dmul+0x24a>

080009a0 <__aeabi_d2iz>:
 80009a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009a8:	d215      	bcs.n	80009d6 <__aeabi_d2iz+0x36>
 80009aa:	d511      	bpl.n	80009d0 <__aeabi_d2iz+0x30>
 80009ac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b4:	d912      	bls.n	80009dc <__aeabi_d2iz+0x3c>
 80009b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009c6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ca:	bf18      	it	ne
 80009cc:	4240      	negne	r0, r0
 80009ce:	4770      	bx	lr
 80009d0:	f04f 0000 	mov.w	r0, #0
 80009d4:	4770      	bx	lr
 80009d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009da:	d105      	bne.n	80009e8 <__aeabi_d2iz+0x48>
 80009dc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009e0:	bf08      	it	eq
 80009e2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009e6:	4770      	bx	lr
 80009e8:	f04f 0000 	mov.w	r0, #0
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_d2uiz>:
 80009f0:	004a      	lsls	r2, r1, #1
 80009f2:	d211      	bcs.n	8000a18 <__aeabi_d2uiz+0x28>
 80009f4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009f8:	d211      	bcs.n	8000a1e <__aeabi_d2uiz+0x2e>
 80009fa:	d50d      	bpl.n	8000a18 <__aeabi_d2uiz+0x28>
 80009fc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a04:	d40e      	bmi.n	8000a24 <__aeabi_d2uiz+0x34>
 8000a06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a12:	fa23 f002 	lsr.w	r0, r3, r2
 8000a16:	4770      	bx	lr
 8000a18:	f04f 0000 	mov.w	r0, #0
 8000a1c:	4770      	bx	lr
 8000a1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_d2uiz+0x3a>
 8000a24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0000 	mov.w	r0, #0
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_uldivmod>:
 8000a30:	b953      	cbnz	r3, 8000a48 <__aeabi_uldivmod+0x18>
 8000a32:	b94a      	cbnz	r2, 8000a48 <__aeabi_uldivmod+0x18>
 8000a34:	2900      	cmp	r1, #0
 8000a36:	bf08      	it	eq
 8000a38:	2800      	cmpeq	r0, #0
 8000a3a:	bf1c      	itt	ne
 8000a3c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a40:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a44:	f000 b96a 	b.w	8000d1c <__aeabi_idiv0>
 8000a48:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a50:	f000 f806 	bl	8000a60 <__udivmoddi4>
 8000a54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a5c:	b004      	add	sp, #16
 8000a5e:	4770      	bx	lr

08000a60 <__udivmoddi4>:
 8000a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a64:	9d08      	ldr	r5, [sp, #32]
 8000a66:	460c      	mov	r4, r1
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d14e      	bne.n	8000b0a <__udivmoddi4+0xaa>
 8000a6c:	4694      	mov	ip, r2
 8000a6e:	458c      	cmp	ip, r1
 8000a70:	4686      	mov	lr, r0
 8000a72:	fab2 f282 	clz	r2, r2
 8000a76:	d962      	bls.n	8000b3e <__udivmoddi4+0xde>
 8000a78:	b14a      	cbz	r2, 8000a8e <__udivmoddi4+0x2e>
 8000a7a:	f1c2 0320 	rsb	r3, r2, #32
 8000a7e:	4091      	lsls	r1, r2
 8000a80:	fa20 f303 	lsr.w	r3, r0, r3
 8000a84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a88:	4319      	orrs	r1, r3
 8000a8a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a92:	fa1f f68c 	uxth.w	r6, ip
 8000a96:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a9a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a9e:	fb07 1114 	mls	r1, r7, r4, r1
 8000aa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aa6:	fb04 f106 	mul.w	r1, r4, r6
 8000aaa:	4299      	cmp	r1, r3
 8000aac:	d90a      	bls.n	8000ac4 <__udivmoddi4+0x64>
 8000aae:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000ab6:	f080 8112 	bcs.w	8000cde <__udivmoddi4+0x27e>
 8000aba:	4299      	cmp	r1, r3
 8000abc:	f240 810f 	bls.w	8000cde <__udivmoddi4+0x27e>
 8000ac0:	3c02      	subs	r4, #2
 8000ac2:	4463      	add	r3, ip
 8000ac4:	1a59      	subs	r1, r3, r1
 8000ac6:	fa1f f38e 	uxth.w	r3, lr
 8000aca:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ace:	fb07 1110 	mls	r1, r7, r0, r1
 8000ad2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad6:	fb00 f606 	mul.w	r6, r0, r6
 8000ada:	429e      	cmp	r6, r3
 8000adc:	d90a      	bls.n	8000af4 <__udivmoddi4+0x94>
 8000ade:	eb1c 0303 	adds.w	r3, ip, r3
 8000ae2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000ae6:	f080 80fc 	bcs.w	8000ce2 <__udivmoddi4+0x282>
 8000aea:	429e      	cmp	r6, r3
 8000aec:	f240 80f9 	bls.w	8000ce2 <__udivmoddi4+0x282>
 8000af0:	4463      	add	r3, ip
 8000af2:	3802      	subs	r0, #2
 8000af4:	1b9b      	subs	r3, r3, r6
 8000af6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000afa:	2100      	movs	r1, #0
 8000afc:	b11d      	cbz	r5, 8000b06 <__udivmoddi4+0xa6>
 8000afe:	40d3      	lsrs	r3, r2
 8000b00:	2200      	movs	r2, #0
 8000b02:	e9c5 3200 	strd	r3, r2, [r5]
 8000b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0a:	428b      	cmp	r3, r1
 8000b0c:	d905      	bls.n	8000b1a <__udivmoddi4+0xba>
 8000b0e:	b10d      	cbz	r5, 8000b14 <__udivmoddi4+0xb4>
 8000b10:	e9c5 0100 	strd	r0, r1, [r5]
 8000b14:	2100      	movs	r1, #0
 8000b16:	4608      	mov	r0, r1
 8000b18:	e7f5      	b.n	8000b06 <__udivmoddi4+0xa6>
 8000b1a:	fab3 f183 	clz	r1, r3
 8000b1e:	2900      	cmp	r1, #0
 8000b20:	d146      	bne.n	8000bb0 <__udivmoddi4+0x150>
 8000b22:	42a3      	cmp	r3, r4
 8000b24:	d302      	bcc.n	8000b2c <__udivmoddi4+0xcc>
 8000b26:	4290      	cmp	r0, r2
 8000b28:	f0c0 80f0 	bcc.w	8000d0c <__udivmoddi4+0x2ac>
 8000b2c:	1a86      	subs	r6, r0, r2
 8000b2e:	eb64 0303 	sbc.w	r3, r4, r3
 8000b32:	2001      	movs	r0, #1
 8000b34:	2d00      	cmp	r5, #0
 8000b36:	d0e6      	beq.n	8000b06 <__udivmoddi4+0xa6>
 8000b38:	e9c5 6300 	strd	r6, r3, [r5]
 8000b3c:	e7e3      	b.n	8000b06 <__udivmoddi4+0xa6>
 8000b3e:	2a00      	cmp	r2, #0
 8000b40:	f040 8090 	bne.w	8000c64 <__udivmoddi4+0x204>
 8000b44:	eba1 040c 	sub.w	r4, r1, ip
 8000b48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b4c:	fa1f f78c 	uxth.w	r7, ip
 8000b50:	2101      	movs	r1, #1
 8000b52:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b5a:	fb08 4416 	mls	r4, r8, r6, r4
 8000b5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b62:	fb07 f006 	mul.w	r0, r7, r6
 8000b66:	4298      	cmp	r0, r3
 8000b68:	d908      	bls.n	8000b7c <__udivmoddi4+0x11c>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b72:	d202      	bcs.n	8000b7a <__udivmoddi4+0x11a>
 8000b74:	4298      	cmp	r0, r3
 8000b76:	f200 80cd 	bhi.w	8000d14 <__udivmoddi4+0x2b4>
 8000b7a:	4626      	mov	r6, r4
 8000b7c:	1a1c      	subs	r4, r3, r0
 8000b7e:	fa1f f38e 	uxth.w	r3, lr
 8000b82:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b86:	fb08 4410 	mls	r4, r8, r0, r4
 8000b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b8e:	fb00 f707 	mul.w	r7, r0, r7
 8000b92:	429f      	cmp	r7, r3
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x148>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x146>
 8000ba0:	429f      	cmp	r7, r3
 8000ba2:	f200 80b0 	bhi.w	8000d06 <__udivmoddi4+0x2a6>
 8000ba6:	4620      	mov	r0, r4
 8000ba8:	1bdb      	subs	r3, r3, r7
 8000baa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bae:	e7a5      	b.n	8000afc <__udivmoddi4+0x9c>
 8000bb0:	f1c1 0620 	rsb	r6, r1, #32
 8000bb4:	408b      	lsls	r3, r1
 8000bb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000bba:	431f      	orrs	r7, r3
 8000bbc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bc0:	fa04 f301 	lsl.w	r3, r4, r1
 8000bc4:	ea43 030c 	orr.w	r3, r3, ip
 8000bc8:	40f4      	lsrs	r4, r6
 8000bca:	fa00 f801 	lsl.w	r8, r0, r1
 8000bce:	0c38      	lsrs	r0, r7, #16
 8000bd0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bd4:	fbb4 fef0 	udiv	lr, r4, r0
 8000bd8:	fa1f fc87 	uxth.w	ip, r7
 8000bdc:	fb00 441e 	mls	r4, r0, lr, r4
 8000be0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000be4:	fb0e f90c 	mul.w	r9, lr, ip
 8000be8:	45a1      	cmp	r9, r4
 8000bea:	fa02 f201 	lsl.w	r2, r2, r1
 8000bee:	d90a      	bls.n	8000c06 <__udivmoddi4+0x1a6>
 8000bf0:	193c      	adds	r4, r7, r4
 8000bf2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000bf6:	f080 8084 	bcs.w	8000d02 <__udivmoddi4+0x2a2>
 8000bfa:	45a1      	cmp	r9, r4
 8000bfc:	f240 8081 	bls.w	8000d02 <__udivmoddi4+0x2a2>
 8000c00:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c04:	443c      	add	r4, r7
 8000c06:	eba4 0409 	sub.w	r4, r4, r9
 8000c0a:	fa1f f983 	uxth.w	r9, r3
 8000c0e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c12:	fb00 4413 	mls	r4, r0, r3, r4
 8000c16:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c1a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c1e:	45a4      	cmp	ip, r4
 8000c20:	d907      	bls.n	8000c32 <__udivmoddi4+0x1d2>
 8000c22:	193c      	adds	r4, r7, r4
 8000c24:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c28:	d267      	bcs.n	8000cfa <__udivmoddi4+0x29a>
 8000c2a:	45a4      	cmp	ip, r4
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0x29a>
 8000c2e:	3b02      	subs	r3, #2
 8000c30:	443c      	add	r4, r7
 8000c32:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c36:	fba0 9302 	umull	r9, r3, r0, r2
 8000c3a:	eba4 040c 	sub.w	r4, r4, ip
 8000c3e:	429c      	cmp	r4, r3
 8000c40:	46ce      	mov	lr, r9
 8000c42:	469c      	mov	ip, r3
 8000c44:	d351      	bcc.n	8000cea <__udivmoddi4+0x28a>
 8000c46:	d04e      	beq.n	8000ce6 <__udivmoddi4+0x286>
 8000c48:	b155      	cbz	r5, 8000c60 <__udivmoddi4+0x200>
 8000c4a:	ebb8 030e 	subs.w	r3, r8, lr
 8000c4e:	eb64 040c 	sbc.w	r4, r4, ip
 8000c52:	fa04 f606 	lsl.w	r6, r4, r6
 8000c56:	40cb      	lsrs	r3, r1
 8000c58:	431e      	orrs	r6, r3
 8000c5a:	40cc      	lsrs	r4, r1
 8000c5c:	e9c5 6400 	strd	r6, r4, [r5]
 8000c60:	2100      	movs	r1, #0
 8000c62:	e750      	b.n	8000b06 <__udivmoddi4+0xa6>
 8000c64:	f1c2 0320 	rsb	r3, r2, #32
 8000c68:	fa20 f103 	lsr.w	r1, r0, r3
 8000c6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c70:	fa24 f303 	lsr.w	r3, r4, r3
 8000c74:	4094      	lsls	r4, r2
 8000c76:	430c      	orrs	r4, r1
 8000c78:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c7c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c80:	fa1f f78c 	uxth.w	r7, ip
 8000c84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c88:	fb08 3110 	mls	r1, r8, r0, r3
 8000c8c:	0c23      	lsrs	r3, r4, #16
 8000c8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c92:	fb00 f107 	mul.w	r1, r0, r7
 8000c96:	4299      	cmp	r1, r3
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x24c>
 8000c9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000ca2:	d22c      	bcs.n	8000cfe <__udivmoddi4+0x29e>
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	d92a      	bls.n	8000cfe <__udivmoddi4+0x29e>
 8000ca8:	3802      	subs	r0, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cb4:	fb08 3311 	mls	r3, r8, r1, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb01 f307 	mul.w	r3, r1, r7
 8000cc0:	42a3      	cmp	r3, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x276>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ccc:	d213      	bcs.n	8000cf6 <__udivmoddi4+0x296>
 8000cce:	42a3      	cmp	r3, r4
 8000cd0:	d911      	bls.n	8000cf6 <__udivmoddi4+0x296>
 8000cd2:	3902      	subs	r1, #2
 8000cd4:	4464      	add	r4, ip
 8000cd6:	1ae4      	subs	r4, r4, r3
 8000cd8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cdc:	e739      	b.n	8000b52 <__udivmoddi4+0xf2>
 8000cde:	4604      	mov	r4, r0
 8000ce0:	e6f0      	b.n	8000ac4 <__udivmoddi4+0x64>
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e706      	b.n	8000af4 <__udivmoddi4+0x94>
 8000ce6:	45c8      	cmp	r8, r9
 8000ce8:	d2ae      	bcs.n	8000c48 <__udivmoddi4+0x1e8>
 8000cea:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cee:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cf2:	3801      	subs	r0, #1
 8000cf4:	e7a8      	b.n	8000c48 <__udivmoddi4+0x1e8>
 8000cf6:	4631      	mov	r1, r6
 8000cf8:	e7ed      	b.n	8000cd6 <__udivmoddi4+0x276>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	e799      	b.n	8000c32 <__udivmoddi4+0x1d2>
 8000cfe:	4630      	mov	r0, r6
 8000d00:	e7d4      	b.n	8000cac <__udivmoddi4+0x24c>
 8000d02:	46d6      	mov	lr, sl
 8000d04:	e77f      	b.n	8000c06 <__udivmoddi4+0x1a6>
 8000d06:	4463      	add	r3, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	e74d      	b.n	8000ba8 <__udivmoddi4+0x148>
 8000d0c:	4606      	mov	r6, r0
 8000d0e:	4623      	mov	r3, r4
 8000d10:	4608      	mov	r0, r1
 8000d12:	e70f      	b.n	8000b34 <__udivmoddi4+0xd4>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	4463      	add	r3, ip
 8000d18:	e730      	b.n	8000b7c <__udivmoddi4+0x11c>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_idiv0>:
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop

08000d20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d24:	f000 fd12 	bl	800174c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d28:	f000 f81a 	bl	8000d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d2c:	f000 f9c6 	bl	80010bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000d30:	f000 f9a4 	bl	800107c <MX_DMA_Init>
  MX_ADC1_Init();
 8000d34:	f000 f880 	bl	8000e38 <MX_ADC1_Init>
  MX_TIM10_Init();
 8000d38:	f000 f952 	bl	8000fe0 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 8000d3c:	f000 f974 	bl	8001028 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000d40:	f000 f8da 	bl	8000ef8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim10); // millis 
 8000d44:	4804      	ldr	r0, [pc, #16]	@ (8000d58 <main+0x38>)
 8000d46:	f002 fd77 	bl	8003838 <HAL_TIM_Base_Start_IT>
  //start pwm 
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000d4a:	2108      	movs	r1, #8
 8000d4c:	4803      	ldr	r0, [pc, #12]	@ (8000d5c <main+0x3c>)
 8000d4e:	f002 fe3d 	bl	80039cc <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 8000d52:	bf00      	nop
 8000d54:	e7fd      	b.n	8000d52 <main+0x32>
 8000d56:	bf00      	nop
 8000d58:	2000011c 	.word	0x2000011c
 8000d5c:	200000d4 	.word	0x200000d4

08000d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b094      	sub	sp, #80	@ 0x50
 8000d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d66:	f107 031c 	add.w	r3, r7, #28
 8000d6a:	2234      	movs	r2, #52	@ 0x34
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f004 f94e 	bl	8005010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d74:	f107 0308 	add.w	r3, r7, #8
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d84:	2300      	movs	r3, #0
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	4b29      	ldr	r3, [pc, #164]	@ (8000e30 <SystemClock_Config+0xd0>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8c:	4a28      	ldr	r2, [pc, #160]	@ (8000e30 <SystemClock_Config+0xd0>)
 8000d8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d94:	4b26      	ldr	r3, [pc, #152]	@ (8000e30 <SystemClock_Config+0xd0>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000da0:	2300      	movs	r3, #0
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	4b23      	ldr	r3, [pc, #140]	@ (8000e34 <SystemClock_Config+0xd4>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000dac:	4a21      	ldr	r2, [pc, #132]	@ (8000e34 <SystemClock_Config+0xd4>)
 8000dae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000db2:	6013      	str	r3, [r2, #0]
 8000db4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e34 <SystemClock_Config+0xd4>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dbc:	603b      	str	r3, [r7, #0]
 8000dbe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc8:	2310      	movs	r3, #16
 8000dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dd4:	2308      	movs	r3, #8
 8000dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000dd8:	2350      	movs	r3, #80	@ 0x50
 8000dda:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000de0:	2302      	movs	r3, #2
 8000de2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000de4:	2302      	movs	r3, #2
 8000de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de8:	f107 031c 	add.w	r3, r7, #28
 8000dec:	4618      	mov	r0, r3
 8000dee:	f002 fa35 	bl	800325c <HAL_RCC_OscConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000df8:	f000 faac 	bl	8001354 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dfc:	230f      	movs	r3, #15
 8000dfe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e00:	2302      	movs	r3, #2
 8000e02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e12:	f107 0308 	add.w	r3, r7, #8
 8000e16:	2102      	movs	r1, #2
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f001 ff5b 	bl	8002cd4 <HAL_RCC_ClockConfig>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000e24:	f000 fa96 	bl	8001354 <Error_Handler>
  }
}
 8000e28:	bf00      	nop
 8000e2a:	3750      	adds	r7, #80	@ 0x50
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40007000 	.word	0x40007000

08000e38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e3e:	463b      	mov	r3, r7
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e4a:	4b28      	ldr	r3, [pc, #160]	@ (8000eec <MX_ADC1_Init+0xb4>)
 8000e4c:	4a28      	ldr	r2, [pc, #160]	@ (8000ef0 <MX_ADC1_Init+0xb8>)
 8000e4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e50:	4b26      	ldr	r3, [pc, #152]	@ (8000eec <MX_ADC1_Init+0xb4>)
 8000e52:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e56:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e58:	4b24      	ldr	r3, [pc, #144]	@ (8000eec <MX_ADC1_Init+0xb4>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e5e:	4b23      	ldr	r3, [pc, #140]	@ (8000eec <MX_ADC1_Init+0xb4>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e64:	4b21      	ldr	r3, [pc, #132]	@ (8000eec <MX_ADC1_Init+0xb4>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e6a:	4b20      	ldr	r3, [pc, #128]	@ (8000eec <MX_ADC1_Init+0xb4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e72:	4b1e      	ldr	r3, [pc, #120]	@ (8000eec <MX_ADC1_Init+0xb4>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e78:	4b1c      	ldr	r3, [pc, #112]	@ (8000eec <MX_ADC1_Init+0xb4>)
 8000e7a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ef4 <MX_ADC1_Init+0xbc>)
 8000e7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000eec <MX_ADC1_Init+0xb4>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000e84:	4b19      	ldr	r3, [pc, #100]	@ (8000eec <MX_ADC1_Init+0xb4>)
 8000e86:	2202      	movs	r2, #2
 8000e88:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e8a:	4b18      	ldr	r3, [pc, #96]	@ (8000eec <MX_ADC1_Init+0xb4>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e92:	4b16      	ldr	r3, [pc, #88]	@ (8000eec <MX_ADC1_Init+0xb4>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e98:	4814      	ldr	r0, [pc, #80]	@ (8000eec <MX_ADC1_Init+0xb4>)
 8000e9a:	f000 fcc9 	bl	8001830 <HAL_ADC_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ea4:	f000 fa56 	bl	8001354 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000ea8:	230a      	movs	r3, #10
 8000eaa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000eac:	2301      	movs	r3, #1
 8000eae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	480c      	ldr	r0, [pc, #48]	@ (8000eec <MX_ADC1_Init+0xb4>)
 8000eba:	f000 fe2b 	bl	8001b14 <HAL_ADC_ConfigChannel>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ec4:	f000 fa46 	bl	8001354 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000ec8:	2308      	movs	r3, #8
 8000eca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4805      	ldr	r0, [pc, #20]	@ (8000eec <MX_ADC1_Init+0xb4>)
 8000ed6:	f000 fe1d 	bl	8001b14 <HAL_ADC_ConfigChannel>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ee0:	f000 fa38 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ee4:	bf00      	nop
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	2000002c 	.word	0x2000002c
 8000ef0:	40012000 	.word	0x40012000
 8000ef4:	0f000001 	.word	0x0f000001

08000ef8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08e      	sub	sp, #56	@ 0x38
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000efe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0c:	f107 0320 	add.w	r3, r7, #32
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
 8000f24:	615a      	str	r2, [r3, #20]
 8000f26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f28:	4b2c      	ldr	r3, [pc, #176]	@ (8000fdc <MX_TIM2_Init+0xe4>)
 8000f2a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39;
 8000f30:	4b2a      	ldr	r3, [pc, #168]	@ (8000fdc <MX_TIM2_Init+0xe4>)
 8000f32:	2227      	movs	r2, #39	@ 0x27
 8000f34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f36:	4b29      	ldr	r3, [pc, #164]	@ (8000fdc <MX_TIM2_Init+0xe4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000f3c:	4b27      	ldr	r3, [pc, #156]	@ (8000fdc <MX_TIM2_Init+0xe4>)
 8000f3e:	2263      	movs	r2, #99	@ 0x63
 8000f40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f42:	4b26      	ldr	r3, [pc, #152]	@ (8000fdc <MX_TIM2_Init+0xe4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f48:	4b24      	ldr	r3, [pc, #144]	@ (8000fdc <MX_TIM2_Init+0xe4>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f4e:	4823      	ldr	r0, [pc, #140]	@ (8000fdc <MX_TIM2_Init+0xe4>)
 8000f50:	f002 fc22 	bl	8003798 <HAL_TIM_Base_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000f5a:	f000 f9fb 	bl	8001354 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f62:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f64:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f68:	4619      	mov	r1, r3
 8000f6a:	481c      	ldr	r0, [pc, #112]	@ (8000fdc <MX_TIM2_Init+0xe4>)
 8000f6c:	f002 ffa8 	bl	8003ec0 <HAL_TIM_ConfigClockSource>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000f76:	f000 f9ed 	bl	8001354 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f7a:	4818      	ldr	r0, [pc, #96]	@ (8000fdc <MX_TIM2_Init+0xe4>)
 8000f7c:	f002 fccc 	bl	8003918 <HAL_TIM_PWM_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000f86:	f000 f9e5 	bl	8001354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f92:	f107 0320 	add.w	r3, r7, #32
 8000f96:	4619      	mov	r1, r3
 8000f98:	4810      	ldr	r0, [pc, #64]	@ (8000fdc <MX_TIM2_Init+0xe4>)
 8000f9a:	f003 fb9d 	bl	80046d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000fa4:	f000 f9d6 	bl	8001354 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fa8:	2360      	movs	r3, #96	@ 0x60
 8000faa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	2208      	movs	r2, #8
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4807      	ldr	r0, [pc, #28]	@ (8000fdc <MX_TIM2_Init+0xe4>)
 8000fc0:	f002 febc 	bl	8003d3c <HAL_TIM_PWM_ConfigChannel>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000fca:	f000 f9c3 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000fce:	4803      	ldr	r0, [pc, #12]	@ (8000fdc <MX_TIM2_Init+0xe4>)
 8000fd0:	f000 fabc 	bl	800154c <HAL_TIM_MspPostInit>

}
 8000fd4:	bf00      	nop
 8000fd6:	3738      	adds	r7, #56	@ 0x38
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	200000d4 	.word	0x200000d4

08000fe0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8001020 <MX_TIM10_Init+0x40>)
 8000fe6:	4a0f      	ldr	r2, [pc, #60]	@ (8001024 <MX_TIM10_Init+0x44>)
 8000fe8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 79;
 8000fea:	4b0d      	ldr	r3, [pc, #52]	@ (8001020 <MX_TIM10_Init+0x40>)
 8000fec:	224f      	movs	r2, #79	@ 0x4f
 8000fee:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8001020 <MX_TIM10_Init+0x40>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8001020 <MX_TIM10_Init+0x40>)
 8000ff8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ffc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffe:	4b08      	ldr	r3, [pc, #32]	@ (8001020 <MX_TIM10_Init+0x40>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001004:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <MX_TIM10_Init+0x40>)
 8001006:	2200      	movs	r2, #0
 8001008:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800100a:	4805      	ldr	r0, [pc, #20]	@ (8001020 <MX_TIM10_Init+0x40>)
 800100c:	f002 fbc4 	bl	8003798 <HAL_TIM_Base_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001016:	f000 f99d 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	2000011c 	.word	0x2000011c
 8001024:	40014400 	.word	0x40014400

08001028 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800102c:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <MX_USART2_UART_Init+0x4c>)
 800102e:	4a12      	ldr	r2, [pc, #72]	@ (8001078 <MX_USART2_UART_Init+0x50>)
 8001030:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001032:	4b10      	ldr	r3, [pc, #64]	@ (8001074 <MX_USART2_UART_Init+0x4c>)
 8001034:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001038:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800103a:	4b0e      	ldr	r3, [pc, #56]	@ (8001074 <MX_USART2_UART_Init+0x4c>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001040:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <MX_USART2_UART_Init+0x4c>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001046:	4b0b      	ldr	r3, [pc, #44]	@ (8001074 <MX_USART2_UART_Init+0x4c>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800104c:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <MX_USART2_UART_Init+0x4c>)
 800104e:	220c      	movs	r2, #12
 8001050:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001052:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <MX_USART2_UART_Init+0x4c>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001058:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <MX_USART2_UART_Init+0x4c>)
 800105a:	2200      	movs	r2, #0
 800105c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800105e:	4805      	ldr	r0, [pc, #20]	@ (8001074 <MX_USART2_UART_Init+0x4c>)
 8001060:	f003 fbca 	bl	80047f8 <HAL_UART_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800106a:	f000 f973 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000164 	.word	0x20000164
 8001078:	40004400 	.word	0x40004400

0800107c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <MX_DMA_Init+0x3c>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	4a0b      	ldr	r2, [pc, #44]	@ (80010b8 <MX_DMA_Init+0x3c>)
 800108c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001090:	6313      	str	r3, [r2, #48]	@ 0x30
 8001092:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <MX_DMA_Init+0x3c>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	2038      	movs	r0, #56	@ 0x38
 80010a4:	f001 f8c1 	bl	800222a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80010a8:	2038      	movs	r0, #56	@ 0x38
 80010aa:	f001 f8da 	bl	8002262 <HAL_NVIC_EnableIRQ>

}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40023800 	.word	0x40023800

080010bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c2:	f107 030c 	add.w	r3, r7, #12
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	4b20      	ldr	r3, [pc, #128]	@ (8001158 <MX_GPIO_Init+0x9c>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	4a1f      	ldr	r2, [pc, #124]	@ (8001158 <MX_GPIO_Init+0x9c>)
 80010dc:	f043 0304 	orr.w	r3, r3, #4
 80010e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001158 <MX_GPIO_Init+0x9c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	f003 0304 	and.w	r3, r3, #4
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	4b19      	ldr	r3, [pc, #100]	@ (8001158 <MX_GPIO_Init+0x9c>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	4a18      	ldr	r2, [pc, #96]	@ (8001158 <MX_GPIO_Init+0x9c>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010fe:	4b16      	ldr	r3, [pc, #88]	@ (8001158 <MX_GPIO_Init+0x9c>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	603b      	str	r3, [r7, #0]
 800110e:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <MX_GPIO_Init+0x9c>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	4a11      	ldr	r2, [pc, #68]	@ (8001158 <MX_GPIO_Init+0x9c>)
 8001114:	f043 0302 	orr.w	r3, r3, #2
 8001118:	6313      	str	r3, [r2, #48]	@ 0x30
 800111a:	4b0f      	ldr	r3, [pc, #60]	@ (8001158 <MX_GPIO_Init+0x9c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 8001126:	2200      	movs	r2, #0
 8001128:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800112c:	480b      	ldr	r0, [pc, #44]	@ (800115c <MX_GPIO_Init+0xa0>)
 800112e:	f001 fdb7 	bl	8002ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIR_Pin */
  GPIO_InitStruct.Pin = DIR_Pin;
 8001132:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001136:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001138:	2301      	movs	r3, #1
 800113a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2300      	movs	r3, #0
 8001142:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	4619      	mov	r1, r3
 800114a:	4804      	ldr	r0, [pc, #16]	@ (800115c <MX_GPIO_Init+0xa0>)
 800114c:	f001 fc14 	bl	8002978 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001150:	bf00      	nop
 8001152:	3720      	adds	r7, #32
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40023800 	.word	0x40023800
 800115c:	40020000 	.word	0x40020000

08001160 <set_control>:

int32_t i = 0;
uint32_t delta = 30;
/* USER CODE BEGIN 4 */
void set_control(uint16_t error){ 
 8001160:	b5b0      	push	{r4, r5, r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	80fb      	strh	r3, [r7, #6]
  if (abs((int)pow(2, 11) - error) > delta) {
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001170:	2b00      	cmp	r3, #0
 8001172:	bfb8      	it	lt
 8001174:	425b      	neglt	r3, r3
 8001176:	461a      	mov	r2, r3
 8001178:	4b38      	ldr	r3, [pc, #224]	@ (800125c <set_control+0xfc>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	429a      	cmp	r2, r3
 800117e:	d965      	bls.n	800124c <set_control+0xec>
    if(error < pow(2, 11)){
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001186:	d206      	bcs.n	8001196 <set_control+0x36>
      HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_SET);
 8001188:	2201      	movs	r2, #1
 800118a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800118e:	4834      	ldr	r0, [pc, #208]	@ (8001260 <set_control+0x100>)
 8001190:	f001 fd86 	bl	8002ca0 <HAL_GPIO_WritePin>
 8001194:	e005      	b.n	80011a2 <set_control+0x42>
    } else {
      HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800119c:	4830      	ldr	r0, [pc, #192]	@ (8001260 <set_control+0x100>)
 800119e:	f001 fd7f 	bl	8002ca0 <HAL_GPIO_WritePin>
    }
    i += error - pow(2, 11);
 80011a2:	88fb      	ldrh	r3, [r7, #6]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff f97f 	bl	80004a8 <__aeabi_i2d>
 80011aa:	f04f 0200 	mov.w	r2, #0
 80011ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001264 <set_control+0x104>)
 80011b0:	f7ff f82c 	bl	800020c <__aeabi_dsub>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4614      	mov	r4, r2
 80011ba:	461d      	mov	r5, r3
 80011bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001268 <set_control+0x108>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff f971 	bl	80004a8 <__aeabi_i2d>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4620      	mov	r0, r4
 80011cc:	4629      	mov	r1, r5
 80011ce:	f7ff f81f 	bl	8000210 <__adddf3>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4610      	mov	r0, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	f7ff fbe1 	bl	80009a0 <__aeabi_d2iz>
 80011de:	4603      	mov	r3, r0
 80011e0:	4a21      	ldr	r2, [pc, #132]	@ (8001268 <set_control+0x108>)
 80011e2:	6013      	str	r3, [r2, #0]

    uint32_t pwm = abs(5 * 100 * ((float) error - pow(2, 11)) / pow(2, 11)) + i;
 80011e4:	88fb      	ldrh	r3, [r7, #6]
 80011e6:	ee07 3a90 	vmov	s15, r3
 80011ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011ee:	ee17 0a90 	vmov	r0, s15
 80011f2:	f7ff f96b 	bl	80004cc <__aeabi_f2d>
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001264 <set_control+0x104>)
 80011fc:	f7ff f806 	bl	800020c <__aeabi_dsub>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4610      	mov	r0, r2
 8001206:	4619      	mov	r1, r3
 8001208:	f04f 0200 	mov.w	r2, #0
 800120c:	4b17      	ldr	r3, [pc, #92]	@ (800126c <set_control+0x10c>)
 800120e:	f7ff f9b5 	bl	800057c <__aeabi_dmul>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4610      	mov	r0, r2
 8001218:	4619      	mov	r1, r3
 800121a:	f04f 0200 	mov.w	r2, #0
 800121e:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <set_control+0x104>)
 8001220:	f7ff fad6 	bl	80007d0 <__aeabi_ddiv>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4610      	mov	r0, r2
 800122a:	4619      	mov	r1, r3
 800122c:	f7ff fbb8 	bl	80009a0 <__aeabi_d2iz>
 8001230:	4603      	mov	r3, r0
 8001232:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001236:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800123a:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <set_control+0x108>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4413      	add	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, pwm);
 8001242:	4b0b      	ldr	r3, [pc, #44]	@ (8001270 <set_control+0x110>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	63da      	str	r2, [r3, #60]	@ 0x3c
  } else {
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
  }
}
 800124a:	e003      	b.n	8001254 <set_control+0xf4>
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 800124c:	4b08      	ldr	r3, [pc, #32]	@ (8001270 <set_control+0x110>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2200      	movs	r2, #0
 8001252:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bdb0      	pop	{r4, r5, r7, pc}
 800125c:	20000000 	.word	0x20000000
 8001260:	40020000 	.word	0x40020000
 8001264:	40a00000 	.word	0x40a00000
 8001268:	200001c0 	.word	0x200001c0
 800126c:	407f4000 	.word	0x407f4000
 8001270:	200000d4 	.word	0x200000d4

08001274 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001274:	b5b0      	push	{r4, r5, r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM10)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a2d      	ldr	r2, [pc, #180]	@ (8001338 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d154      	bne.n	8001330 <HAL_TIM_PeriodElapsedCallback+0xbc>
  {
    msg.header = message_header;
 8001286:	4b2d      	ldr	r3, [pc, #180]	@ (800133c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001288:	f64a 32cd 	movw	r2, #43981	@ 0xabcd
 800128c:	801a      	strh	r2, [r3, #0]
    msg.motor_pos = adc_value[0];
 800128e:	4b2c      	ldr	r3, [pc, #176]	@ (8001340 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001290:	881a      	ldrh	r2, [r3, #0]
 8001292:	4b2a      	ldr	r3, [pc, #168]	@ (800133c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001294:	805a      	strh	r2, [r3, #2]
    msg.pot_pos = adc_value[1];
 8001296:	4b2a      	ldr	r3, [pc, #168]	@ (8001340 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001298:	885a      	ldrh	r2, [r3, #2]
 800129a:	4b28      	ldr	r3, [pc, #160]	@ (800133c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800129c:	809a      	strh	r2, [r3, #4]
    msg.terminator = message_terminator;
 800129e:	4b27      	ldr	r3, [pc, #156]	@ (800133c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80012a0:	f64b 62da 	movw	r2, #48858	@ 0xbeda
 80012a4:	811a      	strh	r2, [r3, #8]
    uint16_t error = pow(2, 11) + msg.pot_pos - (msg.motor_pos);
 80012a6:	4b25      	ldr	r3, [pc, #148]	@ (800133c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80012a8:	889b      	ldrh	r3, [r3, #4]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f8fc 	bl	80004a8 <__aeabi_i2d>
 80012b0:	f04f 0200 	mov.w	r2, #0
 80012b4:	4b23      	ldr	r3, [pc, #140]	@ (8001344 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80012b6:	f7fe ffab 	bl	8000210 <__adddf3>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4614      	mov	r4, r2
 80012c0:	461d      	mov	r5, r3
 80012c2:	4b1e      	ldr	r3, [pc, #120]	@ (800133c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80012c4:	885b      	ldrh	r3, [r3, #2]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f8ee 	bl	80004a8 <__aeabi_i2d>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4620      	mov	r0, r4
 80012d2:	4629      	mov	r1, r5
 80012d4:	f7fe ff9a 	bl	800020c <__aeabi_dsub>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4610      	mov	r0, r2
 80012de:	4619      	mov	r1, r3
 80012e0:	f7ff fb86 	bl	80009f0 <__aeabi_d2uiz>
 80012e4:	4603      	mov	r3, r0
 80012e6:	81fb      	strh	r3, [r7, #14]
    if(msg.pot_pos > 4000 || msg.pot_pos < 200) {
 80012e8:	4b14      	ldr	r3, [pc, #80]	@ (800133c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80012ea:	889b      	ldrh	r3, [r3, #4]
 80012ec:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80012f0:	d803      	bhi.n	80012fa <HAL_TIM_PeriodElapsedCallback+0x86>
 80012f2:	4b12      	ldr	r3, [pc, #72]	@ (800133c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80012f4:	889b      	ldrh	r3, [r3, #4]
 80012f6:	2bc7      	cmp	r3, #199	@ 0xc7
 80012f8:	d802      	bhi.n	8001300 <HAL_TIM_PeriodElapsedCallback+0x8c>
      error = pow(2, 11);
 80012fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80012fe:	81fb      	strh	r3, [r7, #14]
    }
    msg.error =  error;  
 8001300:	4a0e      	ldr	r2, [pc, #56]	@ (800133c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001302:	89fb      	ldrh	r3, [r7, #14]
 8001304:	80d3      	strh	r3, [r2, #6]
    // char buffer[100];
    // sprintf(buffer, "adc0: %d, adc1: %d\n", msg.motor_pos, msg.pot_pos);
    // HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 1000); // send message
    HAL_UART_Transmit(&huart2, (uint8_t*)&msg, sizeof(msg), 1000); // send message
 8001306:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800130a:	220a      	movs	r2, #10
 800130c:	490b      	ldr	r1, [pc, #44]	@ (800133c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800130e:	480e      	ldr	r0, [pc, #56]	@ (8001348 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001310:	f003 fac2 	bl	8004898 <HAL_UART_Transmit>
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_value, 2); // start ADC conversion
 8001314:	2202      	movs	r2, #2
 8001316:	490a      	ldr	r1, [pc, #40]	@ (8001340 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001318:	480c      	ldr	r0, [pc, #48]	@ (800134c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800131a:	f000 facd 	bl	80018b8 <HAL_ADC_Start_DMA>
    timer++;
 800131e:	4b0c      	ldr	r3, [pc, #48]	@ (8001350 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	3301      	adds	r3, #1
 8001324:	4a0a      	ldr	r2, [pc, #40]	@ (8001350 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001326:	6013      	str	r3, [r2, #0]

    set_control(error);
 8001328:	89fb      	ldrh	r3, [r7, #14]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff ff18 	bl	8001160 <set_control>
  }
}
 8001330:	bf00      	nop
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bdb0      	pop	{r4, r5, r7, pc}
 8001338:	40014400 	.word	0x40014400
 800133c:	200001b4 	.word	0x200001b4
 8001340:	200001ac 	.word	0x200001ac
 8001344:	40a00000 	.word	0x40a00000
 8001348:	20000164 	.word	0x20000164
 800134c:	2000002c 	.word	0x2000002c
 8001350:	200001b0 	.word	0x200001b0

08001354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001358:	b672      	cpsid	i
}
 800135a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <Error_Handler+0x8>

08001360 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	4b10      	ldr	r3, [pc, #64]	@ (80013ac <HAL_MspInit+0x4c>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136e:	4a0f      	ldr	r2, [pc, #60]	@ (80013ac <HAL_MspInit+0x4c>)
 8001370:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001374:	6453      	str	r3, [r2, #68]	@ 0x44
 8001376:	4b0d      	ldr	r3, [pc, #52]	@ (80013ac <HAL_MspInit+0x4c>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	603b      	str	r3, [r7, #0]
 8001386:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <HAL_MspInit+0x4c>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138a:	4a08      	ldr	r2, [pc, #32]	@ (80013ac <HAL_MspInit+0x4c>)
 800138c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001390:	6413      	str	r3, [r2, #64]	@ 0x40
 8001392:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <HAL_MspInit+0x4c>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800

080013b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	@ 0x28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a3b      	ldr	r2, [pc, #236]	@ (80014bc <HAL_ADC_MspInit+0x10c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d170      	bne.n	80014b4 <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	4b3a      	ldr	r3, [pc, #232]	@ (80014c0 <HAL_ADC_MspInit+0x110>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013da:	4a39      	ldr	r2, [pc, #228]	@ (80014c0 <HAL_ADC_MspInit+0x110>)
 80013dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013e2:	4b37      	ldr	r3, [pc, #220]	@ (80014c0 <HAL_ADC_MspInit+0x110>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	4b33      	ldr	r3, [pc, #204]	@ (80014c0 <HAL_ADC_MspInit+0x110>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	4a32      	ldr	r2, [pc, #200]	@ (80014c0 <HAL_ADC_MspInit+0x110>)
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fe:	4b30      	ldr	r3, [pc, #192]	@ (80014c0 <HAL_ADC_MspInit+0x110>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	f003 0304 	and.w	r3, r3, #4
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	4b2c      	ldr	r3, [pc, #176]	@ (80014c0 <HAL_ADC_MspInit+0x110>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	4a2b      	ldr	r2, [pc, #172]	@ (80014c0 <HAL_ADC_MspInit+0x110>)
 8001414:	f043 0302 	orr.w	r3, r3, #2
 8001418:	6313      	str	r3, [r2, #48]	@ 0x30
 800141a:	4b29      	ldr	r3, [pc, #164]	@ (80014c0 <HAL_ADC_MspInit+0x110>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001426:	2301      	movs	r3, #1
 8001428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800142a:	2303      	movs	r3, #3
 800142c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	4619      	mov	r1, r3
 8001438:	4822      	ldr	r0, [pc, #136]	@ (80014c4 <HAL_ADC_MspInit+0x114>)
 800143a:	f001 fa9d 	bl	8002978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800143e:	2301      	movs	r3, #1
 8001440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001442:	2303      	movs	r3, #3
 8001444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	4619      	mov	r1, r3
 8001450:	481d      	ldr	r0, [pc, #116]	@ (80014c8 <HAL_ADC_MspInit+0x118>)
 8001452:	f001 fa91 	bl	8002978 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001456:	4b1d      	ldr	r3, [pc, #116]	@ (80014cc <HAL_ADC_MspInit+0x11c>)
 8001458:	4a1d      	ldr	r2, [pc, #116]	@ (80014d0 <HAL_ADC_MspInit+0x120>)
 800145a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800145c:	4b1b      	ldr	r3, [pc, #108]	@ (80014cc <HAL_ADC_MspInit+0x11c>)
 800145e:	2200      	movs	r2, #0
 8001460:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001462:	4b1a      	ldr	r3, [pc, #104]	@ (80014cc <HAL_ADC_MspInit+0x11c>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001468:	4b18      	ldr	r3, [pc, #96]	@ (80014cc <HAL_ADC_MspInit+0x11c>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800146e:	4b17      	ldr	r3, [pc, #92]	@ (80014cc <HAL_ADC_MspInit+0x11c>)
 8001470:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001474:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001476:	4b15      	ldr	r3, [pc, #84]	@ (80014cc <HAL_ADC_MspInit+0x11c>)
 8001478:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800147c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800147e:	4b13      	ldr	r3, [pc, #76]	@ (80014cc <HAL_ADC_MspInit+0x11c>)
 8001480:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001484:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001486:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <HAL_ADC_MspInit+0x11c>)
 8001488:	2200      	movs	r2, #0
 800148a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800148c:	4b0f      	ldr	r3, [pc, #60]	@ (80014cc <HAL_ADC_MspInit+0x11c>)
 800148e:	2200      	movs	r2, #0
 8001490:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001492:	4b0e      	ldr	r3, [pc, #56]	@ (80014cc <HAL_ADC_MspInit+0x11c>)
 8001494:	2200      	movs	r2, #0
 8001496:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001498:	480c      	ldr	r0, [pc, #48]	@ (80014cc <HAL_ADC_MspInit+0x11c>)
 800149a:	f000 fefd 	bl	8002298 <HAL_DMA_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 80014a4:	f7ff ff56 	bl	8001354 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a08      	ldr	r2, [pc, #32]	@ (80014cc <HAL_ADC_MspInit+0x11c>)
 80014ac:	639a      	str	r2, [r3, #56]	@ 0x38
 80014ae:	4a07      	ldr	r2, [pc, #28]	@ (80014cc <HAL_ADC_MspInit+0x11c>)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80014b4:	bf00      	nop
 80014b6:	3728      	adds	r7, #40	@ 0x28
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40012000 	.word	0x40012000
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40020800 	.word	0x40020800
 80014c8:	40020400 	.word	0x40020400
 80014cc:	20000074 	.word	0x20000074
 80014d0:	40026410 	.word	0x40026410

080014d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014e4:	d10e      	bne.n	8001504 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b16      	ldr	r3, [pc, #88]	@ (8001544 <HAL_TIM_Base_MspInit+0x70>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ee:	4a15      	ldr	r2, [pc, #84]	@ (8001544 <HAL_TIM_Base_MspInit+0x70>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014f6:	4b13      	ldr	r3, [pc, #76]	@ (8001544 <HAL_TIM_Base_MspInit+0x70>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001502:	e01a      	b.n	800153a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM10)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0f      	ldr	r2, [pc, #60]	@ (8001548 <HAL_TIM_Base_MspInit+0x74>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d115      	bne.n	800153a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <HAL_TIM_Base_MspInit+0x70>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001516:	4a0b      	ldr	r2, [pc, #44]	@ (8001544 <HAL_TIM_Base_MspInit+0x70>)
 8001518:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800151c:	6453      	str	r3, [r2, #68]	@ 0x44
 800151e:	4b09      	ldr	r3, [pc, #36]	@ (8001544 <HAL_TIM_Base_MspInit+0x70>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2100      	movs	r1, #0
 800152e:	2019      	movs	r0, #25
 8001530:	f000 fe7b 	bl	800222a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001534:	2019      	movs	r0, #25
 8001536:	f000 fe94 	bl	8002262 <HAL_NVIC_EnableIRQ>
}
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800
 8001548:	40014400 	.word	0x40014400

0800154c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800156c:	d11e      	bne.n	80015ac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <HAL_TIM_MspPostInit+0x68>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	4a0f      	ldr	r2, [pc, #60]	@ (80015b4 <HAL_TIM_MspPostInit+0x68>)
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	6313      	str	r3, [r2, #48]	@ 0x30
 800157e:	4b0d      	ldr	r3, [pc, #52]	@ (80015b4 <HAL_TIM_MspPostInit+0x68>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800158a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800158e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800159c:	2301      	movs	r3, #1
 800159e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	4619      	mov	r1, r3
 80015a6:	4804      	ldr	r0, [pc, #16]	@ (80015b8 <HAL_TIM_MspPostInit+0x6c>)
 80015a8:	f001 f9e6 	bl	8002978 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80015ac:	bf00      	nop
 80015ae:	3720      	adds	r7, #32
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40020400 	.word	0x40020400

080015bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	@ 0x28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a19      	ldr	r2, [pc, #100]	@ (8001640 <HAL_UART_MspInit+0x84>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d12b      	bne.n	8001636 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	4b18      	ldr	r3, [pc, #96]	@ (8001644 <HAL_UART_MspInit+0x88>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e6:	4a17      	ldr	r2, [pc, #92]	@ (8001644 <HAL_UART_MspInit+0x88>)
 80015e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ee:	4b15      	ldr	r3, [pc, #84]	@ (8001644 <HAL_UART_MspInit+0x88>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b11      	ldr	r3, [pc, #68]	@ (8001644 <HAL_UART_MspInit+0x88>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	4a10      	ldr	r2, [pc, #64]	@ (8001644 <HAL_UART_MspInit+0x88>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6313      	str	r3, [r2, #48]	@ 0x30
 800160a:	4b0e      	ldr	r3, [pc, #56]	@ (8001644 <HAL_UART_MspInit+0x88>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001616:	230c      	movs	r3, #12
 8001618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	2302      	movs	r3, #2
 800161c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001622:	2303      	movs	r3, #3
 8001624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001626:	2307      	movs	r3, #7
 8001628:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	4619      	mov	r1, r3
 8001630:	4805      	ldr	r0, [pc, #20]	@ (8001648 <HAL_UART_MspInit+0x8c>)
 8001632:	f001 f9a1 	bl	8002978 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001636:	bf00      	nop
 8001638:	3728      	adds	r7, #40	@ 0x28
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40004400 	.word	0x40004400
 8001644:	40023800 	.word	0x40023800
 8001648:	40020000 	.word	0x40020000

0800164c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <NMI_Handler+0x4>

08001654 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <HardFault_Handler+0x4>

0800165c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <MemManage_Handler+0x4>

08001664 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <BusFault_Handler+0x4>

0800166c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <UsageFault_Handler+0x4>

08001674 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a2:	f000 f8a5 	bl	80017f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80016b0:	4802      	ldr	r0, [pc, #8]	@ (80016bc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80016b2:	f002 fa53 	bl	8003b5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	2000011c 	.word	0x2000011c

080016c0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016c4:	4802      	ldr	r0, [pc, #8]	@ (80016d0 <DMA2_Stream0_IRQHandler+0x10>)
 80016c6:	f000 feed 	bl	80024a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000074 	.word	0x20000074

080016d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016d8:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <SystemInit+0x20>)
 80016da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016de:	4a05      	ldr	r2, [pc, #20]	@ (80016f4 <SystemInit+0x20>)
 80016e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001730 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016fc:	f7ff ffea 	bl	80016d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001700:	480c      	ldr	r0, [pc, #48]	@ (8001734 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001702:	490d      	ldr	r1, [pc, #52]	@ (8001738 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001704:	4a0d      	ldr	r2, [pc, #52]	@ (800173c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001708:	e002      	b.n	8001710 <LoopCopyDataInit>

0800170a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800170c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800170e:	3304      	adds	r3, #4

08001710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001714:	d3f9      	bcc.n	800170a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001716:	4a0a      	ldr	r2, [pc, #40]	@ (8001740 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001718:	4c0a      	ldr	r4, [pc, #40]	@ (8001744 <LoopFillZerobss+0x22>)
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800171c:	e001      	b.n	8001722 <LoopFillZerobss>

0800171e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800171e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001720:	3204      	adds	r2, #4

08001722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001724:	d3fb      	bcc.n	800171e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001726:	f003 fc7b 	bl	8005020 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800172a:	f7ff faf9 	bl	8000d20 <main>
  bx  lr    
 800172e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001730:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001738:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800173c:	080050b0 	.word	0x080050b0
  ldr r2, =_sbss
 8001740:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001744:	200001c8 	.word	0x200001c8

08001748 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001748:	e7fe      	b.n	8001748 <ADC_IRQHandler>
	...

0800174c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001750:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <HAL_Init+0x40>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0d      	ldr	r2, [pc, #52]	@ (800178c <HAL_Init+0x40>)
 8001756:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800175a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800175c:	4b0b      	ldr	r3, [pc, #44]	@ (800178c <HAL_Init+0x40>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a0a      	ldr	r2, [pc, #40]	@ (800178c <HAL_Init+0x40>)
 8001762:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001766:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001768:	4b08      	ldr	r3, [pc, #32]	@ (800178c <HAL_Init+0x40>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a07      	ldr	r2, [pc, #28]	@ (800178c <HAL_Init+0x40>)
 800176e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001772:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001774:	2003      	movs	r0, #3
 8001776:	f000 fd4d 	bl	8002214 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800177a:	200f      	movs	r0, #15
 800177c:	f000 f808 	bl	8001790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001780:	f7ff fdee 	bl	8001360 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40023c00 	.word	0x40023c00

08001790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001798:	4b12      	ldr	r3, [pc, #72]	@ (80017e4 <HAL_InitTick+0x54>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b12      	ldr	r3, [pc, #72]	@ (80017e8 <HAL_InitTick+0x58>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	4619      	mov	r1, r3
 80017a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 fd65 	bl	800227e <HAL_SYSTICK_Config>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e00e      	b.n	80017dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b0f      	cmp	r3, #15
 80017c2:	d80a      	bhi.n	80017da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c4:	2200      	movs	r2, #0
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017cc:	f000 fd2d 	bl	800222a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d0:	4a06      	ldr	r2, [pc, #24]	@ (80017ec <HAL_InitTick+0x5c>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	e000      	b.n	80017dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000004 	.word	0x20000004
 80017e8:	2000000c 	.word	0x2000000c
 80017ec:	20000008 	.word	0x20000008

080017f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f4:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <HAL_IncTick+0x20>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <HAL_IncTick+0x24>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4413      	add	r3, r2
 8001800:	4a04      	ldr	r2, [pc, #16]	@ (8001814 <HAL_IncTick+0x24>)
 8001802:	6013      	str	r3, [r2, #0]
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	2000000c 	.word	0x2000000c
 8001814:	200001c4 	.word	0x200001c4

08001818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return uwTick;
 800181c:	4b03      	ldr	r3, [pc, #12]	@ (800182c <HAL_GetTick+0x14>)
 800181e:	681b      	ldr	r3, [r3, #0]
}
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	200001c4 	.word	0x200001c4

08001830 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001838:	2300      	movs	r3, #0
 800183a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e033      	b.n	80018ae <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184a:	2b00      	cmp	r3, #0
 800184c:	d109      	bne.n	8001862 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff fdae 	bl	80013b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	f003 0310 	and.w	r3, r3, #16
 800186a:	2b00      	cmp	r3, #0
 800186c:	d118      	bne.n	80018a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001876:	f023 0302 	bic.w	r3, r3, #2
 800187a:	f043 0202 	orr.w	r2, r3, #2
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 fa78 	bl	8001d78 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001892:	f023 0303 	bic.w	r3, r3, #3
 8001896:	f043 0201 	orr.w	r2, r3, #1
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	641a      	str	r2, [r3, #64]	@ 0x40
 800189e:	e001      	b.n	80018a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d101      	bne.n	80018d6 <HAL_ADC_Start_DMA+0x1e>
 80018d2:	2302      	movs	r3, #2
 80018d4:	e0e9      	b.n	8001aaa <HAL_ADC_Start_DMA+0x1f2>
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d018      	beq.n	800191e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	689a      	ldr	r2, [r3, #8]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0201 	orr.w	r2, r2, #1
 80018fa:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018fc:	4b6d      	ldr	r3, [pc, #436]	@ (8001ab4 <HAL_ADC_Start_DMA+0x1fc>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a6d      	ldr	r2, [pc, #436]	@ (8001ab8 <HAL_ADC_Start_DMA+0x200>)
 8001902:	fba2 2303 	umull	r2, r3, r2, r3
 8001906:	0c9a      	lsrs	r2, r3, #18
 8001908:	4613      	mov	r3, r2
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	4413      	add	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001910:	e002      	b.n	8001918 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	3b01      	subs	r3, #1
 8001916:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f9      	bne.n	8001912 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001928:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800192c:	d107      	bne.n	800193e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800193c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	2b01      	cmp	r3, #1
 800194a:	f040 80a1 	bne.w	8001a90 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001952:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001956:	f023 0301 	bic.w	r3, r3, #1
 800195a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800196c:	2b00      	cmp	r3, #0
 800196e:	d007      	beq.n	8001980 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001974:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001978:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001984:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001988:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800198c:	d106      	bne.n	800199c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001992:	f023 0206 	bic.w	r2, r3, #6
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	645a      	str	r2, [r3, #68]	@ 0x44
 800199a:	e002      	b.n	80019a2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2200      	movs	r2, #0
 80019a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019aa:	4b44      	ldr	r3, [pc, #272]	@ (8001abc <HAL_ADC_Start_DMA+0x204>)
 80019ac:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019b2:	4a43      	ldr	r2, [pc, #268]	@ (8001ac0 <HAL_ADC_Start_DMA+0x208>)
 80019b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019ba:	4a42      	ldr	r2, [pc, #264]	@ (8001ac4 <HAL_ADC_Start_DMA+0x20c>)
 80019bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019c2:	4a41      	ldr	r2, [pc, #260]	@ (8001ac8 <HAL_ADC_Start_DMA+0x210>)
 80019c4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80019ce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80019de:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019ee:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	334c      	adds	r3, #76	@ 0x4c
 80019fa:	4619      	mov	r1, r3
 80019fc:	68ba      	ldr	r2, [r7, #8]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f000 fcf8 	bl	80023f4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 031f 	and.w	r3, r3, #31
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d12a      	bne.n	8001a66 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a2d      	ldr	r2, [pc, #180]	@ (8001acc <HAL_ADC_Start_DMA+0x214>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d015      	beq.n	8001a46 <HAL_ADC_Start_DMA+0x18e>
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a2c      	ldr	r2, [pc, #176]	@ (8001ad0 <HAL_ADC_Start_DMA+0x218>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d105      	bne.n	8001a30 <HAL_ADC_Start_DMA+0x178>
 8001a24:	4b25      	ldr	r3, [pc, #148]	@ (8001abc <HAL_ADC_Start_DMA+0x204>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 031f 	and.w	r3, r3, #31
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00a      	beq.n	8001a46 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a27      	ldr	r2, [pc, #156]	@ (8001ad4 <HAL_ADC_Start_DMA+0x21c>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d136      	bne.n	8001aa8 <HAL_ADC_Start_DMA+0x1f0>
 8001a3a:	4b20      	ldr	r3, [pc, #128]	@ (8001abc <HAL_ADC_Start_DMA+0x204>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 0310 	and.w	r3, r3, #16
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d130      	bne.n	8001aa8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d129      	bne.n	8001aa8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	689a      	ldr	r2, [r3, #8]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	e020      	b.n	8001aa8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a18      	ldr	r2, [pc, #96]	@ (8001acc <HAL_ADC_Start_DMA+0x214>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d11b      	bne.n	8001aa8 <HAL_ADC_Start_DMA+0x1f0>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d114      	bne.n	8001aa8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	e00b      	b.n	8001aa8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a94:	f043 0210 	orr.w	r2, r3, #16
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa0:	f043 0201 	orr.w	r2, r3, #1
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000004 	.word	0x20000004
 8001ab8:	431bde83 	.word	0x431bde83
 8001abc:	40012300 	.word	0x40012300
 8001ac0:	08001f71 	.word	0x08001f71
 8001ac4:	0800202b 	.word	0x0800202b
 8001ac8:	08002047 	.word	0x08002047
 8001acc:	40012000 	.word	0x40012000
 8001ad0:	40012100 	.word	0x40012100
 8001ad4:	40012200 	.word	0x40012200

08001ad8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d101      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x1c>
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	e113      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x244>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b09      	cmp	r3, #9
 8001b3e:	d925      	bls.n	8001b8c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68d9      	ldr	r1, [r3, #12]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4613      	mov	r3, r2
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	4413      	add	r3, r2
 8001b54:	3b1e      	subs	r3, #30
 8001b56:	2207      	movs	r2, #7
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43da      	mvns	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	400a      	ands	r2, r1
 8001b64:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68d9      	ldr	r1, [r3, #12]
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	4618      	mov	r0, r3
 8001b78:	4603      	mov	r3, r0
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4403      	add	r3, r0
 8001b7e:	3b1e      	subs	r3, #30
 8001b80:	409a      	lsls	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	e022      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6919      	ldr	r1, [r3, #16]
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4413      	add	r3, r2
 8001ba0:	2207      	movs	r2, #7
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43da      	mvns	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	400a      	ands	r2, r1
 8001bae:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6919      	ldr	r1, [r3, #16]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	4403      	add	r3, r0
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b06      	cmp	r3, #6
 8001bd8:	d824      	bhi.n	8001c24 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	4613      	mov	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	3b05      	subs	r3, #5
 8001bec:	221f      	movs	r2, #31
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43da      	mvns	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	400a      	ands	r2, r1
 8001bfa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	4618      	mov	r0, r3
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	3b05      	subs	r3, #5
 8001c16:	fa00 f203 	lsl.w	r2, r0, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c22:	e04c      	b.n	8001cbe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b0c      	cmp	r3, #12
 8001c2a:	d824      	bhi.n	8001c76 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3b23      	subs	r3, #35	@ 0x23
 8001c3e:	221f      	movs	r2, #31
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43da      	mvns	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	400a      	ands	r2, r1
 8001c4c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	4613      	mov	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	3b23      	subs	r3, #35	@ 0x23
 8001c68:	fa00 f203 	lsl.w	r2, r0, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c74:	e023      	b.n	8001cbe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	3b41      	subs	r3, #65	@ 0x41
 8001c88:	221f      	movs	r2, #31
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43da      	mvns	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	400a      	ands	r2, r1
 8001c96:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	4613      	mov	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	3b41      	subs	r3, #65	@ 0x41
 8001cb2:	fa00 f203 	lsl.w	r2, r0, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cbe:	4b29      	ldr	r3, [pc, #164]	@ (8001d64 <HAL_ADC_ConfigChannel+0x250>)
 8001cc0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a28      	ldr	r2, [pc, #160]	@ (8001d68 <HAL_ADC_ConfigChannel+0x254>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d10f      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x1d8>
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b12      	cmp	r3, #18
 8001cd2:	d10b      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a1d      	ldr	r2, [pc, #116]	@ (8001d68 <HAL_ADC_ConfigChannel+0x254>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d12b      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x23a>
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a1c      	ldr	r2, [pc, #112]	@ (8001d6c <HAL_ADC_ConfigChannel+0x258>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d003      	beq.n	8001d08 <HAL_ADC_ConfigChannel+0x1f4>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b11      	cmp	r3, #17
 8001d06:	d122      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a11      	ldr	r2, [pc, #68]	@ (8001d6c <HAL_ADC_ConfigChannel+0x258>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d111      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d2a:	4b11      	ldr	r3, [pc, #68]	@ (8001d70 <HAL_ADC_ConfigChannel+0x25c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a11      	ldr	r2, [pc, #68]	@ (8001d74 <HAL_ADC_ConfigChannel+0x260>)
 8001d30:	fba2 2303 	umull	r2, r3, r2, r3
 8001d34:	0c9a      	lsrs	r2, r3, #18
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d40:	e002      	b.n	8001d48 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	3b01      	subs	r3, #1
 8001d46:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f9      	bne.n	8001d42 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	40012300 	.word	0x40012300
 8001d68:	40012000 	.word	0x40012000
 8001d6c:	10000012 	.word	0x10000012
 8001d70:	20000004 	.word	0x20000004
 8001d74:	431bde83 	.word	0x431bde83

08001d78 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d80:	4b79      	ldr	r3, [pc, #484]	@ (8001f68 <ADC_Init+0x1f0>)
 8001d82:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001dac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6859      	ldr	r1, [r3, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	021a      	lsls	r2, r3, #8
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001dd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6859      	ldr	r1, [r3, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001df2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6899      	ldr	r1, [r3, #8]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e0a:	4a58      	ldr	r2, [pc, #352]	@ (8001f6c <ADC_Init+0x1f4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d022      	beq.n	8001e56 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6899      	ldr	r1, [r3, #8]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6899      	ldr	r1, [r3, #8]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	e00f      	b.n	8001e76 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e74:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 0202 	bic.w	r2, r2, #2
 8001e84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6899      	ldr	r1, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	7e1b      	ldrb	r3, [r3, #24]
 8001e90:	005a      	lsls	r2, r3, #1
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d01b      	beq.n	8001edc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001eb2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001ec2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6859      	ldr	r1, [r3, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	035a      	lsls	r2, r3, #13
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	e007      	b.n	8001eec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001eea:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001efa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	051a      	lsls	r2, r3, #20
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001f20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6899      	ldr	r1, [r3, #8]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f2e:	025a      	lsls	r2, r3, #9
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6899      	ldr	r1, [r3, #8]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	029a      	lsls	r2, r3, #10
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	609a      	str	r2, [r3, #8]
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	40012300 	.word	0x40012300
 8001f6c:	0f000001 	.word	0x0f000001

08001f70 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f7c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f82:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d13c      	bne.n	8002004 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d12b      	bne.n	8001ffc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d127      	bne.n	8001ffc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d006      	beq.n	8001fc8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d119      	bne.n	8001ffc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 0220 	bic.w	r2, r2, #32
 8001fd6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fdc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d105      	bne.n	8001ffc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff4:	f043 0201 	orr.w	r2, r3, #1
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f7ff fd6b 	bl	8001ad8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002002:	e00e      	b.n	8002022 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002008:	f003 0310 	and.w	r3, r3, #16
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f7ff fd75 	bl	8001b00 <HAL_ADC_ErrorCallback>
}
 8002016:	e004      	b.n	8002022 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800201c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	4798      	blx	r3
}
 8002022:	bf00      	nop
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b084      	sub	sp, #16
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002036:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f7ff fd57 	bl	8001aec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800203e:	bf00      	nop
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b084      	sub	sp, #16
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002052:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2240      	movs	r2, #64	@ 0x40
 8002058:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205e:	f043 0204 	orr.w	r2, r3, #4
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f7ff fd4a 	bl	8001b00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800206c:	bf00      	nop
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002084:	4b0c      	ldr	r3, [pc, #48]	@ (80020b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002090:	4013      	ands	r3, r2
 8002092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800209c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020a6:	4a04      	ldr	r2, [pc, #16]	@ (80020b8 <__NVIC_SetPriorityGrouping+0x44>)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	60d3      	str	r3, [r2, #12]
}
 80020ac:	bf00      	nop
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020c0:	4b04      	ldr	r3, [pc, #16]	@ (80020d4 <__NVIC_GetPriorityGrouping+0x18>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	0a1b      	lsrs	r3, r3, #8
 80020c6:	f003 0307 	and.w	r3, r3, #7
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	db0b      	blt.n	8002102 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	f003 021f 	and.w	r2, r3, #31
 80020f0:	4907      	ldr	r1, [pc, #28]	@ (8002110 <__NVIC_EnableIRQ+0x38>)
 80020f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f6:	095b      	lsrs	r3, r3, #5
 80020f8:	2001      	movs	r0, #1
 80020fa:	fa00 f202 	lsl.w	r2, r0, r2
 80020fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	e000e100 	.word	0xe000e100

08002114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	6039      	str	r1, [r7, #0]
 800211e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002124:	2b00      	cmp	r3, #0
 8002126:	db0a      	blt.n	800213e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	b2da      	uxtb	r2, r3
 800212c:	490c      	ldr	r1, [pc, #48]	@ (8002160 <__NVIC_SetPriority+0x4c>)
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	0112      	lsls	r2, r2, #4
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	440b      	add	r3, r1
 8002138:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800213c:	e00a      	b.n	8002154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	b2da      	uxtb	r2, r3
 8002142:	4908      	ldr	r1, [pc, #32]	@ (8002164 <__NVIC_SetPriority+0x50>)
 8002144:	79fb      	ldrb	r3, [r7, #7]
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	3b04      	subs	r3, #4
 800214c:	0112      	lsls	r2, r2, #4
 800214e:	b2d2      	uxtb	r2, r2
 8002150:	440b      	add	r3, r1
 8002152:	761a      	strb	r2, [r3, #24]
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	e000e100 	.word	0xe000e100
 8002164:	e000ed00 	.word	0xe000ed00

08002168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002168:	b480      	push	{r7}
 800216a:	b089      	sub	sp, #36	@ 0x24
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	f1c3 0307 	rsb	r3, r3, #7
 8002182:	2b04      	cmp	r3, #4
 8002184:	bf28      	it	cs
 8002186:	2304      	movcs	r3, #4
 8002188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3304      	adds	r3, #4
 800218e:	2b06      	cmp	r3, #6
 8002190:	d902      	bls.n	8002198 <NVIC_EncodePriority+0x30>
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	3b03      	subs	r3, #3
 8002196:	e000      	b.n	800219a <NVIC_EncodePriority+0x32>
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800219c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43da      	mvns	r2, r3
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	401a      	ands	r2, r3
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ba:	43d9      	mvns	r1, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c0:	4313      	orrs	r3, r2
         );
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3724      	adds	r7, #36	@ 0x24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
	...

080021d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3b01      	subs	r3, #1
 80021dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021e0:	d301      	bcc.n	80021e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021e2:	2301      	movs	r3, #1
 80021e4:	e00f      	b.n	8002206 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002210 <SysTick_Config+0x40>)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ee:	210f      	movs	r1, #15
 80021f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80021f4:	f7ff ff8e 	bl	8002114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f8:	4b05      	ldr	r3, [pc, #20]	@ (8002210 <SysTick_Config+0x40>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021fe:	4b04      	ldr	r3, [pc, #16]	@ (8002210 <SysTick_Config+0x40>)
 8002200:	2207      	movs	r2, #7
 8002202:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	e000e010 	.word	0xe000e010

08002214 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f7ff ff29 	bl	8002074 <__NVIC_SetPriorityGrouping>
}
 8002222:	bf00      	nop
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800222a:	b580      	push	{r7, lr}
 800222c:	b086      	sub	sp, #24
 800222e:	af00      	add	r7, sp, #0
 8002230:	4603      	mov	r3, r0
 8002232:	60b9      	str	r1, [r7, #8]
 8002234:	607a      	str	r2, [r7, #4]
 8002236:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800223c:	f7ff ff3e 	bl	80020bc <__NVIC_GetPriorityGrouping>
 8002240:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	68b9      	ldr	r1, [r7, #8]
 8002246:	6978      	ldr	r0, [r7, #20]
 8002248:	f7ff ff8e 	bl	8002168 <NVIC_EncodePriority>
 800224c:	4602      	mov	r2, r0
 800224e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002252:	4611      	mov	r1, r2
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff ff5d 	bl	8002114 <__NVIC_SetPriority>
}
 800225a:	bf00      	nop
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b082      	sub	sp, #8
 8002266:	af00      	add	r7, sp, #0
 8002268:	4603      	mov	r3, r0
 800226a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800226c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ff31 	bl	80020d8 <__NVIC_EnableIRQ>
}
 8002276:	bf00      	nop
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b082      	sub	sp, #8
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7ff ffa2 	bl	80021d0 <SysTick_Config>
 800228c:	4603      	mov	r3, r0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022a4:	f7ff fab8 	bl	8001818 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e099      	b.n	80023e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2202      	movs	r2, #2
 80022b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0201 	bic.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022d4:	e00f      	b.n	80022f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022d6:	f7ff fa9f 	bl	8001818 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b05      	cmp	r3, #5
 80022e2:	d908      	bls.n	80022f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2220      	movs	r2, #32
 80022e8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2203      	movs	r2, #3
 80022ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e078      	b.n	80023e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1e8      	bne.n	80022d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	4b38      	ldr	r3, [pc, #224]	@ (80023f0 <HAL_DMA_Init+0x158>)
 8002310:	4013      	ands	r3, r2
 8002312:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002322:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800232e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800233a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	4313      	orrs	r3, r2
 8002346:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234c:	2b04      	cmp	r3, #4
 800234e:	d107      	bne.n	8002360 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002358:	4313      	orrs	r3, r2
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	4313      	orrs	r3, r2
 800235e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	f023 0307 	bic.w	r3, r3, #7
 8002376:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	4313      	orrs	r3, r2
 8002380:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002386:	2b04      	cmp	r3, #4
 8002388:	d117      	bne.n	80023ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	4313      	orrs	r3, r2
 8002392:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00e      	beq.n	80023ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 fa6f 	bl	8002880 <DMA_CheckFifoParam>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d008      	beq.n	80023ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2240      	movs	r2, #64	@ 0x40
 80023ac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80023b6:	2301      	movs	r3, #1
 80023b8:	e016      	b.n	80023e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 fa26 	bl	8002814 <DMA_CalcBaseAndBitshift>
 80023c8:	4603      	mov	r3, r0
 80023ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d0:	223f      	movs	r2, #63	@ 0x3f
 80023d2:	409a      	lsls	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	f010803f 	.word	0xf010803f

080023f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
 8002400:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800240a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002412:	2b01      	cmp	r3, #1
 8002414:	d101      	bne.n	800241a <HAL_DMA_Start_IT+0x26>
 8002416:	2302      	movs	r3, #2
 8002418:	e040      	b.n	800249c <HAL_DMA_Start_IT+0xa8>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b01      	cmp	r3, #1
 800242c:	d12f      	bne.n	800248e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2202      	movs	r2, #2
 8002432:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	68b9      	ldr	r1, [r7, #8]
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 f9b8 	bl	80027b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800244c:	223f      	movs	r2, #63	@ 0x3f
 800244e:	409a      	lsls	r2, r3
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0216 	orr.w	r2, r2, #22
 8002462:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002468:	2b00      	cmp	r3, #0
 800246a:	d007      	beq.n	800247c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0208 	orr.w	r2, r2, #8
 800247a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0201 	orr.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	e005      	b.n	800249a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002496:	2302      	movs	r3, #2
 8002498:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800249a:	7dfb      	ldrb	r3, [r7, #23]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024b0:	4b8e      	ldr	r3, [pc, #568]	@ (80026ec <HAL_DMA_IRQHandler+0x248>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a8e      	ldr	r2, [pc, #568]	@ (80026f0 <HAL_DMA_IRQHandler+0x24c>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	0a9b      	lsrs	r3, r3, #10
 80024bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ce:	2208      	movs	r2, #8
 80024d0:	409a      	lsls	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	4013      	ands	r3, r2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d01a      	beq.n	8002510 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d013      	beq.n	8002510 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0204 	bic.w	r2, r2, #4
 80024f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024fc:	2208      	movs	r2, #8
 80024fe:	409a      	lsls	r2, r3
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002508:	f043 0201 	orr.w	r2, r3, #1
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002514:	2201      	movs	r2, #1
 8002516:	409a      	lsls	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4013      	ands	r3, r2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d012      	beq.n	8002546 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00b      	beq.n	8002546 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002532:	2201      	movs	r2, #1
 8002534:	409a      	lsls	r2, r3
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800253e:	f043 0202 	orr.w	r2, r3, #2
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800254a:	2204      	movs	r2, #4
 800254c:	409a      	lsls	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	4013      	ands	r3, r2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d012      	beq.n	800257c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00b      	beq.n	800257c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002568:	2204      	movs	r2, #4
 800256a:	409a      	lsls	r2, r3
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002574:	f043 0204 	orr.w	r2, r3, #4
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002580:	2210      	movs	r2, #16
 8002582:	409a      	lsls	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4013      	ands	r3, r2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d043      	beq.n	8002614 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d03c      	beq.n	8002614 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800259e:	2210      	movs	r2, #16
 80025a0:	409a      	lsls	r2, r3
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d018      	beq.n	80025e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d108      	bne.n	80025d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d024      	beq.n	8002614 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	4798      	blx	r3
 80025d2:	e01f      	b.n	8002614 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d01b      	beq.n	8002614 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	4798      	blx	r3
 80025e4:	e016      	b.n	8002614 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d107      	bne.n	8002604 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0208 	bic.w	r2, r2, #8
 8002602:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002618:	2220      	movs	r2, #32
 800261a:	409a      	lsls	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4013      	ands	r3, r2
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 808f 	beq.w	8002744 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0310 	and.w	r3, r3, #16
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 8087 	beq.w	8002744 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800263a:	2220      	movs	r2, #32
 800263c:	409a      	lsls	r2, r3
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b05      	cmp	r3, #5
 800264c:	d136      	bne.n	80026bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0216 	bic.w	r2, r2, #22
 800265c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	695a      	ldr	r2, [r3, #20]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800266c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	2b00      	cmp	r3, #0
 8002674:	d103      	bne.n	800267e <HAL_DMA_IRQHandler+0x1da>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800267a:	2b00      	cmp	r3, #0
 800267c:	d007      	beq.n	800268e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 0208 	bic.w	r2, r2, #8
 800268c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002692:	223f      	movs	r2, #63	@ 0x3f
 8002694:	409a      	lsls	r2, r3
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d07e      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	4798      	blx	r3
        }
        return;
 80026ba:	e079      	b.n	80027b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d01d      	beq.n	8002706 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10d      	bne.n	80026f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d031      	beq.n	8002744 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	4798      	blx	r3
 80026e8:	e02c      	b.n	8002744 <HAL_DMA_IRQHandler+0x2a0>
 80026ea:	bf00      	nop
 80026ec:	20000004 	.word	0x20000004
 80026f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d023      	beq.n	8002744 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	4798      	blx	r3
 8002704:	e01e      	b.n	8002744 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10f      	bne.n	8002734 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0210 	bic.w	r2, r2, #16
 8002722:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002748:	2b00      	cmp	r3, #0
 800274a:	d032      	beq.n	80027b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b00      	cmp	r3, #0
 8002756:	d022      	beq.n	800279e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2205      	movs	r2, #5
 800275c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0201 	bic.w	r2, r2, #1
 800276e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	3301      	adds	r3, #1
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	429a      	cmp	r2, r3
 800277a:	d307      	bcc.n	800278c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f2      	bne.n	8002770 <HAL_DMA_IRQHandler+0x2cc>
 800278a:	e000      	b.n	800278e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800278c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d005      	beq.n	80027b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	4798      	blx	r3
 80027ae:	e000      	b.n	80027b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80027b0:	bf00      	nop
    }
  }
}
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
 80027c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80027d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	2b40      	cmp	r3, #64	@ 0x40
 80027e4:	d108      	bne.n	80027f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027f6:	e007      	b.n	8002808 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	60da      	str	r2, [r3, #12]
}
 8002808:	bf00      	nop
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	b2db      	uxtb	r3, r3
 8002822:	3b10      	subs	r3, #16
 8002824:	4a14      	ldr	r2, [pc, #80]	@ (8002878 <DMA_CalcBaseAndBitshift+0x64>)
 8002826:	fba2 2303 	umull	r2, r3, r2, r3
 800282a:	091b      	lsrs	r3, r3, #4
 800282c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800282e:	4a13      	ldr	r2, [pc, #76]	@ (800287c <DMA_CalcBaseAndBitshift+0x68>)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4413      	add	r3, r2
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2b03      	cmp	r3, #3
 8002840:	d909      	bls.n	8002856 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800284a:	f023 0303 	bic.w	r3, r3, #3
 800284e:	1d1a      	adds	r2, r3, #4
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	659a      	str	r2, [r3, #88]	@ 0x58
 8002854:	e007      	b.n	8002866 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800285e:	f023 0303 	bic.w	r3, r3, #3
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800286a:	4618      	mov	r0, r3
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	aaaaaaab 	.word	0xaaaaaaab
 800287c:	08005098 	.word	0x08005098

08002880 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002888:	2300      	movs	r3, #0
 800288a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002890:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d11f      	bne.n	80028da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2b03      	cmp	r3, #3
 800289e:	d856      	bhi.n	800294e <DMA_CheckFifoParam+0xce>
 80028a0:	a201      	add	r2, pc, #4	@ (adr r2, 80028a8 <DMA_CheckFifoParam+0x28>)
 80028a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a6:	bf00      	nop
 80028a8:	080028b9 	.word	0x080028b9
 80028ac:	080028cb 	.word	0x080028cb
 80028b0:	080028b9 	.word	0x080028b9
 80028b4:	0800294f 	.word	0x0800294f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d046      	beq.n	8002952 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028c8:	e043      	b.n	8002952 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80028d2:	d140      	bne.n	8002956 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028d8:	e03d      	b.n	8002956 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028e2:	d121      	bne.n	8002928 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	d837      	bhi.n	800295a <DMA_CheckFifoParam+0xda>
 80028ea:	a201      	add	r2, pc, #4	@ (adr r2, 80028f0 <DMA_CheckFifoParam+0x70>)
 80028ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f0:	08002901 	.word	0x08002901
 80028f4:	08002907 	.word	0x08002907
 80028f8:	08002901 	.word	0x08002901
 80028fc:	08002919 	.word	0x08002919
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
      break;
 8002904:	e030      	b.n	8002968 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800290a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d025      	beq.n	800295e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002916:	e022      	b.n	800295e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002920:	d11f      	bne.n	8002962 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002926:	e01c      	b.n	8002962 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2b02      	cmp	r3, #2
 800292c:	d903      	bls.n	8002936 <DMA_CheckFifoParam+0xb6>
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	2b03      	cmp	r3, #3
 8002932:	d003      	beq.n	800293c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002934:	e018      	b.n	8002968 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	73fb      	strb	r3, [r7, #15]
      break;
 800293a:	e015      	b.n	8002968 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002940:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00e      	beq.n	8002966 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	73fb      	strb	r3, [r7, #15]
      break;
 800294c:	e00b      	b.n	8002966 <DMA_CheckFifoParam+0xe6>
      break;
 800294e:	bf00      	nop
 8002950:	e00a      	b.n	8002968 <DMA_CheckFifoParam+0xe8>
      break;
 8002952:	bf00      	nop
 8002954:	e008      	b.n	8002968 <DMA_CheckFifoParam+0xe8>
      break;
 8002956:	bf00      	nop
 8002958:	e006      	b.n	8002968 <DMA_CheckFifoParam+0xe8>
      break;
 800295a:	bf00      	nop
 800295c:	e004      	b.n	8002968 <DMA_CheckFifoParam+0xe8>
      break;
 800295e:	bf00      	nop
 8002960:	e002      	b.n	8002968 <DMA_CheckFifoParam+0xe8>
      break;   
 8002962:	bf00      	nop
 8002964:	e000      	b.n	8002968 <DMA_CheckFifoParam+0xe8>
      break;
 8002966:	bf00      	nop
    }
  } 
  
  return status; 
 8002968:	7bfb      	ldrb	r3, [r7, #15]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop

08002978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002978:	b480      	push	{r7}
 800297a:	b089      	sub	sp, #36	@ 0x24
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002986:	2300      	movs	r3, #0
 8002988:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800298a:	2300      	movs	r3, #0
 800298c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
 8002992:	e165      	b.n	8002c60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002994:	2201      	movs	r2, #1
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	4013      	ands	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	f040 8154 	bne.w	8002c5a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d005      	beq.n	80029ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d130      	bne.n	8002a2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	2203      	movs	r2, #3
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4013      	ands	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a00:	2201      	movs	r2, #1
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	091b      	lsrs	r3, r3, #4
 8002a16:	f003 0201 	and.w	r2, r3, #1
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 0303 	and.w	r3, r3, #3
 8002a34:	2b03      	cmp	r3, #3
 8002a36:	d017      	beq.n	8002a68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	2203      	movs	r2, #3
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f003 0303 	and.w	r3, r3, #3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d123      	bne.n	8002abc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	08da      	lsrs	r2, r3, #3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3208      	adds	r2, #8
 8002a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	220f      	movs	r2, #15
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4013      	ands	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	691a      	ldr	r2, [r3, #16]
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	08da      	lsrs	r2, r3, #3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3208      	adds	r2, #8
 8002ab6:	69b9      	ldr	r1, [r7, #24]
 8002ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	2203      	movs	r2, #3
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 0203 	and.w	r2, r3, #3
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 80ae 	beq.w	8002c5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	4b5d      	ldr	r3, [pc, #372]	@ (8002c78 <HAL_GPIO_Init+0x300>)
 8002b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b06:	4a5c      	ldr	r2, [pc, #368]	@ (8002c78 <HAL_GPIO_Init+0x300>)
 8002b08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b0e:	4b5a      	ldr	r3, [pc, #360]	@ (8002c78 <HAL_GPIO_Init+0x300>)
 8002b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b1a:	4a58      	ldr	r2, [pc, #352]	@ (8002c7c <HAL_GPIO_Init+0x304>)
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	089b      	lsrs	r3, r3, #2
 8002b20:	3302      	adds	r3, #2
 8002b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	220f      	movs	r2, #15
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	43db      	mvns	r3, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a4f      	ldr	r2, [pc, #316]	@ (8002c80 <HAL_GPIO_Init+0x308>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d025      	beq.n	8002b92 <HAL_GPIO_Init+0x21a>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a4e      	ldr	r2, [pc, #312]	@ (8002c84 <HAL_GPIO_Init+0x30c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d01f      	beq.n	8002b8e <HAL_GPIO_Init+0x216>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a4d      	ldr	r2, [pc, #308]	@ (8002c88 <HAL_GPIO_Init+0x310>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d019      	beq.n	8002b8a <HAL_GPIO_Init+0x212>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a4c      	ldr	r2, [pc, #304]	@ (8002c8c <HAL_GPIO_Init+0x314>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d013      	beq.n	8002b86 <HAL_GPIO_Init+0x20e>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a4b      	ldr	r2, [pc, #300]	@ (8002c90 <HAL_GPIO_Init+0x318>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d00d      	beq.n	8002b82 <HAL_GPIO_Init+0x20a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a4a      	ldr	r2, [pc, #296]	@ (8002c94 <HAL_GPIO_Init+0x31c>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d007      	beq.n	8002b7e <HAL_GPIO_Init+0x206>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a49      	ldr	r2, [pc, #292]	@ (8002c98 <HAL_GPIO_Init+0x320>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d101      	bne.n	8002b7a <HAL_GPIO_Init+0x202>
 8002b76:	2306      	movs	r3, #6
 8002b78:	e00c      	b.n	8002b94 <HAL_GPIO_Init+0x21c>
 8002b7a:	2307      	movs	r3, #7
 8002b7c:	e00a      	b.n	8002b94 <HAL_GPIO_Init+0x21c>
 8002b7e:	2305      	movs	r3, #5
 8002b80:	e008      	b.n	8002b94 <HAL_GPIO_Init+0x21c>
 8002b82:	2304      	movs	r3, #4
 8002b84:	e006      	b.n	8002b94 <HAL_GPIO_Init+0x21c>
 8002b86:	2303      	movs	r3, #3
 8002b88:	e004      	b.n	8002b94 <HAL_GPIO_Init+0x21c>
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e002      	b.n	8002b94 <HAL_GPIO_Init+0x21c>
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <HAL_GPIO_Init+0x21c>
 8002b92:	2300      	movs	r3, #0
 8002b94:	69fa      	ldr	r2, [r7, #28]
 8002b96:	f002 0203 	and.w	r2, r2, #3
 8002b9a:	0092      	lsls	r2, r2, #2
 8002b9c:	4093      	lsls	r3, r2
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ba4:	4935      	ldr	r1, [pc, #212]	@ (8002c7c <HAL_GPIO_Init+0x304>)
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	089b      	lsrs	r3, r3, #2
 8002baa:	3302      	adds	r3, #2
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bb2:	4b3a      	ldr	r3, [pc, #232]	@ (8002c9c <HAL_GPIO_Init+0x324>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bd6:	4a31      	ldr	r2, [pc, #196]	@ (8002c9c <HAL_GPIO_Init+0x324>)
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bdc:	4b2f      	ldr	r3, [pc, #188]	@ (8002c9c <HAL_GPIO_Init+0x324>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	43db      	mvns	r3, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4013      	ands	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c00:	4a26      	ldr	r2, [pc, #152]	@ (8002c9c <HAL_GPIO_Init+0x324>)
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c06:	4b25      	ldr	r3, [pc, #148]	@ (8002c9c <HAL_GPIO_Init+0x324>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4013      	ands	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c2a:	4a1c      	ldr	r2, [pc, #112]	@ (8002c9c <HAL_GPIO_Init+0x324>)
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c30:	4b1a      	ldr	r3, [pc, #104]	@ (8002c9c <HAL_GPIO_Init+0x324>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d003      	beq.n	8002c54 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c54:	4a11      	ldr	r2, [pc, #68]	@ (8002c9c <HAL_GPIO_Init+0x324>)
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	61fb      	str	r3, [r7, #28]
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	2b0f      	cmp	r3, #15
 8002c64:	f67f ae96 	bls.w	8002994 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c68:	bf00      	nop
 8002c6a:	bf00      	nop
 8002c6c:	3724      	adds	r7, #36	@ 0x24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	40013800 	.word	0x40013800
 8002c80:	40020000 	.word	0x40020000
 8002c84:	40020400 	.word	0x40020400
 8002c88:	40020800 	.word	0x40020800
 8002c8c:	40020c00 	.word	0x40020c00
 8002c90:	40021000 	.word	0x40021000
 8002c94:	40021400 	.word	0x40021400
 8002c98:	40021800 	.word	0x40021800
 8002c9c:	40013c00 	.word	0x40013c00

08002ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	807b      	strh	r3, [r7, #2]
 8002cac:	4613      	mov	r3, r2
 8002cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cb0:	787b      	ldrb	r3, [r7, #1]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cb6:	887a      	ldrh	r2, [r7, #2]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cbc:	e003      	b.n	8002cc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cbe:	887b      	ldrh	r3, [r7, #2]
 8002cc0:	041a      	lsls	r2, r3, #16
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	619a      	str	r2, [r3, #24]
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
	...

08002cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e0cc      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce8:	4b68      	ldr	r3, [pc, #416]	@ (8002e8c <HAL_RCC_ClockConfig+0x1b8>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 030f 	and.w	r3, r3, #15
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d90c      	bls.n	8002d10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf6:	4b65      	ldr	r3, [pc, #404]	@ (8002e8c <HAL_RCC_ClockConfig+0x1b8>)
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfe:	4b63      	ldr	r3, [pc, #396]	@ (8002e8c <HAL_RCC_ClockConfig+0x1b8>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d001      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e0b8      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d020      	beq.n	8002d5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d005      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d28:	4b59      	ldr	r3, [pc, #356]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	4a58      	ldr	r2, [pc, #352]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0308 	and.w	r3, r3, #8
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d40:	4b53      	ldr	r3, [pc, #332]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	4a52      	ldr	r2, [pc, #328]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d4c:	4b50      	ldr	r3, [pc, #320]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	494d      	ldr	r1, [pc, #308]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d044      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d107      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d72:	4b47      	ldr	r3, [pc, #284]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d119      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e07f      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d003      	beq.n	8002d92 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d107      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d92:	4b3f      	ldr	r3, [pc, #252]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d109      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e06f      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da2:	4b3b      	ldr	r3, [pc, #236]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e067      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002db2:	4b37      	ldr	r3, [pc, #220]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f023 0203 	bic.w	r2, r3, #3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	4934      	ldr	r1, [pc, #208]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dc4:	f7fe fd28 	bl	8001818 <HAL_GetTick>
 8002dc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dca:	e00a      	b.n	8002de2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dcc:	f7fe fd24 	bl	8001818 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e04f      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de2:	4b2b      	ldr	r3, [pc, #172]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 020c 	and.w	r2, r3, #12
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d1eb      	bne.n	8002dcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002df4:	4b25      	ldr	r3, [pc, #148]	@ (8002e8c <HAL_RCC_ClockConfig+0x1b8>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 030f 	and.w	r3, r3, #15
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d20c      	bcs.n	8002e1c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e02:	4b22      	ldr	r3, [pc, #136]	@ (8002e8c <HAL_RCC_ClockConfig+0x1b8>)
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0a:	4b20      	ldr	r3, [pc, #128]	@ (8002e8c <HAL_RCC_ClockConfig+0x1b8>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d001      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e032      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d008      	beq.n	8002e3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e28:	4b19      	ldr	r3, [pc, #100]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	4916      	ldr	r1, [pc, #88]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d009      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e46:	4b12      	ldr	r3, [pc, #72]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	490e      	ldr	r1, [pc, #56]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e5a:	f000 f855 	bl	8002f08 <HAL_RCC_GetSysClockFreq>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	4b0b      	ldr	r3, [pc, #44]	@ (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	091b      	lsrs	r3, r3, #4
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	490a      	ldr	r1, [pc, #40]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c0>)
 8002e6c:	5ccb      	ldrb	r3, [r1, r3]
 8002e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e72:	4a09      	ldr	r2, [pc, #36]	@ (8002e98 <HAL_RCC_ClockConfig+0x1c4>)
 8002e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e76:	4b09      	ldr	r3, [pc, #36]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fe fc88 	bl	8001790 <HAL_InitTick>

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40023c00 	.word	0x40023c00
 8002e90:	40023800 	.word	0x40023800
 8002e94:	08005080 	.word	0x08005080
 8002e98:	20000004 	.word	0x20000004
 8002e9c:	20000008 	.word	0x20000008

08002ea0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ea4:	4b03      	ldr	r3, [pc, #12]	@ (8002eb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	20000004 	.word	0x20000004

08002eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ebc:	f7ff fff0 	bl	8002ea0 <HAL_RCC_GetHCLKFreq>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	4b05      	ldr	r3, [pc, #20]	@ (8002ed8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	0a9b      	lsrs	r3, r3, #10
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	4903      	ldr	r1, [pc, #12]	@ (8002edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ece:	5ccb      	ldrb	r3, [r1, r3]
 8002ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	08005090 	.word	0x08005090

08002ee0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ee4:	f7ff ffdc 	bl	8002ea0 <HAL_RCC_GetHCLKFreq>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	4b05      	ldr	r3, [pc, #20]	@ (8002f00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	0b5b      	lsrs	r3, r3, #13
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	4903      	ldr	r1, [pc, #12]	@ (8002f04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ef6:	5ccb      	ldrb	r3, [r1, r3]
 8002ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40023800 	.word	0x40023800
 8002f04:	08005090 	.word	0x08005090

08002f08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f0c:	b0a6      	sub	sp, #152	@ 0x98
 8002f0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f2e:	4bc8      	ldr	r3, [pc, #800]	@ (8003250 <HAL_RCC_GetSysClockFreq+0x348>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 030c 	and.w	r3, r3, #12
 8002f36:	2b0c      	cmp	r3, #12
 8002f38:	f200 817e 	bhi.w	8003238 <HAL_RCC_GetSysClockFreq+0x330>
 8002f3c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f44 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f42:	bf00      	nop
 8002f44:	08002f79 	.word	0x08002f79
 8002f48:	08003239 	.word	0x08003239
 8002f4c:	08003239 	.word	0x08003239
 8002f50:	08003239 	.word	0x08003239
 8002f54:	08002f81 	.word	0x08002f81
 8002f58:	08003239 	.word	0x08003239
 8002f5c:	08003239 	.word	0x08003239
 8002f60:	08003239 	.word	0x08003239
 8002f64:	08002f89 	.word	0x08002f89
 8002f68:	08003239 	.word	0x08003239
 8002f6c:	08003239 	.word	0x08003239
 8002f70:	08003239 	.word	0x08003239
 8002f74:	080030f3 	.word	0x080030f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f78:	4bb6      	ldr	r3, [pc, #728]	@ (8003254 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002f7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002f7e:	e15f      	b.n	8003240 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f80:	4bb5      	ldr	r3, [pc, #724]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x350>)
 8002f82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002f86:	e15b      	b.n	8003240 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f88:	4bb1      	ldr	r3, [pc, #708]	@ (8003250 <HAL_RCC_GetSysClockFreq+0x348>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f94:	4bae      	ldr	r3, [pc, #696]	@ (8003250 <HAL_RCC_GetSysClockFreq+0x348>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d031      	beq.n	8003004 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa0:	4bab      	ldr	r3, [pc, #684]	@ (8003250 <HAL_RCC_GetSysClockFreq+0x348>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	099b      	lsrs	r3, r3, #6
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002faa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002fac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fb2:	663b      	str	r3, [r7, #96]	@ 0x60
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	667b      	str	r3, [r7, #100]	@ 0x64
 8002fb8:	4ba7      	ldr	r3, [pc, #668]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x350>)
 8002fba:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002fbe:	462a      	mov	r2, r5
 8002fc0:	fb03 f202 	mul.w	r2, r3, r2
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	4621      	mov	r1, r4
 8002fc8:	fb01 f303 	mul.w	r3, r1, r3
 8002fcc:	4413      	add	r3, r2
 8002fce:	4aa2      	ldr	r2, [pc, #648]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x350>)
 8002fd0:	4621      	mov	r1, r4
 8002fd2:	fba1 1202 	umull	r1, r2, r1, r2
 8002fd6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002fd8:	460a      	mov	r2, r1
 8002fda:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002fdc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002fde:	4413      	add	r3, r2
 8002fe0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002fe2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002fea:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002fec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ff0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002ff4:	f7fd fd1c 	bl	8000a30 <__aeabi_uldivmod>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003002:	e064      	b.n	80030ce <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003004:	4b92      	ldr	r3, [pc, #584]	@ (8003250 <HAL_RCC_GetSysClockFreq+0x348>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	099b      	lsrs	r3, r3, #6
 800300a:	2200      	movs	r2, #0
 800300c:	653b      	str	r3, [r7, #80]	@ 0x50
 800300e:	657a      	str	r2, [r7, #84]	@ 0x54
 8003010:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003016:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003018:	2300      	movs	r3, #0
 800301a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800301c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003020:	4622      	mov	r2, r4
 8003022:	462b      	mov	r3, r5
 8003024:	f04f 0000 	mov.w	r0, #0
 8003028:	f04f 0100 	mov.w	r1, #0
 800302c:	0159      	lsls	r1, r3, #5
 800302e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003032:	0150      	lsls	r0, r2, #5
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	4621      	mov	r1, r4
 800303a:	1a51      	subs	r1, r2, r1
 800303c:	6139      	str	r1, [r7, #16]
 800303e:	4629      	mov	r1, r5
 8003040:	eb63 0301 	sbc.w	r3, r3, r1
 8003044:	617b      	str	r3, [r7, #20]
 8003046:	f04f 0200 	mov.w	r2, #0
 800304a:	f04f 0300 	mov.w	r3, #0
 800304e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003052:	4659      	mov	r1, fp
 8003054:	018b      	lsls	r3, r1, #6
 8003056:	4651      	mov	r1, sl
 8003058:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800305c:	4651      	mov	r1, sl
 800305e:	018a      	lsls	r2, r1, #6
 8003060:	4651      	mov	r1, sl
 8003062:	ebb2 0801 	subs.w	r8, r2, r1
 8003066:	4659      	mov	r1, fp
 8003068:	eb63 0901 	sbc.w	r9, r3, r1
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003078:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800307c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003080:	4690      	mov	r8, r2
 8003082:	4699      	mov	r9, r3
 8003084:	4623      	mov	r3, r4
 8003086:	eb18 0303 	adds.w	r3, r8, r3
 800308a:	60bb      	str	r3, [r7, #8]
 800308c:	462b      	mov	r3, r5
 800308e:	eb49 0303 	adc.w	r3, r9, r3
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	f04f 0300 	mov.w	r3, #0
 800309c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80030a0:	4629      	mov	r1, r5
 80030a2:	028b      	lsls	r3, r1, #10
 80030a4:	4621      	mov	r1, r4
 80030a6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030aa:	4621      	mov	r1, r4
 80030ac:	028a      	lsls	r2, r1, #10
 80030ae:	4610      	mov	r0, r2
 80030b0:	4619      	mov	r1, r3
 80030b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030b6:	2200      	movs	r2, #0
 80030b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80030ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80030bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80030c0:	f7fd fcb6 	bl	8000a30 <__aeabi_uldivmod>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4613      	mov	r3, r2
 80030ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80030ce:	4b60      	ldr	r3, [pc, #384]	@ (8003250 <HAL_RCC_GetSysClockFreq+0x348>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	0c1b      	lsrs	r3, r3, #16
 80030d4:	f003 0303 	and.w	r3, r3, #3
 80030d8:	3301      	adds	r3, #1
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80030e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80030e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80030e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80030f0:	e0a6      	b.n	8003240 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030f2:	4b57      	ldr	r3, [pc, #348]	@ (8003250 <HAL_RCC_GetSysClockFreq+0x348>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030fe:	4b54      	ldr	r3, [pc, #336]	@ (8003250 <HAL_RCC_GetSysClockFreq+0x348>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d02a      	beq.n	8003160 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800310a:	4b51      	ldr	r3, [pc, #324]	@ (8003250 <HAL_RCC_GetSysClockFreq+0x348>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	099b      	lsrs	r3, r3, #6
 8003110:	2200      	movs	r2, #0
 8003112:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003114:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003118:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800311c:	2100      	movs	r1, #0
 800311e:	4b4e      	ldr	r3, [pc, #312]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x350>)
 8003120:	fb03 f201 	mul.w	r2, r3, r1
 8003124:	2300      	movs	r3, #0
 8003126:	fb00 f303 	mul.w	r3, r0, r3
 800312a:	4413      	add	r3, r2
 800312c:	4a4a      	ldr	r2, [pc, #296]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x350>)
 800312e:	fba0 1202 	umull	r1, r2, r0, r2
 8003132:	677a      	str	r2, [r7, #116]	@ 0x74
 8003134:	460a      	mov	r2, r1
 8003136:	673a      	str	r2, [r7, #112]	@ 0x70
 8003138:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800313a:	4413      	add	r3, r2
 800313c:	677b      	str	r3, [r7, #116]	@ 0x74
 800313e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003142:	2200      	movs	r2, #0
 8003144:	633b      	str	r3, [r7, #48]	@ 0x30
 8003146:	637a      	str	r2, [r7, #52]	@ 0x34
 8003148:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800314c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003150:	f7fd fc6e 	bl	8000a30 <__aeabi_uldivmod>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	4613      	mov	r3, r2
 800315a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800315e:	e05b      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003160:	4b3b      	ldr	r3, [pc, #236]	@ (8003250 <HAL_RCC_GetSysClockFreq+0x348>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	099b      	lsrs	r3, r3, #6
 8003166:	2200      	movs	r2, #0
 8003168:	62bb      	str	r3, [r7, #40]	@ 0x28
 800316a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800316c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800316e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003172:	623b      	str	r3, [r7, #32]
 8003174:	2300      	movs	r3, #0
 8003176:	627b      	str	r3, [r7, #36]	@ 0x24
 8003178:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800317c:	4642      	mov	r2, r8
 800317e:	464b      	mov	r3, r9
 8003180:	f04f 0000 	mov.w	r0, #0
 8003184:	f04f 0100 	mov.w	r1, #0
 8003188:	0159      	lsls	r1, r3, #5
 800318a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800318e:	0150      	lsls	r0, r2, #5
 8003190:	4602      	mov	r2, r0
 8003192:	460b      	mov	r3, r1
 8003194:	4641      	mov	r1, r8
 8003196:	ebb2 0a01 	subs.w	sl, r2, r1
 800319a:	4649      	mov	r1, r9
 800319c:	eb63 0b01 	sbc.w	fp, r3, r1
 80031a0:	f04f 0200 	mov.w	r2, #0
 80031a4:	f04f 0300 	mov.w	r3, #0
 80031a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031b4:	ebb2 040a 	subs.w	r4, r2, sl
 80031b8:	eb63 050b 	sbc.w	r5, r3, fp
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	f04f 0300 	mov.w	r3, #0
 80031c4:	00eb      	lsls	r3, r5, #3
 80031c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031ca:	00e2      	lsls	r2, r4, #3
 80031cc:	4614      	mov	r4, r2
 80031ce:	461d      	mov	r5, r3
 80031d0:	4643      	mov	r3, r8
 80031d2:	18e3      	adds	r3, r4, r3
 80031d4:	603b      	str	r3, [r7, #0]
 80031d6:	464b      	mov	r3, r9
 80031d8:	eb45 0303 	adc.w	r3, r5, r3
 80031dc:	607b      	str	r3, [r7, #4]
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	f04f 0300 	mov.w	r3, #0
 80031e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031ea:	4629      	mov	r1, r5
 80031ec:	028b      	lsls	r3, r1, #10
 80031ee:	4621      	mov	r1, r4
 80031f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031f4:	4621      	mov	r1, r4
 80031f6:	028a      	lsls	r2, r1, #10
 80031f8:	4610      	mov	r0, r2
 80031fa:	4619      	mov	r1, r3
 80031fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003200:	2200      	movs	r2, #0
 8003202:	61bb      	str	r3, [r7, #24]
 8003204:	61fa      	str	r2, [r7, #28]
 8003206:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800320a:	f7fd fc11 	bl	8000a30 <__aeabi_uldivmod>
 800320e:	4602      	mov	r2, r0
 8003210:	460b      	mov	r3, r1
 8003212:	4613      	mov	r3, r2
 8003214:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003218:	4b0d      	ldr	r3, [pc, #52]	@ (8003250 <HAL_RCC_GetSysClockFreq+0x348>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	0f1b      	lsrs	r3, r3, #28
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8003226:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800322a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800322e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003232:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003236:	e003      	b.n	8003240 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003238:	4b06      	ldr	r3, [pc, #24]	@ (8003254 <HAL_RCC_GetSysClockFreq+0x34c>)
 800323a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800323e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003240:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003244:	4618      	mov	r0, r3
 8003246:	3798      	adds	r7, #152	@ 0x98
 8003248:	46bd      	mov	sp, r7
 800324a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800324e:	bf00      	nop
 8003250:	40023800 	.word	0x40023800
 8003254:	00f42400 	.word	0x00f42400
 8003258:	017d7840 	.word	0x017d7840

0800325c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e28d      	b.n	800378a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 8083 	beq.w	8003382 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800327c:	4b94      	ldr	r3, [pc, #592]	@ (80034d0 <HAL_RCC_OscConfig+0x274>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 030c 	and.w	r3, r3, #12
 8003284:	2b04      	cmp	r3, #4
 8003286:	d019      	beq.n	80032bc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003288:	4b91      	ldr	r3, [pc, #580]	@ (80034d0 <HAL_RCC_OscConfig+0x274>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 030c 	and.w	r3, r3, #12
        || \
 8003290:	2b08      	cmp	r3, #8
 8003292:	d106      	bne.n	80032a2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003294:	4b8e      	ldr	r3, [pc, #568]	@ (80034d0 <HAL_RCC_OscConfig+0x274>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800329c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032a0:	d00c      	beq.n	80032bc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032a2:	4b8b      	ldr	r3, [pc, #556]	@ (80034d0 <HAL_RCC_OscConfig+0x274>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80032aa:	2b0c      	cmp	r3, #12
 80032ac:	d112      	bne.n	80032d4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ae:	4b88      	ldr	r3, [pc, #544]	@ (80034d0 <HAL_RCC_OscConfig+0x274>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032ba:	d10b      	bne.n	80032d4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032bc:	4b84      	ldr	r3, [pc, #528]	@ (80034d0 <HAL_RCC_OscConfig+0x274>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d05b      	beq.n	8003380 <HAL_RCC_OscConfig+0x124>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d157      	bne.n	8003380 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e25a      	b.n	800378a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032dc:	d106      	bne.n	80032ec <HAL_RCC_OscConfig+0x90>
 80032de:	4b7c      	ldr	r3, [pc, #496]	@ (80034d0 <HAL_RCC_OscConfig+0x274>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a7b      	ldr	r2, [pc, #492]	@ (80034d0 <HAL_RCC_OscConfig+0x274>)
 80032e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	e01d      	b.n	8003328 <HAL_RCC_OscConfig+0xcc>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032f4:	d10c      	bne.n	8003310 <HAL_RCC_OscConfig+0xb4>
 80032f6:	4b76      	ldr	r3, [pc, #472]	@ (80034d0 <HAL_RCC_OscConfig+0x274>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a75      	ldr	r2, [pc, #468]	@ (80034d0 <HAL_RCC_OscConfig+0x274>)
 80032fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	4b73      	ldr	r3, [pc, #460]	@ (80034d0 <HAL_RCC_OscConfig+0x274>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a72      	ldr	r2, [pc, #456]	@ (80034d0 <HAL_RCC_OscConfig+0x274>)
 8003308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	e00b      	b.n	8003328 <HAL_RCC_OscConfig+0xcc>
 8003310:	4b6f      	ldr	r3, [pc, #444]	@ (80034d0 <HAL_RCC_OscConfig+0x274>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a6e      	ldr	r2, [pc, #440]	@ (80034d0 <HAL_RCC_OscConfig+0x274>)
 8003316:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800331a:	6013      	str	r3, [r2, #0]
 800331c:	4b6c      	ldr	r3, [pc, #432]	@ (80034d0 <HAL_RCC_OscConfig+0x274>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a6b      	ldr	r2, [pc, #428]	@ (80034d0 <HAL_RCC_OscConfig+0x274>)
 8003322:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d013      	beq.n	8003358 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003330:	f7fe fa72 	bl	8001818 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003338:	f7fe fa6e 	bl	8001818 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b64      	cmp	r3, #100	@ 0x64
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e21f      	b.n	800378a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800334a:	4b61      	ldr	r3, [pc, #388]	@ (80034d0 <HAL_RCC_OscConfig+0x274>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0f0      	beq.n	8003338 <HAL_RCC_OscConfig+0xdc>
 8003356:	e014      	b.n	8003382 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003358:	f7fe fa5e 	bl	8001818 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003360:	f7fe fa5a 	bl	8001818 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b64      	cmp	r3, #100	@ 0x64
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e20b      	b.n	800378a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003372:	4b57      	ldr	r3, [pc, #348]	@ (80034d0 <HAL_RCC_OscConfig+0x274>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f0      	bne.n	8003360 <HAL_RCC_OscConfig+0x104>
 800337e:	e000      	b.n	8003382 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d06f      	beq.n	800346e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800338e:	4b50      	ldr	r3, [pc, #320]	@ (80034d0 <HAL_RCC_OscConfig+0x274>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 030c 	and.w	r3, r3, #12
 8003396:	2b00      	cmp	r3, #0
 8003398:	d017      	beq.n	80033ca <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800339a:	4b4d      	ldr	r3, [pc, #308]	@ (80034d0 <HAL_RCC_OscConfig+0x274>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 030c 	and.w	r3, r3, #12
        || \
 80033a2:	2b08      	cmp	r3, #8
 80033a4:	d105      	bne.n	80033b2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80033a6:	4b4a      	ldr	r3, [pc, #296]	@ (80034d0 <HAL_RCC_OscConfig+0x274>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00b      	beq.n	80033ca <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033b2:	4b47      	ldr	r3, [pc, #284]	@ (80034d0 <HAL_RCC_OscConfig+0x274>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80033ba:	2b0c      	cmp	r3, #12
 80033bc:	d11c      	bne.n	80033f8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033be:	4b44      	ldr	r3, [pc, #272]	@ (80034d0 <HAL_RCC_OscConfig+0x274>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d116      	bne.n	80033f8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ca:	4b41      	ldr	r3, [pc, #260]	@ (80034d0 <HAL_RCC_OscConfig+0x274>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d005      	beq.n	80033e2 <HAL_RCC_OscConfig+0x186>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d001      	beq.n	80033e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e1d3      	b.n	800378a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e2:	4b3b      	ldr	r3, [pc, #236]	@ (80034d0 <HAL_RCC_OscConfig+0x274>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	4937      	ldr	r1, [pc, #220]	@ (80034d0 <HAL_RCC_OscConfig+0x274>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033f6:	e03a      	b.n	800346e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d020      	beq.n	8003442 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003400:	4b34      	ldr	r3, [pc, #208]	@ (80034d4 <HAL_RCC_OscConfig+0x278>)
 8003402:	2201      	movs	r2, #1
 8003404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003406:	f7fe fa07 	bl	8001818 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800340e:	f7fe fa03 	bl	8001818 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e1b4      	b.n	800378a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003420:	4b2b      	ldr	r3, [pc, #172]	@ (80034d0 <HAL_RCC_OscConfig+0x274>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0f0      	beq.n	800340e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800342c:	4b28      	ldr	r3, [pc, #160]	@ (80034d0 <HAL_RCC_OscConfig+0x274>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	4925      	ldr	r1, [pc, #148]	@ (80034d0 <HAL_RCC_OscConfig+0x274>)
 800343c:	4313      	orrs	r3, r2
 800343e:	600b      	str	r3, [r1, #0]
 8003440:	e015      	b.n	800346e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003442:	4b24      	ldr	r3, [pc, #144]	@ (80034d4 <HAL_RCC_OscConfig+0x278>)
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003448:	f7fe f9e6 	bl	8001818 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003450:	f7fe f9e2 	bl	8001818 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e193      	b.n	800378a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003462:	4b1b      	ldr	r3, [pc, #108]	@ (80034d0 <HAL_RCC_OscConfig+0x274>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f0      	bne.n	8003450 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b00      	cmp	r3, #0
 8003478:	d036      	beq.n	80034e8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d016      	beq.n	80034b0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003482:	4b15      	ldr	r3, [pc, #84]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 8003484:	2201      	movs	r2, #1
 8003486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003488:	f7fe f9c6 	bl	8001818 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003490:	f7fe f9c2 	bl	8001818 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e173      	b.n	800378a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034a2:	4b0b      	ldr	r3, [pc, #44]	@ (80034d0 <HAL_RCC_OscConfig+0x274>)
 80034a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0f0      	beq.n	8003490 <HAL_RCC_OscConfig+0x234>
 80034ae:	e01b      	b.n	80034e8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034b0:	4b09      	ldr	r3, [pc, #36]	@ (80034d8 <HAL_RCC_OscConfig+0x27c>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b6:	f7fe f9af 	bl	8001818 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034bc:	e00e      	b.n	80034dc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034be:	f7fe f9ab 	bl	8001818 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d907      	bls.n	80034dc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e15c      	b.n	800378a <HAL_RCC_OscConfig+0x52e>
 80034d0:	40023800 	.word	0x40023800
 80034d4:	42470000 	.word	0x42470000
 80034d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034dc:	4b8a      	ldr	r3, [pc, #552]	@ (8003708 <HAL_RCC_OscConfig+0x4ac>)
 80034de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1ea      	bne.n	80034be <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 8097 	beq.w	8003624 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034f6:	2300      	movs	r3, #0
 80034f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034fa:	4b83      	ldr	r3, [pc, #524]	@ (8003708 <HAL_RCC_OscConfig+0x4ac>)
 80034fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10f      	bne.n	8003526 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003506:	2300      	movs	r3, #0
 8003508:	60bb      	str	r3, [r7, #8]
 800350a:	4b7f      	ldr	r3, [pc, #508]	@ (8003708 <HAL_RCC_OscConfig+0x4ac>)
 800350c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350e:	4a7e      	ldr	r2, [pc, #504]	@ (8003708 <HAL_RCC_OscConfig+0x4ac>)
 8003510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003514:	6413      	str	r3, [r2, #64]	@ 0x40
 8003516:	4b7c      	ldr	r3, [pc, #496]	@ (8003708 <HAL_RCC_OscConfig+0x4ac>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800351e:	60bb      	str	r3, [r7, #8]
 8003520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003522:	2301      	movs	r3, #1
 8003524:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003526:	4b79      	ldr	r3, [pc, #484]	@ (800370c <HAL_RCC_OscConfig+0x4b0>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800352e:	2b00      	cmp	r3, #0
 8003530:	d118      	bne.n	8003564 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003532:	4b76      	ldr	r3, [pc, #472]	@ (800370c <HAL_RCC_OscConfig+0x4b0>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a75      	ldr	r2, [pc, #468]	@ (800370c <HAL_RCC_OscConfig+0x4b0>)
 8003538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800353c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800353e:	f7fe f96b 	bl	8001818 <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003546:	f7fe f967 	bl	8001818 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e118      	b.n	800378a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003558:	4b6c      	ldr	r3, [pc, #432]	@ (800370c <HAL_RCC_OscConfig+0x4b0>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0f0      	beq.n	8003546 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d106      	bne.n	800357a <HAL_RCC_OscConfig+0x31e>
 800356c:	4b66      	ldr	r3, [pc, #408]	@ (8003708 <HAL_RCC_OscConfig+0x4ac>)
 800356e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003570:	4a65      	ldr	r2, [pc, #404]	@ (8003708 <HAL_RCC_OscConfig+0x4ac>)
 8003572:	f043 0301 	orr.w	r3, r3, #1
 8003576:	6713      	str	r3, [r2, #112]	@ 0x70
 8003578:	e01c      	b.n	80035b4 <HAL_RCC_OscConfig+0x358>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	2b05      	cmp	r3, #5
 8003580:	d10c      	bne.n	800359c <HAL_RCC_OscConfig+0x340>
 8003582:	4b61      	ldr	r3, [pc, #388]	@ (8003708 <HAL_RCC_OscConfig+0x4ac>)
 8003584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003586:	4a60      	ldr	r2, [pc, #384]	@ (8003708 <HAL_RCC_OscConfig+0x4ac>)
 8003588:	f043 0304 	orr.w	r3, r3, #4
 800358c:	6713      	str	r3, [r2, #112]	@ 0x70
 800358e:	4b5e      	ldr	r3, [pc, #376]	@ (8003708 <HAL_RCC_OscConfig+0x4ac>)
 8003590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003592:	4a5d      	ldr	r2, [pc, #372]	@ (8003708 <HAL_RCC_OscConfig+0x4ac>)
 8003594:	f043 0301 	orr.w	r3, r3, #1
 8003598:	6713      	str	r3, [r2, #112]	@ 0x70
 800359a:	e00b      	b.n	80035b4 <HAL_RCC_OscConfig+0x358>
 800359c:	4b5a      	ldr	r3, [pc, #360]	@ (8003708 <HAL_RCC_OscConfig+0x4ac>)
 800359e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a0:	4a59      	ldr	r2, [pc, #356]	@ (8003708 <HAL_RCC_OscConfig+0x4ac>)
 80035a2:	f023 0301 	bic.w	r3, r3, #1
 80035a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80035a8:	4b57      	ldr	r3, [pc, #348]	@ (8003708 <HAL_RCC_OscConfig+0x4ac>)
 80035aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ac:	4a56      	ldr	r2, [pc, #344]	@ (8003708 <HAL_RCC_OscConfig+0x4ac>)
 80035ae:	f023 0304 	bic.w	r3, r3, #4
 80035b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d015      	beq.n	80035e8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035bc:	f7fe f92c 	bl	8001818 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c2:	e00a      	b.n	80035da <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035c4:	f7fe f928 	bl	8001818 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e0d7      	b.n	800378a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035da:	4b4b      	ldr	r3, [pc, #300]	@ (8003708 <HAL_RCC_OscConfig+0x4ac>)
 80035dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0ee      	beq.n	80035c4 <HAL_RCC_OscConfig+0x368>
 80035e6:	e014      	b.n	8003612 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e8:	f7fe f916 	bl	8001818 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ee:	e00a      	b.n	8003606 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035f0:	f7fe f912 	bl	8001818 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035fe:	4293      	cmp	r3, r2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e0c1      	b.n	800378a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003606:	4b40      	ldr	r3, [pc, #256]	@ (8003708 <HAL_RCC_OscConfig+0x4ac>)
 8003608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1ee      	bne.n	80035f0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003612:	7dfb      	ldrb	r3, [r7, #23]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d105      	bne.n	8003624 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003618:	4b3b      	ldr	r3, [pc, #236]	@ (8003708 <HAL_RCC_OscConfig+0x4ac>)
 800361a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361c:	4a3a      	ldr	r2, [pc, #232]	@ (8003708 <HAL_RCC_OscConfig+0x4ac>)
 800361e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003622:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 80ad 	beq.w	8003788 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800362e:	4b36      	ldr	r3, [pc, #216]	@ (8003708 <HAL_RCC_OscConfig+0x4ac>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 030c 	and.w	r3, r3, #12
 8003636:	2b08      	cmp	r3, #8
 8003638:	d060      	beq.n	80036fc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	2b02      	cmp	r3, #2
 8003640:	d145      	bne.n	80036ce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003642:	4b33      	ldr	r3, [pc, #204]	@ (8003710 <HAL_RCC_OscConfig+0x4b4>)
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003648:	f7fe f8e6 	bl	8001818 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003650:	f7fe f8e2 	bl	8001818 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e093      	b.n	800378a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003662:	4b29      	ldr	r3, [pc, #164]	@ (8003708 <HAL_RCC_OscConfig+0x4ac>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f0      	bne.n	8003650 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69da      	ldr	r2, [r3, #28]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367c:	019b      	lsls	r3, r3, #6
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003684:	085b      	lsrs	r3, r3, #1
 8003686:	3b01      	subs	r3, #1
 8003688:	041b      	lsls	r3, r3, #16
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003690:	061b      	lsls	r3, r3, #24
 8003692:	431a      	orrs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003698:	071b      	lsls	r3, r3, #28
 800369a:	491b      	ldr	r1, [pc, #108]	@ (8003708 <HAL_RCC_OscConfig+0x4ac>)
 800369c:	4313      	orrs	r3, r2
 800369e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003710 <HAL_RCC_OscConfig+0x4b4>)
 80036a2:	2201      	movs	r2, #1
 80036a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a6:	f7fe f8b7 	bl	8001818 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ae:	f7fe f8b3 	bl	8001818 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e064      	b.n	800378a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c0:	4b11      	ldr	r3, [pc, #68]	@ (8003708 <HAL_RCC_OscConfig+0x4ac>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0f0      	beq.n	80036ae <HAL_RCC_OscConfig+0x452>
 80036cc:	e05c      	b.n	8003788 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ce:	4b10      	ldr	r3, [pc, #64]	@ (8003710 <HAL_RCC_OscConfig+0x4b4>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d4:	f7fe f8a0 	bl	8001818 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036dc:	f7fe f89c 	bl	8001818 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e04d      	b.n	800378a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ee:	4b06      	ldr	r3, [pc, #24]	@ (8003708 <HAL_RCC_OscConfig+0x4ac>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1f0      	bne.n	80036dc <HAL_RCC_OscConfig+0x480>
 80036fa:	e045      	b.n	8003788 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d107      	bne.n	8003714 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e040      	b.n	800378a <HAL_RCC_OscConfig+0x52e>
 8003708:	40023800 	.word	0x40023800
 800370c:	40007000 	.word	0x40007000
 8003710:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003714:	4b1f      	ldr	r3, [pc, #124]	@ (8003794 <HAL_RCC_OscConfig+0x538>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d030      	beq.n	8003784 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800372c:	429a      	cmp	r2, r3
 800372e:	d129      	bne.n	8003784 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800373a:	429a      	cmp	r2, r3
 800373c:	d122      	bne.n	8003784 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003744:	4013      	ands	r3, r2
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800374a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800374c:	4293      	cmp	r3, r2
 800374e:	d119      	bne.n	8003784 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800375a:	085b      	lsrs	r3, r3, #1
 800375c:	3b01      	subs	r3, #1
 800375e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003760:	429a      	cmp	r2, r3
 8003762:	d10f      	bne.n	8003784 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003770:	429a      	cmp	r2, r3
 8003772:	d107      	bne.n	8003784 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003780:	429a      	cmp	r2, r3
 8003782:	d001      	beq.n	8003788 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e000      	b.n	800378a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3718      	adds	r7, #24
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	40023800 	.word	0x40023800

08003798 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e041      	b.n	800382e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d106      	bne.n	80037c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7fd fe88 	bl	80014d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2202      	movs	r2, #2
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3304      	adds	r3, #4
 80037d4:	4619      	mov	r1, r3
 80037d6:	4610      	mov	r0, r2
 80037d8:	f000 fc62 	bl	80040a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
	...

08003838 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b01      	cmp	r3, #1
 800384a:	d001      	beq.n	8003850 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e04e      	b.n	80038ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68da      	ldr	r2, [r3, #12]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0201 	orr.w	r2, r2, #1
 8003866:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a23      	ldr	r2, [pc, #140]	@ (80038fc <HAL_TIM_Base_Start_IT+0xc4>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d022      	beq.n	80038b8 <HAL_TIM_Base_Start_IT+0x80>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800387a:	d01d      	beq.n	80038b8 <HAL_TIM_Base_Start_IT+0x80>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a1f      	ldr	r2, [pc, #124]	@ (8003900 <HAL_TIM_Base_Start_IT+0xc8>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d018      	beq.n	80038b8 <HAL_TIM_Base_Start_IT+0x80>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a1e      	ldr	r2, [pc, #120]	@ (8003904 <HAL_TIM_Base_Start_IT+0xcc>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d013      	beq.n	80038b8 <HAL_TIM_Base_Start_IT+0x80>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a1c      	ldr	r2, [pc, #112]	@ (8003908 <HAL_TIM_Base_Start_IT+0xd0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d00e      	beq.n	80038b8 <HAL_TIM_Base_Start_IT+0x80>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a1b      	ldr	r2, [pc, #108]	@ (800390c <HAL_TIM_Base_Start_IT+0xd4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d009      	beq.n	80038b8 <HAL_TIM_Base_Start_IT+0x80>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a19      	ldr	r2, [pc, #100]	@ (8003910 <HAL_TIM_Base_Start_IT+0xd8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d004      	beq.n	80038b8 <HAL_TIM_Base_Start_IT+0x80>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a18      	ldr	r2, [pc, #96]	@ (8003914 <HAL_TIM_Base_Start_IT+0xdc>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d111      	bne.n	80038dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2b06      	cmp	r3, #6
 80038c8:	d010      	beq.n	80038ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f042 0201 	orr.w	r2, r2, #1
 80038d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038da:	e007      	b.n	80038ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0201 	orr.w	r2, r2, #1
 80038ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3714      	adds	r7, #20
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	40010000 	.word	0x40010000
 8003900:	40000400 	.word	0x40000400
 8003904:	40000800 	.word	0x40000800
 8003908:	40000c00 	.word	0x40000c00
 800390c:	40010400 	.word	0x40010400
 8003910:	40014000 	.word	0x40014000
 8003914:	40001800 	.word	0x40001800

08003918 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e041      	b.n	80039ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d106      	bne.n	8003944 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f839 	bl	80039b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2202      	movs	r2, #2
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3304      	adds	r3, #4
 8003954:	4619      	mov	r1, r3
 8003956:	4610      	mov	r0, r2
 8003958:	f000 fba2 	bl	80040a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
	...

080039cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d109      	bne.n	80039f0 <HAL_TIM_PWM_Start+0x24>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	bf14      	ite	ne
 80039e8:	2301      	movne	r3, #1
 80039ea:	2300      	moveq	r3, #0
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	e022      	b.n	8003a36 <HAL_TIM_PWM_Start+0x6a>
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d109      	bne.n	8003a0a <HAL_TIM_PWM_Start+0x3e>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	bf14      	ite	ne
 8003a02:	2301      	movne	r3, #1
 8003a04:	2300      	moveq	r3, #0
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	e015      	b.n	8003a36 <HAL_TIM_PWM_Start+0x6a>
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d109      	bne.n	8003a24 <HAL_TIM_PWM_Start+0x58>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	bf14      	ite	ne
 8003a1c:	2301      	movne	r3, #1
 8003a1e:	2300      	moveq	r3, #0
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	e008      	b.n	8003a36 <HAL_TIM_PWM_Start+0x6a>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	bf14      	ite	ne
 8003a30:	2301      	movne	r3, #1
 8003a32:	2300      	moveq	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e07c      	b.n	8003b38 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d104      	bne.n	8003a4e <HAL_TIM_PWM_Start+0x82>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2202      	movs	r2, #2
 8003a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a4c:	e013      	b.n	8003a76 <HAL_TIM_PWM_Start+0xaa>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	d104      	bne.n	8003a5e <HAL_TIM_PWM_Start+0x92>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a5c:	e00b      	b.n	8003a76 <HAL_TIM_PWM_Start+0xaa>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d104      	bne.n	8003a6e <HAL_TIM_PWM_Start+0xa2>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a6c:	e003      	b.n	8003a76 <HAL_TIM_PWM_Start+0xaa>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2202      	movs	r2, #2
 8003a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	6839      	ldr	r1, [r7, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 fe04 	bl	800468c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a2d      	ldr	r2, [pc, #180]	@ (8003b40 <HAL_TIM_PWM_Start+0x174>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d004      	beq.n	8003a98 <HAL_TIM_PWM_Start+0xcc>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a2c      	ldr	r2, [pc, #176]	@ (8003b44 <HAL_TIM_PWM_Start+0x178>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d101      	bne.n	8003a9c <HAL_TIM_PWM_Start+0xd0>
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e000      	b.n	8003a9e <HAL_TIM_PWM_Start+0xd2>
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d007      	beq.n	8003ab2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ab0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a22      	ldr	r2, [pc, #136]	@ (8003b40 <HAL_TIM_PWM_Start+0x174>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d022      	beq.n	8003b02 <HAL_TIM_PWM_Start+0x136>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ac4:	d01d      	beq.n	8003b02 <HAL_TIM_PWM_Start+0x136>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a1f      	ldr	r2, [pc, #124]	@ (8003b48 <HAL_TIM_PWM_Start+0x17c>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d018      	beq.n	8003b02 <HAL_TIM_PWM_Start+0x136>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8003b4c <HAL_TIM_PWM_Start+0x180>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d013      	beq.n	8003b02 <HAL_TIM_PWM_Start+0x136>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a1c      	ldr	r2, [pc, #112]	@ (8003b50 <HAL_TIM_PWM_Start+0x184>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d00e      	beq.n	8003b02 <HAL_TIM_PWM_Start+0x136>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a16      	ldr	r2, [pc, #88]	@ (8003b44 <HAL_TIM_PWM_Start+0x178>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d009      	beq.n	8003b02 <HAL_TIM_PWM_Start+0x136>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a18      	ldr	r2, [pc, #96]	@ (8003b54 <HAL_TIM_PWM_Start+0x188>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d004      	beq.n	8003b02 <HAL_TIM_PWM_Start+0x136>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a16      	ldr	r2, [pc, #88]	@ (8003b58 <HAL_TIM_PWM_Start+0x18c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d111      	bne.n	8003b26 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2b06      	cmp	r3, #6
 8003b12:	d010      	beq.n	8003b36 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0201 	orr.w	r2, r2, #1
 8003b22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b24:	e007      	b.n	8003b36 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f042 0201 	orr.w	r2, r2, #1
 8003b34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40010000 	.word	0x40010000
 8003b44:	40010400 	.word	0x40010400
 8003b48:	40000400 	.word	0x40000400
 8003b4c:	40000800 	.word	0x40000800
 8003b50:	40000c00 	.word	0x40000c00
 8003b54:	40014000 	.word	0x40014000
 8003b58:	40001800 	.word	0x40001800

08003b5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d020      	beq.n	8003bc0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d01b      	beq.n	8003bc0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f06f 0202 	mvn.w	r2, #2
 8003b90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 fa5b 	bl	8004062 <HAL_TIM_IC_CaptureCallback>
 8003bac:	e005      	b.n	8003bba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 fa4d 	bl	800404e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 fa5e 	bl	8004076 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	f003 0304 	and.w	r3, r3, #4
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d020      	beq.n	8003c0c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d01b      	beq.n	8003c0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f06f 0204 	mvn.w	r2, #4
 8003bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2202      	movs	r2, #2
 8003be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 fa35 	bl	8004062 <HAL_TIM_IC_CaptureCallback>
 8003bf8:	e005      	b.n	8003c06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 fa27 	bl	800404e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 fa38 	bl	8004076 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d020      	beq.n	8003c58 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d01b      	beq.n	8003c58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f06f 0208 	mvn.w	r2, #8
 8003c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2204      	movs	r2, #4
 8003c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 fa0f 	bl	8004062 <HAL_TIM_IC_CaptureCallback>
 8003c44:	e005      	b.n	8003c52 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 fa01 	bl	800404e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 fa12 	bl	8004076 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f003 0310 	and.w	r3, r3, #16
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d020      	beq.n	8003ca4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f003 0310 	and.w	r3, r3, #16
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d01b      	beq.n	8003ca4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f06f 0210 	mvn.w	r2, #16
 8003c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2208      	movs	r2, #8
 8003c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f9e9 	bl	8004062 <HAL_TIM_IC_CaptureCallback>
 8003c90:	e005      	b.n	8003c9e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f9db 	bl	800404e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f9ec 	bl	8004076 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00c      	beq.n	8003cc8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d007      	beq.n	8003cc8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f06f 0201 	mvn.w	r2, #1
 8003cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7fd fad6 	bl	8001274 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00c      	beq.n	8003cec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d007      	beq.n	8003cec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 fd7c 	bl	80047e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00c      	beq.n	8003d10 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d007      	beq.n	8003d10 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f9bd 	bl	800408a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	f003 0320 	and.w	r3, r3, #32
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00c      	beq.n	8003d34 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f003 0320 	and.w	r3, r3, #32
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d007      	beq.n	8003d34 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f06f 0220 	mvn.w	r2, #32
 8003d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 fd4e 	bl	80047d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d34:	bf00      	nop
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d101      	bne.n	8003d5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d56:	2302      	movs	r3, #2
 8003d58:	e0ae      	b.n	8003eb8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b0c      	cmp	r3, #12
 8003d66:	f200 809f 	bhi.w	8003ea8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d70:	08003da5 	.word	0x08003da5
 8003d74:	08003ea9 	.word	0x08003ea9
 8003d78:	08003ea9 	.word	0x08003ea9
 8003d7c:	08003ea9 	.word	0x08003ea9
 8003d80:	08003de5 	.word	0x08003de5
 8003d84:	08003ea9 	.word	0x08003ea9
 8003d88:	08003ea9 	.word	0x08003ea9
 8003d8c:	08003ea9 	.word	0x08003ea9
 8003d90:	08003e27 	.word	0x08003e27
 8003d94:	08003ea9 	.word	0x08003ea9
 8003d98:	08003ea9 	.word	0x08003ea9
 8003d9c:	08003ea9 	.word	0x08003ea9
 8003da0:	08003e67 	.word	0x08003e67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68b9      	ldr	r1, [r7, #8]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 fa24 	bl	80041f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699a      	ldr	r2, [r3, #24]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 0208 	orr.w	r2, r2, #8
 8003dbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	699a      	ldr	r2, [r3, #24]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0204 	bic.w	r2, r2, #4
 8003dce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6999      	ldr	r1, [r3, #24]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	691a      	ldr	r2, [r3, #16]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	619a      	str	r2, [r3, #24]
      break;
 8003de2:	e064      	b.n	8003eae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68b9      	ldr	r1, [r7, #8]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 fa74 	bl	80042d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699a      	ldr	r2, [r3, #24]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	699a      	ldr	r2, [r3, #24]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6999      	ldr	r1, [r3, #24]
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	021a      	lsls	r2, r3, #8
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	619a      	str	r2, [r3, #24]
      break;
 8003e24:	e043      	b.n	8003eae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68b9      	ldr	r1, [r7, #8]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 fac9 	bl	80043c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	69da      	ldr	r2, [r3, #28]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f042 0208 	orr.w	r2, r2, #8
 8003e40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	69da      	ldr	r2, [r3, #28]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0204 	bic.w	r2, r2, #4
 8003e50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	69d9      	ldr	r1, [r3, #28]
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	691a      	ldr	r2, [r3, #16]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	61da      	str	r2, [r3, #28]
      break;
 8003e64:	e023      	b.n	8003eae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68b9      	ldr	r1, [r7, #8]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 fb1d 	bl	80044ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	69da      	ldr	r2, [r3, #28]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	69da      	ldr	r2, [r3, #28]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	69d9      	ldr	r1, [r3, #28]
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	021a      	lsls	r2, r3, #8
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	61da      	str	r2, [r3, #28]
      break;
 8003ea6:	e002      	b.n	8003eae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	75fb      	strb	r3, [r7, #23]
      break;
 8003eac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3718      	adds	r7, #24
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <HAL_TIM_ConfigClockSource+0x1c>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	e0b4      	b.n	8004046 <HAL_TIM_ConfigClockSource+0x186>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003efa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f14:	d03e      	beq.n	8003f94 <HAL_TIM_ConfigClockSource+0xd4>
 8003f16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f1a:	f200 8087 	bhi.w	800402c <HAL_TIM_ConfigClockSource+0x16c>
 8003f1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f22:	f000 8086 	beq.w	8004032 <HAL_TIM_ConfigClockSource+0x172>
 8003f26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f2a:	d87f      	bhi.n	800402c <HAL_TIM_ConfigClockSource+0x16c>
 8003f2c:	2b70      	cmp	r3, #112	@ 0x70
 8003f2e:	d01a      	beq.n	8003f66 <HAL_TIM_ConfigClockSource+0xa6>
 8003f30:	2b70      	cmp	r3, #112	@ 0x70
 8003f32:	d87b      	bhi.n	800402c <HAL_TIM_ConfigClockSource+0x16c>
 8003f34:	2b60      	cmp	r3, #96	@ 0x60
 8003f36:	d050      	beq.n	8003fda <HAL_TIM_ConfigClockSource+0x11a>
 8003f38:	2b60      	cmp	r3, #96	@ 0x60
 8003f3a:	d877      	bhi.n	800402c <HAL_TIM_ConfigClockSource+0x16c>
 8003f3c:	2b50      	cmp	r3, #80	@ 0x50
 8003f3e:	d03c      	beq.n	8003fba <HAL_TIM_ConfigClockSource+0xfa>
 8003f40:	2b50      	cmp	r3, #80	@ 0x50
 8003f42:	d873      	bhi.n	800402c <HAL_TIM_ConfigClockSource+0x16c>
 8003f44:	2b40      	cmp	r3, #64	@ 0x40
 8003f46:	d058      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0x13a>
 8003f48:	2b40      	cmp	r3, #64	@ 0x40
 8003f4a:	d86f      	bhi.n	800402c <HAL_TIM_ConfigClockSource+0x16c>
 8003f4c:	2b30      	cmp	r3, #48	@ 0x30
 8003f4e:	d064      	beq.n	800401a <HAL_TIM_ConfigClockSource+0x15a>
 8003f50:	2b30      	cmp	r3, #48	@ 0x30
 8003f52:	d86b      	bhi.n	800402c <HAL_TIM_ConfigClockSource+0x16c>
 8003f54:	2b20      	cmp	r3, #32
 8003f56:	d060      	beq.n	800401a <HAL_TIM_ConfigClockSource+0x15a>
 8003f58:	2b20      	cmp	r3, #32
 8003f5a:	d867      	bhi.n	800402c <HAL_TIM_ConfigClockSource+0x16c>
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d05c      	beq.n	800401a <HAL_TIM_ConfigClockSource+0x15a>
 8003f60:	2b10      	cmp	r3, #16
 8003f62:	d05a      	beq.n	800401a <HAL_TIM_ConfigClockSource+0x15a>
 8003f64:	e062      	b.n	800402c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f76:	f000 fb69 	bl	800464c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	609a      	str	r2, [r3, #8]
      break;
 8003f92:	e04f      	b.n	8004034 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fa4:	f000 fb52 	bl	800464c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689a      	ldr	r2, [r3, #8]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fb6:	609a      	str	r2, [r3, #8]
      break;
 8003fb8:	e03c      	b.n	8004034 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	f000 fac6 	bl	8004558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2150      	movs	r1, #80	@ 0x50
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 fb1f 	bl	8004616 <TIM_ITRx_SetConfig>
      break;
 8003fd8:	e02c      	b.n	8004034 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	f000 fae5 	bl	80045b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2160      	movs	r1, #96	@ 0x60
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 fb0f 	bl	8004616 <TIM_ITRx_SetConfig>
      break;
 8003ff8:	e01c      	b.n	8004034 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004006:	461a      	mov	r2, r3
 8004008:	f000 faa6 	bl	8004558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2140      	movs	r1, #64	@ 0x40
 8004012:	4618      	mov	r0, r3
 8004014:	f000 faff 	bl	8004616 <TIM_ITRx_SetConfig>
      break;
 8004018:	e00c      	b.n	8004034 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4619      	mov	r1, r3
 8004024:	4610      	mov	r0, r2
 8004026:	f000 faf6 	bl	8004616 <TIM_ITRx_SetConfig>
      break;
 800402a:	e003      	b.n	8004034 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	73fb      	strb	r3, [r7, #15]
      break;
 8004030:	e000      	b.n	8004034 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004032:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004044:	7bfb      	ldrb	r3, [r7, #15]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
	...

080040a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a46      	ldr	r2, [pc, #280]	@ (80041cc <TIM_Base_SetConfig+0x12c>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d013      	beq.n	80040e0 <TIM_Base_SetConfig+0x40>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040be:	d00f      	beq.n	80040e0 <TIM_Base_SetConfig+0x40>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a43      	ldr	r2, [pc, #268]	@ (80041d0 <TIM_Base_SetConfig+0x130>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d00b      	beq.n	80040e0 <TIM_Base_SetConfig+0x40>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a42      	ldr	r2, [pc, #264]	@ (80041d4 <TIM_Base_SetConfig+0x134>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d007      	beq.n	80040e0 <TIM_Base_SetConfig+0x40>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a41      	ldr	r2, [pc, #260]	@ (80041d8 <TIM_Base_SetConfig+0x138>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d003      	beq.n	80040e0 <TIM_Base_SetConfig+0x40>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a40      	ldr	r2, [pc, #256]	@ (80041dc <TIM_Base_SetConfig+0x13c>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d108      	bne.n	80040f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a35      	ldr	r2, [pc, #212]	@ (80041cc <TIM_Base_SetConfig+0x12c>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d02b      	beq.n	8004152 <TIM_Base_SetConfig+0xb2>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004100:	d027      	beq.n	8004152 <TIM_Base_SetConfig+0xb2>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a32      	ldr	r2, [pc, #200]	@ (80041d0 <TIM_Base_SetConfig+0x130>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d023      	beq.n	8004152 <TIM_Base_SetConfig+0xb2>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a31      	ldr	r2, [pc, #196]	@ (80041d4 <TIM_Base_SetConfig+0x134>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d01f      	beq.n	8004152 <TIM_Base_SetConfig+0xb2>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a30      	ldr	r2, [pc, #192]	@ (80041d8 <TIM_Base_SetConfig+0x138>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d01b      	beq.n	8004152 <TIM_Base_SetConfig+0xb2>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a2f      	ldr	r2, [pc, #188]	@ (80041dc <TIM_Base_SetConfig+0x13c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d017      	beq.n	8004152 <TIM_Base_SetConfig+0xb2>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a2e      	ldr	r2, [pc, #184]	@ (80041e0 <TIM_Base_SetConfig+0x140>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d013      	beq.n	8004152 <TIM_Base_SetConfig+0xb2>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a2d      	ldr	r2, [pc, #180]	@ (80041e4 <TIM_Base_SetConfig+0x144>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d00f      	beq.n	8004152 <TIM_Base_SetConfig+0xb2>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a2c      	ldr	r2, [pc, #176]	@ (80041e8 <TIM_Base_SetConfig+0x148>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d00b      	beq.n	8004152 <TIM_Base_SetConfig+0xb2>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a2b      	ldr	r2, [pc, #172]	@ (80041ec <TIM_Base_SetConfig+0x14c>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d007      	beq.n	8004152 <TIM_Base_SetConfig+0xb2>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a2a      	ldr	r2, [pc, #168]	@ (80041f0 <TIM_Base_SetConfig+0x150>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d003      	beq.n	8004152 <TIM_Base_SetConfig+0xb2>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a29      	ldr	r2, [pc, #164]	@ (80041f4 <TIM_Base_SetConfig+0x154>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d108      	bne.n	8004164 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	4313      	orrs	r3, r2
 8004162:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	4313      	orrs	r3, r2
 8004170:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a10      	ldr	r2, [pc, #64]	@ (80041cc <TIM_Base_SetConfig+0x12c>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d003      	beq.n	8004198 <TIM_Base_SetConfig+0xf8>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a12      	ldr	r2, [pc, #72]	@ (80041dc <TIM_Base_SetConfig+0x13c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d103      	bne.n	80041a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	691a      	ldr	r2, [r3, #16]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d105      	bne.n	80041be <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f023 0201 	bic.w	r2, r3, #1
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	611a      	str	r2, [r3, #16]
  }
}
 80041be:	bf00      	nop
 80041c0:	3714      	adds	r7, #20
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	40010000 	.word	0x40010000
 80041d0:	40000400 	.word	0x40000400
 80041d4:	40000800 	.word	0x40000800
 80041d8:	40000c00 	.word	0x40000c00
 80041dc:	40010400 	.word	0x40010400
 80041e0:	40014000 	.word	0x40014000
 80041e4:	40014400 	.word	0x40014400
 80041e8:	40014800 	.word	0x40014800
 80041ec:	40001800 	.word	0x40001800
 80041f0:	40001c00 	.word	0x40001c00
 80041f4:	40002000 	.word	0x40002000

080041f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	f023 0201 	bic.w	r2, r3, #1
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f023 0303 	bic.w	r3, r3, #3
 800422e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	4313      	orrs	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f023 0302 	bic.w	r3, r3, #2
 8004240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	4313      	orrs	r3, r2
 800424a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a20      	ldr	r2, [pc, #128]	@ (80042d0 <TIM_OC1_SetConfig+0xd8>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d003      	beq.n	800425c <TIM_OC1_SetConfig+0x64>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a1f      	ldr	r2, [pc, #124]	@ (80042d4 <TIM_OC1_SetConfig+0xdc>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d10c      	bne.n	8004276 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f023 0308 	bic.w	r3, r3, #8
 8004262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	4313      	orrs	r3, r2
 800426c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f023 0304 	bic.w	r3, r3, #4
 8004274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a15      	ldr	r2, [pc, #84]	@ (80042d0 <TIM_OC1_SetConfig+0xd8>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d003      	beq.n	8004286 <TIM_OC1_SetConfig+0x8e>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a14      	ldr	r2, [pc, #80]	@ (80042d4 <TIM_OC1_SetConfig+0xdc>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d111      	bne.n	80042aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800428c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	4313      	orrs	r3, r2
 800429e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	621a      	str	r2, [r3, #32]
}
 80042c4:	bf00      	nop
 80042c6:	371c      	adds	r7, #28
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr
 80042d0:	40010000 	.word	0x40010000
 80042d4:	40010400 	.word	0x40010400

080042d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042d8:	b480      	push	{r7}
 80042da:	b087      	sub	sp, #28
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	f023 0210 	bic.w	r2, r3, #16
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800430e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	021b      	lsls	r3, r3, #8
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	4313      	orrs	r3, r2
 800431a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f023 0320 	bic.w	r3, r3, #32
 8004322:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	4313      	orrs	r3, r2
 800432e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a22      	ldr	r2, [pc, #136]	@ (80043bc <TIM_OC2_SetConfig+0xe4>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d003      	beq.n	8004340 <TIM_OC2_SetConfig+0x68>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a21      	ldr	r2, [pc, #132]	@ (80043c0 <TIM_OC2_SetConfig+0xe8>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d10d      	bne.n	800435c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004346:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	011b      	lsls	r3, r3, #4
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	4313      	orrs	r3, r2
 8004352:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800435a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a17      	ldr	r2, [pc, #92]	@ (80043bc <TIM_OC2_SetConfig+0xe4>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d003      	beq.n	800436c <TIM_OC2_SetConfig+0x94>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a16      	ldr	r2, [pc, #88]	@ (80043c0 <TIM_OC2_SetConfig+0xe8>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d113      	bne.n	8004394 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004372:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800437a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	4313      	orrs	r3, r2
 8004386:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	4313      	orrs	r3, r2
 8004392:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	621a      	str	r2, [r3, #32]
}
 80043ae:	bf00      	nop
 80043b0:	371c      	adds	r7, #28
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	40010000 	.word	0x40010000
 80043c0:	40010400 	.word	0x40010400

080043c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f023 0303 	bic.w	r3, r3, #3
 80043fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	4313      	orrs	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800440c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	021b      	lsls	r3, r3, #8
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	4313      	orrs	r3, r2
 8004418:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a21      	ldr	r2, [pc, #132]	@ (80044a4 <TIM_OC3_SetConfig+0xe0>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d003      	beq.n	800442a <TIM_OC3_SetConfig+0x66>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a20      	ldr	r2, [pc, #128]	@ (80044a8 <TIM_OC3_SetConfig+0xe4>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d10d      	bne.n	8004446 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004430:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	021b      	lsls	r3, r3, #8
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	4313      	orrs	r3, r2
 800443c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004444:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a16      	ldr	r2, [pc, #88]	@ (80044a4 <TIM_OC3_SetConfig+0xe0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d003      	beq.n	8004456 <TIM_OC3_SetConfig+0x92>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a15      	ldr	r2, [pc, #84]	@ (80044a8 <TIM_OC3_SetConfig+0xe4>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d113      	bne.n	800447e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800445c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	011b      	lsls	r3, r3, #4
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	4313      	orrs	r3, r2
 8004470:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	011b      	lsls	r3, r3, #4
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	4313      	orrs	r3, r2
 800447c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	621a      	str	r2, [r3, #32]
}
 8004498:	bf00      	nop
 800449a:	371c      	adds	r7, #28
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	40010000 	.word	0x40010000
 80044a8:	40010400 	.word	0x40010400

080044ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	021b      	lsls	r3, r3, #8
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80044f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	031b      	lsls	r3, r3, #12
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4313      	orrs	r3, r2
 8004502:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a12      	ldr	r2, [pc, #72]	@ (8004550 <TIM_OC4_SetConfig+0xa4>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d003      	beq.n	8004514 <TIM_OC4_SetConfig+0x68>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a11      	ldr	r2, [pc, #68]	@ (8004554 <TIM_OC4_SetConfig+0xa8>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d109      	bne.n	8004528 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800451a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	019b      	lsls	r3, r3, #6
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	4313      	orrs	r3, r2
 8004526:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	621a      	str	r2, [r3, #32]
}
 8004542:	bf00      	nop
 8004544:	371c      	adds	r7, #28
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	40010000 	.word	0x40010000
 8004554:	40010400 	.word	0x40010400

08004558 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004558:	b480      	push	{r7}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	f023 0201 	bic.w	r2, r3, #1
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	011b      	lsls	r3, r3, #4
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4313      	orrs	r3, r2
 800458c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f023 030a 	bic.w	r3, r3, #10
 8004594:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	4313      	orrs	r3, r2
 800459c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	621a      	str	r2, [r3, #32]
}
 80045aa:	bf00      	nop
 80045ac:	371c      	adds	r7, #28
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b087      	sub	sp, #28
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	60f8      	str	r0, [r7, #12]
 80045be:	60b9      	str	r1, [r7, #8]
 80045c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	f023 0210 	bic.w	r2, r3, #16
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	031b      	lsls	r3, r3, #12
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80045f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	621a      	str	r2, [r3, #32]
}
 800460a:	bf00      	nop
 800460c:	371c      	adds	r7, #28
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004616:	b480      	push	{r7}
 8004618:	b085      	sub	sp, #20
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
 800461e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800462c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	4313      	orrs	r3, r2
 8004634:	f043 0307 	orr.w	r3, r3, #7
 8004638:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	609a      	str	r2, [r3, #8]
}
 8004640:	bf00      	nop
 8004642:	3714      	adds	r7, #20
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800464c:	b480      	push	{r7}
 800464e:	b087      	sub	sp, #28
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
 8004658:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004666:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	021a      	lsls	r2, r3, #8
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	431a      	orrs	r2, r3
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	4313      	orrs	r3, r2
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	4313      	orrs	r3, r2
 8004678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	609a      	str	r2, [r3, #8]
}
 8004680:	bf00      	nop
 8004682:	371c      	adds	r7, #28
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	f003 031f 	and.w	r3, r3, #31
 800469e:	2201      	movs	r2, #1
 80046a0:	fa02 f303 	lsl.w	r3, r2, r3
 80046a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6a1a      	ldr	r2, [r3, #32]
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	43db      	mvns	r3, r3
 80046ae:	401a      	ands	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6a1a      	ldr	r2, [r3, #32]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	f003 031f 	and.w	r3, r3, #31
 80046be:	6879      	ldr	r1, [r7, #4]
 80046c0:	fa01 f303 	lsl.w	r3, r1, r3
 80046c4:	431a      	orrs	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	621a      	str	r2, [r3, #32]
}
 80046ca:	bf00      	nop
 80046cc:	371c      	adds	r7, #28
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
	...

080046d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d101      	bne.n	80046f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046ec:	2302      	movs	r3, #2
 80046ee:	e05a      	b.n	80047a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004716:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	4313      	orrs	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a21      	ldr	r2, [pc, #132]	@ (80047b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d022      	beq.n	800477a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800473c:	d01d      	beq.n	800477a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a1d      	ldr	r2, [pc, #116]	@ (80047b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d018      	beq.n	800477a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a1b      	ldr	r2, [pc, #108]	@ (80047bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d013      	beq.n	800477a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a1a      	ldr	r2, [pc, #104]	@ (80047c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d00e      	beq.n	800477a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a18      	ldr	r2, [pc, #96]	@ (80047c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d009      	beq.n	800477a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a17      	ldr	r2, [pc, #92]	@ (80047c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d004      	beq.n	800477a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a15      	ldr	r2, [pc, #84]	@ (80047cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d10c      	bne.n	8004794 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004780:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	4313      	orrs	r3, r2
 800478a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	40010000 	.word	0x40010000
 80047b8:	40000400 	.word	0x40000400
 80047bc:	40000800 	.word	0x40000800
 80047c0:	40000c00 	.word	0x40000c00
 80047c4:	40010400 	.word	0x40010400
 80047c8:	40014000 	.word	0x40014000
 80047cc:	40001800 	.word	0x40001800

080047d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e042      	b.n	8004890 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d106      	bne.n	8004824 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7fc fecc 	bl	80015bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2224      	movs	r2, #36	@ 0x24
 8004828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68da      	ldr	r2, [r3, #12]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800483a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 f973 	bl	8004b28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	691a      	ldr	r2, [r3, #16]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004850:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	695a      	ldr	r2, [r3, #20]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004860:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68da      	ldr	r2, [r3, #12]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004870:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2220      	movs	r2, #32
 800487c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2220      	movs	r2, #32
 8004884:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b08a      	sub	sp, #40	@ 0x28
 800489c:	af02      	add	r7, sp, #8
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	603b      	str	r3, [r7, #0]
 80048a4:	4613      	mov	r3, r2
 80048a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b20      	cmp	r3, #32
 80048b6:	d175      	bne.n	80049a4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d002      	beq.n	80048c4 <HAL_UART_Transmit+0x2c>
 80048be:	88fb      	ldrh	r3, [r7, #6]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e06e      	b.n	80049a6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2221      	movs	r2, #33	@ 0x21
 80048d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048d6:	f7fc ff9f 	bl	8001818 <HAL_GetTick>
 80048da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	88fa      	ldrh	r2, [r7, #6]
 80048e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	88fa      	ldrh	r2, [r7, #6]
 80048e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048f0:	d108      	bne.n	8004904 <HAL_UART_Transmit+0x6c>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d104      	bne.n	8004904 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80048fa:	2300      	movs	r3, #0
 80048fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	61bb      	str	r3, [r7, #24]
 8004902:	e003      	b.n	800490c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004908:	2300      	movs	r3, #0
 800490a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800490c:	e02e      	b.n	800496c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	2200      	movs	r2, #0
 8004916:	2180      	movs	r1, #128	@ 0x80
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 f848 	bl	80049ae <UART_WaitOnFlagUntilTimeout>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d005      	beq.n	8004930 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e03a      	b.n	80049a6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10b      	bne.n	800494e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	881b      	ldrh	r3, [r3, #0]
 800493a:	461a      	mov	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004944:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	3302      	adds	r3, #2
 800494a:	61bb      	str	r3, [r7, #24]
 800494c:	e007      	b.n	800495e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	781a      	ldrb	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	3301      	adds	r3, #1
 800495c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004962:	b29b      	uxth	r3, r3
 8004964:	3b01      	subs	r3, #1
 8004966:	b29a      	uxth	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004970:	b29b      	uxth	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1cb      	bne.n	800490e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2200      	movs	r2, #0
 800497e:	2140      	movs	r1, #64	@ 0x40
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 f814 	bl	80049ae <UART_WaitOnFlagUntilTimeout>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d005      	beq.n	8004998 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2220      	movs	r2, #32
 8004990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e006      	b.n	80049a6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2220      	movs	r2, #32
 800499c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80049a0:	2300      	movs	r3, #0
 80049a2:	e000      	b.n	80049a6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80049a4:	2302      	movs	r3, #2
  }
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3720      	adds	r7, #32
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b086      	sub	sp, #24
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	60f8      	str	r0, [r7, #12]
 80049b6:	60b9      	str	r1, [r7, #8]
 80049b8:	603b      	str	r3, [r7, #0]
 80049ba:	4613      	mov	r3, r2
 80049bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049be:	e03b      	b.n	8004a38 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049c0:	6a3b      	ldr	r3, [r7, #32]
 80049c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049c6:	d037      	beq.n	8004a38 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049c8:	f7fc ff26 	bl	8001818 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	6a3a      	ldr	r2, [r7, #32]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d302      	bcc.n	80049de <UART_WaitOnFlagUntilTimeout+0x30>
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e03a      	b.n	8004a58 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	f003 0304 	and.w	r3, r3, #4
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d023      	beq.n	8004a38 <UART_WaitOnFlagUntilTimeout+0x8a>
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2b80      	cmp	r3, #128	@ 0x80
 80049f4:	d020      	beq.n	8004a38 <UART_WaitOnFlagUntilTimeout+0x8a>
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	2b40      	cmp	r3, #64	@ 0x40
 80049fa:	d01d      	beq.n	8004a38 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b08      	cmp	r3, #8
 8004a08:	d116      	bne.n	8004a38 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	617b      	str	r3, [r7, #20]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	617b      	str	r3, [r7, #20]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	617b      	str	r3, [r7, #20]
 8004a1e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 f81d 	bl	8004a60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2208      	movs	r2, #8
 8004a2a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e00f      	b.n	8004a58 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	4013      	ands	r3, r2
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	bf0c      	ite	eq
 8004a48:	2301      	moveq	r3, #1
 8004a4a:	2300      	movne	r3, #0
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	461a      	mov	r2, r3
 8004a50:	79fb      	ldrb	r3, [r7, #7]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d0b4      	beq.n	80049c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3718      	adds	r7, #24
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b095      	sub	sp, #84	@ 0x54
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	330c      	adds	r3, #12
 8004a6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a72:	e853 3f00 	ldrex	r3, [r3]
 8004a76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	330c      	adds	r3, #12
 8004a86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a88:	643a      	str	r2, [r7, #64]	@ 0x40
 8004a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a90:	e841 2300 	strex	r3, r2, [r1]
 8004a94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1e5      	bne.n	8004a68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	3314      	adds	r3, #20
 8004aa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa4:	6a3b      	ldr	r3, [r7, #32]
 8004aa6:	e853 3f00 	ldrex	r3, [r3]
 8004aaa:	61fb      	str	r3, [r7, #28]
   return(result);
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	f023 0301 	bic.w	r3, r3, #1
 8004ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	3314      	adds	r3, #20
 8004aba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004abc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004abe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ac2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ac4:	e841 2300 	strex	r3, r2, [r1]
 8004ac8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1e5      	bne.n	8004a9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d119      	bne.n	8004b0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	330c      	adds	r3, #12
 8004ade:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	e853 3f00 	ldrex	r3, [r3]
 8004ae6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	f023 0310 	bic.w	r3, r3, #16
 8004aee:	647b      	str	r3, [r7, #68]	@ 0x44
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	330c      	adds	r3, #12
 8004af6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004af8:	61ba      	str	r2, [r7, #24]
 8004afa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afc:	6979      	ldr	r1, [r7, #20]
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	e841 2300 	strex	r3, r2, [r1]
 8004b04:	613b      	str	r3, [r7, #16]
   return(result);
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1e5      	bne.n	8004ad8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b1a:	bf00      	nop
 8004b1c:	3754      	adds	r7, #84	@ 0x54
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
	...

08004b28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b2c:	b0c0      	sub	sp, #256	@ 0x100
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b44:	68d9      	ldr	r1, [r3, #12]
 8004b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	ea40 0301 	orr.w	r3, r0, r1
 8004b50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b56:	689a      	ldr	r2, [r3, #8]
 8004b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	431a      	orrs	r2, r3
 8004b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004b80:	f021 010c 	bic.w	r1, r1, #12
 8004b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b8e:	430b      	orrs	r3, r1
 8004b90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba2:	6999      	ldr	r1, [r3, #24]
 8004ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	ea40 0301 	orr.w	r3, r0, r1
 8004bae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	4b8f      	ldr	r3, [pc, #572]	@ (8004df4 <UART_SetConfig+0x2cc>)
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d005      	beq.n	8004bc8 <UART_SetConfig+0xa0>
 8004bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	4b8d      	ldr	r3, [pc, #564]	@ (8004df8 <UART_SetConfig+0x2d0>)
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d104      	bne.n	8004bd2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bc8:	f7fe f98a 	bl	8002ee0 <HAL_RCC_GetPCLK2Freq>
 8004bcc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004bd0:	e003      	b.n	8004bda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bd2:	f7fe f971 	bl	8002eb8 <HAL_RCC_GetPCLK1Freq>
 8004bd6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bde:	69db      	ldr	r3, [r3, #28]
 8004be0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004be4:	f040 810c 	bne.w	8004e00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004be8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bec:	2200      	movs	r2, #0
 8004bee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004bf2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004bf6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004bfa:	4622      	mov	r2, r4
 8004bfc:	462b      	mov	r3, r5
 8004bfe:	1891      	adds	r1, r2, r2
 8004c00:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c02:	415b      	adcs	r3, r3
 8004c04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c0a:	4621      	mov	r1, r4
 8004c0c:	eb12 0801 	adds.w	r8, r2, r1
 8004c10:	4629      	mov	r1, r5
 8004c12:	eb43 0901 	adc.w	r9, r3, r1
 8004c16:	f04f 0200 	mov.w	r2, #0
 8004c1a:	f04f 0300 	mov.w	r3, #0
 8004c1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c2a:	4690      	mov	r8, r2
 8004c2c:	4699      	mov	r9, r3
 8004c2e:	4623      	mov	r3, r4
 8004c30:	eb18 0303 	adds.w	r3, r8, r3
 8004c34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c38:	462b      	mov	r3, r5
 8004c3a:	eb49 0303 	adc.w	r3, r9, r3
 8004c3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c4e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c56:	460b      	mov	r3, r1
 8004c58:	18db      	adds	r3, r3, r3
 8004c5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	eb42 0303 	adc.w	r3, r2, r3
 8004c62:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004c68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004c6c:	f7fb fee0 	bl	8000a30 <__aeabi_uldivmod>
 8004c70:	4602      	mov	r2, r0
 8004c72:	460b      	mov	r3, r1
 8004c74:	4b61      	ldr	r3, [pc, #388]	@ (8004dfc <UART_SetConfig+0x2d4>)
 8004c76:	fba3 2302 	umull	r2, r3, r3, r2
 8004c7a:	095b      	lsrs	r3, r3, #5
 8004c7c:	011c      	lsls	r4, r3, #4
 8004c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c82:	2200      	movs	r2, #0
 8004c84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c88:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004c8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004c90:	4642      	mov	r2, r8
 8004c92:	464b      	mov	r3, r9
 8004c94:	1891      	adds	r1, r2, r2
 8004c96:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004c98:	415b      	adcs	r3, r3
 8004c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ca0:	4641      	mov	r1, r8
 8004ca2:	eb12 0a01 	adds.w	sl, r2, r1
 8004ca6:	4649      	mov	r1, r9
 8004ca8:	eb43 0b01 	adc.w	fp, r3, r1
 8004cac:	f04f 0200 	mov.w	r2, #0
 8004cb0:	f04f 0300 	mov.w	r3, #0
 8004cb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cc0:	4692      	mov	sl, r2
 8004cc2:	469b      	mov	fp, r3
 8004cc4:	4643      	mov	r3, r8
 8004cc6:	eb1a 0303 	adds.w	r3, sl, r3
 8004cca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004cce:	464b      	mov	r3, r9
 8004cd0:	eb4b 0303 	adc.w	r3, fp, r3
 8004cd4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ce4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004ce8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004cec:	460b      	mov	r3, r1
 8004cee:	18db      	adds	r3, r3, r3
 8004cf0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	eb42 0303 	adc.w	r3, r2, r3
 8004cf8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cfa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004cfe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d02:	f7fb fe95 	bl	8000a30 <__aeabi_uldivmod>
 8004d06:	4602      	mov	r2, r0
 8004d08:	460b      	mov	r3, r1
 8004d0a:	4611      	mov	r1, r2
 8004d0c:	4b3b      	ldr	r3, [pc, #236]	@ (8004dfc <UART_SetConfig+0x2d4>)
 8004d0e:	fba3 2301 	umull	r2, r3, r3, r1
 8004d12:	095b      	lsrs	r3, r3, #5
 8004d14:	2264      	movs	r2, #100	@ 0x64
 8004d16:	fb02 f303 	mul.w	r3, r2, r3
 8004d1a:	1acb      	subs	r3, r1, r3
 8004d1c:	00db      	lsls	r3, r3, #3
 8004d1e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d22:	4b36      	ldr	r3, [pc, #216]	@ (8004dfc <UART_SetConfig+0x2d4>)
 8004d24:	fba3 2302 	umull	r2, r3, r3, r2
 8004d28:	095b      	lsrs	r3, r3, #5
 8004d2a:	005b      	lsls	r3, r3, #1
 8004d2c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d30:	441c      	add	r4, r3
 8004d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d36:	2200      	movs	r2, #0
 8004d38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d3c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d44:	4642      	mov	r2, r8
 8004d46:	464b      	mov	r3, r9
 8004d48:	1891      	adds	r1, r2, r2
 8004d4a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d4c:	415b      	adcs	r3, r3
 8004d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d54:	4641      	mov	r1, r8
 8004d56:	1851      	adds	r1, r2, r1
 8004d58:	6339      	str	r1, [r7, #48]	@ 0x30
 8004d5a:	4649      	mov	r1, r9
 8004d5c:	414b      	adcs	r3, r1
 8004d5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d60:	f04f 0200 	mov.w	r2, #0
 8004d64:	f04f 0300 	mov.w	r3, #0
 8004d68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004d6c:	4659      	mov	r1, fp
 8004d6e:	00cb      	lsls	r3, r1, #3
 8004d70:	4651      	mov	r1, sl
 8004d72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d76:	4651      	mov	r1, sl
 8004d78:	00ca      	lsls	r2, r1, #3
 8004d7a:	4610      	mov	r0, r2
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	4603      	mov	r3, r0
 8004d80:	4642      	mov	r2, r8
 8004d82:	189b      	adds	r3, r3, r2
 8004d84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d88:	464b      	mov	r3, r9
 8004d8a:	460a      	mov	r2, r1
 8004d8c:	eb42 0303 	adc.w	r3, r2, r3
 8004d90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004da0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004da4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004da8:	460b      	mov	r3, r1
 8004daa:	18db      	adds	r3, r3, r3
 8004dac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dae:	4613      	mov	r3, r2
 8004db0:	eb42 0303 	adc.w	r3, r2, r3
 8004db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004db6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004dba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004dbe:	f7fb fe37 	bl	8000a30 <__aeabi_uldivmod>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8004dfc <UART_SetConfig+0x2d4>)
 8004dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8004dcc:	095b      	lsrs	r3, r3, #5
 8004dce:	2164      	movs	r1, #100	@ 0x64
 8004dd0:	fb01 f303 	mul.w	r3, r1, r3
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	3332      	adds	r3, #50	@ 0x32
 8004dda:	4a08      	ldr	r2, [pc, #32]	@ (8004dfc <UART_SetConfig+0x2d4>)
 8004ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8004de0:	095b      	lsrs	r3, r3, #5
 8004de2:	f003 0207 	and.w	r2, r3, #7
 8004de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4422      	add	r2, r4
 8004dee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004df0:	e106      	b.n	8005000 <UART_SetConfig+0x4d8>
 8004df2:	bf00      	nop
 8004df4:	40011000 	.word	0x40011000
 8004df8:	40011400 	.word	0x40011400
 8004dfc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e04:	2200      	movs	r2, #0
 8004e06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e0a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e12:	4642      	mov	r2, r8
 8004e14:	464b      	mov	r3, r9
 8004e16:	1891      	adds	r1, r2, r2
 8004e18:	6239      	str	r1, [r7, #32]
 8004e1a:	415b      	adcs	r3, r3
 8004e1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e22:	4641      	mov	r1, r8
 8004e24:	1854      	adds	r4, r2, r1
 8004e26:	4649      	mov	r1, r9
 8004e28:	eb43 0501 	adc.w	r5, r3, r1
 8004e2c:	f04f 0200 	mov.w	r2, #0
 8004e30:	f04f 0300 	mov.w	r3, #0
 8004e34:	00eb      	lsls	r3, r5, #3
 8004e36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e3a:	00e2      	lsls	r2, r4, #3
 8004e3c:	4614      	mov	r4, r2
 8004e3e:	461d      	mov	r5, r3
 8004e40:	4643      	mov	r3, r8
 8004e42:	18e3      	adds	r3, r4, r3
 8004e44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e48:	464b      	mov	r3, r9
 8004e4a:	eb45 0303 	adc.w	r3, r5, r3
 8004e4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e5e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e62:	f04f 0200 	mov.w	r2, #0
 8004e66:	f04f 0300 	mov.w	r3, #0
 8004e6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e6e:	4629      	mov	r1, r5
 8004e70:	008b      	lsls	r3, r1, #2
 8004e72:	4621      	mov	r1, r4
 8004e74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e78:	4621      	mov	r1, r4
 8004e7a:	008a      	lsls	r2, r1, #2
 8004e7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004e80:	f7fb fdd6 	bl	8000a30 <__aeabi_uldivmod>
 8004e84:	4602      	mov	r2, r0
 8004e86:	460b      	mov	r3, r1
 8004e88:	4b60      	ldr	r3, [pc, #384]	@ (800500c <UART_SetConfig+0x4e4>)
 8004e8a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e8e:	095b      	lsrs	r3, r3, #5
 8004e90:	011c      	lsls	r4, r3, #4
 8004e92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e96:	2200      	movs	r2, #0
 8004e98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e9c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ea0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ea4:	4642      	mov	r2, r8
 8004ea6:	464b      	mov	r3, r9
 8004ea8:	1891      	adds	r1, r2, r2
 8004eaa:	61b9      	str	r1, [r7, #24]
 8004eac:	415b      	adcs	r3, r3
 8004eae:	61fb      	str	r3, [r7, #28]
 8004eb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004eb4:	4641      	mov	r1, r8
 8004eb6:	1851      	adds	r1, r2, r1
 8004eb8:	6139      	str	r1, [r7, #16]
 8004eba:	4649      	mov	r1, r9
 8004ebc:	414b      	adcs	r3, r1
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	f04f 0200 	mov.w	r2, #0
 8004ec4:	f04f 0300 	mov.w	r3, #0
 8004ec8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ecc:	4659      	mov	r1, fp
 8004ece:	00cb      	lsls	r3, r1, #3
 8004ed0:	4651      	mov	r1, sl
 8004ed2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ed6:	4651      	mov	r1, sl
 8004ed8:	00ca      	lsls	r2, r1, #3
 8004eda:	4610      	mov	r0, r2
 8004edc:	4619      	mov	r1, r3
 8004ede:	4603      	mov	r3, r0
 8004ee0:	4642      	mov	r2, r8
 8004ee2:	189b      	adds	r3, r3, r2
 8004ee4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ee8:	464b      	mov	r3, r9
 8004eea:	460a      	mov	r2, r1
 8004eec:	eb42 0303 	adc.w	r3, r2, r3
 8004ef0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004efe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f00:	f04f 0200 	mov.w	r2, #0
 8004f04:	f04f 0300 	mov.w	r3, #0
 8004f08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f0c:	4649      	mov	r1, r9
 8004f0e:	008b      	lsls	r3, r1, #2
 8004f10:	4641      	mov	r1, r8
 8004f12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f16:	4641      	mov	r1, r8
 8004f18:	008a      	lsls	r2, r1, #2
 8004f1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f1e:	f7fb fd87 	bl	8000a30 <__aeabi_uldivmod>
 8004f22:	4602      	mov	r2, r0
 8004f24:	460b      	mov	r3, r1
 8004f26:	4611      	mov	r1, r2
 8004f28:	4b38      	ldr	r3, [pc, #224]	@ (800500c <UART_SetConfig+0x4e4>)
 8004f2a:	fba3 2301 	umull	r2, r3, r3, r1
 8004f2e:	095b      	lsrs	r3, r3, #5
 8004f30:	2264      	movs	r2, #100	@ 0x64
 8004f32:	fb02 f303 	mul.w	r3, r2, r3
 8004f36:	1acb      	subs	r3, r1, r3
 8004f38:	011b      	lsls	r3, r3, #4
 8004f3a:	3332      	adds	r3, #50	@ 0x32
 8004f3c:	4a33      	ldr	r2, [pc, #204]	@ (800500c <UART_SetConfig+0x4e4>)
 8004f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f42:	095b      	lsrs	r3, r3, #5
 8004f44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f48:	441c      	add	r4, r3
 8004f4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f4e:	2200      	movs	r2, #0
 8004f50:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f52:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f54:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004f58:	4642      	mov	r2, r8
 8004f5a:	464b      	mov	r3, r9
 8004f5c:	1891      	adds	r1, r2, r2
 8004f5e:	60b9      	str	r1, [r7, #8]
 8004f60:	415b      	adcs	r3, r3
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f68:	4641      	mov	r1, r8
 8004f6a:	1851      	adds	r1, r2, r1
 8004f6c:	6039      	str	r1, [r7, #0]
 8004f6e:	4649      	mov	r1, r9
 8004f70:	414b      	adcs	r3, r1
 8004f72:	607b      	str	r3, [r7, #4]
 8004f74:	f04f 0200 	mov.w	r2, #0
 8004f78:	f04f 0300 	mov.w	r3, #0
 8004f7c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f80:	4659      	mov	r1, fp
 8004f82:	00cb      	lsls	r3, r1, #3
 8004f84:	4651      	mov	r1, sl
 8004f86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f8a:	4651      	mov	r1, sl
 8004f8c:	00ca      	lsls	r2, r1, #3
 8004f8e:	4610      	mov	r0, r2
 8004f90:	4619      	mov	r1, r3
 8004f92:	4603      	mov	r3, r0
 8004f94:	4642      	mov	r2, r8
 8004f96:	189b      	adds	r3, r3, r2
 8004f98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f9a:	464b      	mov	r3, r9
 8004f9c:	460a      	mov	r2, r1
 8004f9e:	eb42 0303 	adc.w	r3, r2, r3
 8004fa2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fae:	667a      	str	r2, [r7, #100]	@ 0x64
 8004fb0:	f04f 0200 	mov.w	r2, #0
 8004fb4:	f04f 0300 	mov.w	r3, #0
 8004fb8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004fbc:	4649      	mov	r1, r9
 8004fbe:	008b      	lsls	r3, r1, #2
 8004fc0:	4641      	mov	r1, r8
 8004fc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fc6:	4641      	mov	r1, r8
 8004fc8:	008a      	lsls	r2, r1, #2
 8004fca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004fce:	f7fb fd2f 	bl	8000a30 <__aeabi_uldivmod>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800500c <UART_SetConfig+0x4e4>)
 8004fd8:	fba3 1302 	umull	r1, r3, r3, r2
 8004fdc:	095b      	lsrs	r3, r3, #5
 8004fde:	2164      	movs	r1, #100	@ 0x64
 8004fe0:	fb01 f303 	mul.w	r3, r1, r3
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	011b      	lsls	r3, r3, #4
 8004fe8:	3332      	adds	r3, #50	@ 0x32
 8004fea:	4a08      	ldr	r2, [pc, #32]	@ (800500c <UART_SetConfig+0x4e4>)
 8004fec:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff0:	095b      	lsrs	r3, r3, #5
 8004ff2:	f003 020f 	and.w	r2, r3, #15
 8004ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4422      	add	r2, r4
 8004ffe:	609a      	str	r2, [r3, #8]
}
 8005000:	bf00      	nop
 8005002:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005006:	46bd      	mov	sp, r7
 8005008:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800500c:	51eb851f 	.word	0x51eb851f

08005010 <memset>:
 8005010:	4402      	add	r2, r0
 8005012:	4603      	mov	r3, r0
 8005014:	4293      	cmp	r3, r2
 8005016:	d100      	bne.n	800501a <memset+0xa>
 8005018:	4770      	bx	lr
 800501a:	f803 1b01 	strb.w	r1, [r3], #1
 800501e:	e7f9      	b.n	8005014 <memset+0x4>

08005020 <__libc_init_array>:
 8005020:	b570      	push	{r4, r5, r6, lr}
 8005022:	4d0d      	ldr	r5, [pc, #52]	@ (8005058 <__libc_init_array+0x38>)
 8005024:	4c0d      	ldr	r4, [pc, #52]	@ (800505c <__libc_init_array+0x3c>)
 8005026:	1b64      	subs	r4, r4, r5
 8005028:	10a4      	asrs	r4, r4, #2
 800502a:	2600      	movs	r6, #0
 800502c:	42a6      	cmp	r6, r4
 800502e:	d109      	bne.n	8005044 <__libc_init_array+0x24>
 8005030:	4d0b      	ldr	r5, [pc, #44]	@ (8005060 <__libc_init_array+0x40>)
 8005032:	4c0c      	ldr	r4, [pc, #48]	@ (8005064 <__libc_init_array+0x44>)
 8005034:	f000 f818 	bl	8005068 <_init>
 8005038:	1b64      	subs	r4, r4, r5
 800503a:	10a4      	asrs	r4, r4, #2
 800503c:	2600      	movs	r6, #0
 800503e:	42a6      	cmp	r6, r4
 8005040:	d105      	bne.n	800504e <__libc_init_array+0x2e>
 8005042:	bd70      	pop	{r4, r5, r6, pc}
 8005044:	f855 3b04 	ldr.w	r3, [r5], #4
 8005048:	4798      	blx	r3
 800504a:	3601      	adds	r6, #1
 800504c:	e7ee      	b.n	800502c <__libc_init_array+0xc>
 800504e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005052:	4798      	blx	r3
 8005054:	3601      	adds	r6, #1
 8005056:	e7f2      	b.n	800503e <__libc_init_array+0x1e>
 8005058:	080050a8 	.word	0x080050a8
 800505c:	080050a8 	.word	0x080050a8
 8005060:	080050a8 	.word	0x080050a8
 8005064:	080050ac 	.word	0x080050ac

08005068 <_init>:
 8005068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800506a:	bf00      	nop
 800506c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800506e:	bc08      	pop	{r3}
 8005070:	469e      	mov	lr, r3
 8005072:	4770      	bx	lr

08005074 <_fini>:
 8005074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005076:	bf00      	nop
 8005078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800507a:	bc08      	pop	{r3}
 800507c:	469e      	mov	lr, r3
 800507e:	4770      	bx	lr
