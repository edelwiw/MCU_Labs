
Lab8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bbc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08007d8c  08007d8c  00008d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f58  08007f58  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  08007f58  08007f58  00008f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f60  08007f60  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f60  08007f60  00008f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f64  08007f64  00008f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007f68  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000464  20000068  08007fd0  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  08007fd0  000094cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a56  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002532  00000000  00000000  0001baee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  0001e020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e2a  00000000  00000000  0001f1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021f73  00000000  00000000  00020012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000151a3  00000000  00000000  00041f85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3893  00000000  00000000  00057128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012a9bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005264  00000000  00000000  0012aa00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0012fc64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007d74 	.word	0x08007d74

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08007d74 	.word	0x08007d74

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f000 ffcc 	bl	8001550 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f842 	bl	8000640 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f990 	bl	80008e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005c0:	f000 f95e 	bl	8000880 <MX_DMA_Init>
  MX_SPI2_Init();
 80005c4:	f000 f8d6 	bl	8000774 <MX_SPI2_Init>
  MX_TIM10_Init();
 80005c8:	f000 f90c 	bl	80007e4 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 80005cc:	f000 f92e 	bl	800082c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005d0:	f000 f8a2 	bl	8000718 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim10); 
 80005d4:	4813      	ldr	r0, [pc, #76]	@ (8000624 <main+0x74>)
 80005d6:	f005 fcb3 	bl	8005f40 <HAL_TIM_Base_Start_IT>


  HAL_UART_Receive_IT(&huart2, (uint8_t *)&read_buffer[read_index++], 1);
 80005da:	4b13      	ldr	r3, [pc, #76]	@ (8000628 <main+0x78>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	1c5a      	adds	r2, r3, #1
 80005e0:	b2d1      	uxtb	r1, r2
 80005e2:	4a11      	ldr	r2, [pc, #68]	@ (8000628 <main+0x78>)
 80005e4:	7011      	strb	r1, [r2, #0]
 80005e6:	461a      	mov	r2, r3
 80005e8:	4b10      	ldr	r3, [pc, #64]	@ (800062c <main+0x7c>)
 80005ea:	4413      	add	r3, r2
 80005ec:	2201      	movs	r2, #1
 80005ee:	4619      	mov	r1, r3
 80005f0:	480f      	ldr	r0, [pc, #60]	@ (8000630 <main+0x80>)
 80005f2:	f005 ff73 	bl	80064dc <HAL_UART_Receive_IT>
    // sprintf(buffer, "date: %02d.%02d.%02d, time: %02d:%02d:%02d\n", decoded_time.date, decoded_time.month, decoded_time.year, decoded_time.hours, decoded_time.minutes, decoded_time.seconds);
    // HAL_UART_Transmit_IT(&huart2, (uint8_t *)buffer, strlen(buffer)); 

    // HAL_Delay(1000);

    if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET){
 80005f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005fa:	480e      	ldr	r0, [pc, #56]	@ (8000634 <main+0x84>)
 80005fc:	f001 fedc 	bl	80023b8 <HAL_GPIO_ReadPin>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d102      	bne.n	800060c <main+0x5c>
      display_flag = 0;
 8000606:	4b0c      	ldr	r3, [pc, #48]	@ (8000638 <main+0x88>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]
    }
    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == GPIO_PIN_RESET){
 800060c:	2104      	movs	r1, #4
 800060e:	480b      	ldr	r0, [pc, #44]	@ (800063c <main+0x8c>)
 8000610:	f001 fed2 	bl	80023b8 <HAL_GPIO_ReadPin>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1ed      	bne.n	80005f6 <main+0x46>
      display_flag = 1;
 800061a:	4b07      	ldr	r3, [pc, #28]	@ (8000638 <main+0x88>)
 800061c:	2201      	movs	r2, #1
 800061e:	701a      	strb	r2, [r3, #0]
    if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET){
 8000620:	e7e9      	b.n	80005f6 <main+0x46>
 8000622:	bf00      	nop
 8000624:	20000260 	.word	0x20000260
 8000628:	2000030f 	.word	0x2000030f
 800062c:	20000304 	.word	0x20000304
 8000630:	200002a8 	.word	0x200002a8
 8000634:	40020800 	.word	0x40020800
 8000638:	20000310 	.word	0x20000310
 800063c:	40020c00 	.word	0x40020c00

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	@ 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 031c 	add.w	r3, r7, #28
 800064a:	2234      	movs	r2, #52	@ 0x34
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f006 ff10 	bl	8007474 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 0308 	add.w	r3, r7, #8
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	4b29      	ldr	r3, [pc, #164]	@ (8000710 <SystemClock_Config+0xd0>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800066c:	4a28      	ldr	r2, [pc, #160]	@ (8000710 <SystemClock_Config+0xd0>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	@ 0x40
 8000674:	4b26      	ldr	r3, [pc, #152]	@ (8000710 <SystemClock_Config+0xd0>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000680:	2300      	movs	r3, #0
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	4b23      	ldr	r3, [pc, #140]	@ (8000714 <SystemClock_Config+0xd4>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800068c:	4a21      	ldr	r2, [pc, #132]	@ (8000714 <SystemClock_Config+0xd4>)
 800068e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b1f      	ldr	r3, [pc, #124]	@ (8000714 <SystemClock_Config+0xd4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800069c:	603b      	str	r3, [r7, #0]
 800069e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a0:	2302      	movs	r3, #2
 80006a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a8:	2310      	movs	r3, #16
 80006aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	2302      	movs	r3, #2
 80006ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b4:	2308      	movs	r3, #8
 80006b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 80006b8:	2350      	movs	r3, #80	@ 0x50
 80006ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4618      	mov	r0, r3
 80006ce:	f004 fd93 	bl	80051f8 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006d8:	f000 fc72 	bl	8000fc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e0:	2302      	movs	r3, #2
 80006e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f2:	f107 0308 	add.w	r3, r7, #8
 80006f6:	2102      	movs	r1, #2
 80006f8:	4618      	mov	r0, r3
 80006fa:	f004 fab9 	bl	8004c70 <HAL_RCC_ClockConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000704:	f000 fc5c 	bl	8000fc0 <Error_Handler>
  }
}
 8000708:	bf00      	nop
 800070a:	3750      	adds	r7, #80	@ 0x50
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800071c:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <MX_I2C1_Init+0x50>)
 800071e:	4a13      	ldr	r2, [pc, #76]	@ (800076c <MX_I2C1_Init+0x54>)
 8000720:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000722:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <MX_I2C1_Init+0x50>)
 8000724:	4a12      	ldr	r2, [pc, #72]	@ (8000770 <MX_I2C1_Init+0x58>)
 8000726:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000728:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <MX_I2C1_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800072e:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <MX_I2C1_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000734:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <MX_I2C1_Init+0x50>)
 8000736:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800073a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800073c:	4b0a      	ldr	r3, [pc, #40]	@ (8000768 <MX_I2C1_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000742:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <MX_I2C1_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000748:	4b07      	ldr	r3, [pc, #28]	@ (8000768 <MX_I2C1_Init+0x50>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800074e:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <MX_I2C1_Init+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000754:	4804      	ldr	r0, [pc, #16]	@ (8000768 <MX_I2C1_Init+0x50>)
 8000756:	f001 fe61 	bl	800241c <HAL_I2C_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000760:	f000 fc2e 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000094 	.word	0x20000094
 800076c:	40005400 	.word	0x40005400
 8000770:	000186a0 	.word	0x000186a0

08000774 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */
  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000778:	4b18      	ldr	r3, [pc, #96]	@ (80007dc <MX_SPI2_Init+0x68>)
 800077a:	4a19      	ldr	r2, [pc, #100]	@ (80007e0 <MX_SPI2_Init+0x6c>)
 800077c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800077e:	4b17      	ldr	r3, [pc, #92]	@ (80007dc <MX_SPI2_Init+0x68>)
 8000780:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000784:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000786:	4b15      	ldr	r3, [pc, #84]	@ (80007dc <MX_SPI2_Init+0x68>)
 8000788:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800078c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800078e:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <MX_SPI2_Init+0x68>)
 8000790:	2200      	movs	r2, #0
 8000792:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000794:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <MX_SPI2_Init+0x68>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800079a:	4b10      	ldr	r3, [pc, #64]	@ (80007dc <MX_SPI2_Init+0x68>)
 800079c:	2200      	movs	r2, #0
 800079e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007a0:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <MX_SPI2_Init+0x68>)
 80007a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007a6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <MX_SPI2_Init+0x68>)
 80007aa:	2210      	movs	r2, #16
 80007ac:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <MX_SPI2_Init+0x68>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b4:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_SPI2_Init+0x68>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <MX_SPI2_Init+0x68>)
 80007bc:	2200      	movs	r2, #0
 80007be:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <MX_SPI2_Init+0x68>)
 80007c2:	220a      	movs	r2, #10
 80007c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	@ (80007dc <MX_SPI2_Init+0x68>)
 80007c8:	f004 ffb4 	bl	8005734 <HAL_SPI_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80007d2:	f000 fbf5 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  /* USER CODE END SPI2_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200001a8 	.word	0x200001a8
 80007e0:	40003800 	.word	0x40003800

080007e4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM10_Init 0 */
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */
  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80007e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <MX_TIM10_Init+0x40>)
 80007ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000828 <MX_TIM10_Init+0x44>)
 80007ec:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 79;
 80007ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000824 <MX_TIM10_Init+0x40>)
 80007f0:	224f      	movs	r2, #79	@ 0x4f
 80007f2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000824 <MX_TIM10_Init+0x40>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 80007fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000824 <MX_TIM10_Init+0x40>)
 80007fc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000800:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000802:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <MX_TIM10_Init+0x40>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000808:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <MX_TIM10_Init+0x40>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	@ (8000824 <MX_TIM10_Init+0x40>)
 8000810:	f005 fb46 	bl	8005ea0 <HAL_TIM_Base_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800081a:	f000 fbd1 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */
  /* USER CODE END TIM10_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000260 	.word	0x20000260
 8000828:	40014400 	.word	0x40014400

0800082c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000830:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <MX_USART2_UART_Init+0x4c>)
 8000832:	4a12      	ldr	r2, [pc, #72]	@ (800087c <MX_USART2_UART_Init+0x50>)
 8000834:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000836:	4b10      	ldr	r3, [pc, #64]	@ (8000878 <MX_USART2_UART_Init+0x4c>)
 8000838:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800083c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800083e:	4b0e      	ldr	r3, [pc, #56]	@ (8000878 <MX_USART2_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000844:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <MX_USART2_UART_Init+0x4c>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	@ (8000878 <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000850:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <MX_USART2_UART_Init+0x4c>)
 8000852:	220c      	movs	r2, #12
 8000854:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000856:	4b08      	ldr	r3, [pc, #32]	@ (8000878 <MX_USART2_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800085c:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <MX_USART2_UART_Init+0x4c>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	@ (8000878 <MX_USART2_UART_Init+0x4c>)
 8000864:	f005 fdb4 	bl	80063d0 <HAL_UART_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800086e:	f000 fba7 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200002a8 	.word	0x200002a8
 800087c:	40004400 	.word	0x40004400

08000880 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <MX_DMA_Init+0x5c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a13      	ldr	r2, [pc, #76]	@ (80008dc <MX_DMA_Init+0x5c>)
 8000890:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <MX_DMA_Init+0x5c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2100      	movs	r1, #0
 80008a6:	200b      	movs	r0, #11
 80008a8:	f000 ff9f 	bl	80017ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80008ac:	200b      	movs	r0, #11
 80008ae:	f000 ffb8 	bl	8001822 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2100      	movs	r1, #0
 80008b6:	200f      	movs	r0, #15
 80008b8:	f000 ff97 	bl	80017ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80008bc:	200f      	movs	r0, #15
 80008be:	f000 ffb0 	bl	8001822 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2100      	movs	r1, #0
 80008c6:	2011      	movs	r0, #17
 80008c8:	f000 ff8f 	bl	80017ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80008cc:	2011      	movs	r0, #17
 80008ce:	f000 ffa8 	bl	8001822 <HAL_NVIC_EnableIRQ>

}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800

080008e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	@ 0x28
 80008e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
 80008fa:	4b34      	ldr	r3, [pc, #208]	@ (80009cc <MX_GPIO_Init+0xec>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a33      	ldr	r2, [pc, #204]	@ (80009cc <MX_GPIO_Init+0xec>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b31      	ldr	r3, [pc, #196]	@ (80009cc <MX_GPIO_Init+0xec>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	4b2d      	ldr	r3, [pc, #180]	@ (80009cc <MX_GPIO_Init+0xec>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a2c      	ldr	r2, [pc, #176]	@ (80009cc <MX_GPIO_Init+0xec>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b2a      	ldr	r3, [pc, #168]	@ (80009cc <MX_GPIO_Init+0xec>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	4b26      	ldr	r3, [pc, #152]	@ (80009cc <MX_GPIO_Init+0xec>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a25      	ldr	r2, [pc, #148]	@ (80009cc <MX_GPIO_Init+0xec>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b23      	ldr	r3, [pc, #140]	@ (80009cc <MX_GPIO_Init+0xec>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b1f      	ldr	r3, [pc, #124]	@ (80009cc <MX_GPIO_Init+0xec>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a1e      	ldr	r2, [pc, #120]	@ (80009cc <MX_GPIO_Init+0xec>)
 8000954:	f043 0308 	orr.w	r3, r3, #8
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b1c      	ldr	r3, [pc, #112]	@ (80009cc <MX_GPIO_Init+0xec>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f003 0308 	and.w	r3, r3, #8
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|SPI2_SS_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800096c:	4818      	ldr	r0, [pc, #96]	@ (80009d0 <MX_GPIO_Init+0xf0>)
 800096e:	f001 fd3b 	bl	80023e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000972:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000978:	2300      	movs	r3, #0
 800097a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4619      	mov	r1, r3
 8000986:	4813      	ldr	r0, [pc, #76]	@ (80009d4 <MX_GPIO_Init+0xf4>)
 8000988:	f001 fb82 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin SPI2_SS_Pin */
  GPIO_InitStruct.Pin = LED_Pin|SPI2_SS_Pin;
 800098c:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8000990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	480a      	ldr	r0, [pc, #40]	@ (80009d0 <MX_GPIO_Init+0xf0>)
 80009a6:	f001 fb73 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009aa:	2304      	movs	r3, #4
 80009ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	4619      	mov	r1, r3
 80009bc:	4806      	ldr	r0, [pc, #24]	@ (80009d8 <MX_GPIO_Init+0xf8>)
 80009be:	f001 fb67 	bl	8002090 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c2:	bf00      	nop
 80009c4:	3728      	adds	r7, #40	@ 0x28
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40020000 	.word	0x40020000
 80009d4:	40020800 	.word	0x40020800
 80009d8:	40020c00 	.word	0x40020c00

080009dc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// timer 10 interrupt handler
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM10)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a22      	ldr	r2, [pc, #136]	@ (8000a74 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d13e      	bne.n	8000a6c <HAL_TIM_PeriodElapsedCallback+0x90>
  { 
    timer++;
 80009ee:	4b22      	ldr	r3, [pc, #136]	@ (8000a78 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	3301      	adds	r3, #1
 80009f4:	4a20      	ldr	r2, [pc, #128]	@ (8000a78 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80009f6:	6013      	str	r3, [r2, #0]
    if(timer % 100 == 0){
 80009f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a78 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a7c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80009fe:	fba3 1302 	umull	r1, r3, r3, r2
 8000a02:	095b      	lsrs	r3, r3, #5
 8000a04:	2164      	movs	r1, #100	@ 0x64
 8000a06:	fb01 f303 	mul.w	r3, r1, r3
 8000a0a:	1ad3      	subs	r3, r2, r3
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d101      	bne.n	8000a14 <HAL_TIM_PeriodElapsedCallback+0x38>
      read_time();
 8000a10:	f000 f840 	bl	8000a94 <read_time>
    }
   
    // update display
    HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a1a:	4819      	ldr	r0, [pc, #100]	@ (8000a80 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000a1c:	f001 fce4 	bl	80023e8 <HAL_GPIO_WritePin>
    uint8_t data = display_buffer[current_digit];
 8000a20:	4b18      	ldr	r3, [pc, #96]	@ (8000a84 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	4b18      	ldr	r3, [pc, #96]	@ (8000a88 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000a28:	5c9b      	ldrb	r3, [r3, r2]
 8000a2a:	73fb      	strb	r3, [r7, #15]
    uint8_t digit = ~(1 << current_digit);
 8000a2c:	4b15      	ldr	r3, [pc, #84]	@ (8000a84 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	461a      	mov	r2, r3
 8000a32:	2301      	movs	r3, #1
 8000a34:	4093      	lsls	r3, r2
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	43db      	mvns	r3, r3
 8000a3a:	73bb      	strb	r3, [r7, #14]
    send_buffer[0] = data;
 8000a3c:	4a13      	ldr	r2, [pc, #76]	@ (8000a8c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
 8000a40:	7013      	strb	r3, [r2, #0]
    send_buffer[1] = digit;
 8000a42:	4a12      	ldr	r2, [pc, #72]	@ (8000a8c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000a44:	7bbb      	ldrb	r3, [r7, #14]
 8000a46:	7053      	strb	r3, [r2, #1]
    HAL_SPI_Transmit_DMA(&hspi2, send_buffer, 2);
 8000a48:	2202      	movs	r2, #2
 8000a4a:	4910      	ldr	r1, [pc, #64]	@ (8000a8c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000a4c:	4810      	ldr	r0, [pc, #64]	@ (8000a90 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000a4e:	f004 fefb 	bl	8005848 <HAL_SPI_Transmit_DMA>
    current_digit = (current_digit + 1) % NUM_INDICATORS;
 8000a52:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	3301      	adds	r3, #1
 8000a58:	425a      	negs	r2, r3
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	f002 0207 	and.w	r2, r2, #7
 8000a62:	bf58      	it	pl
 8000a64:	4253      	negpl	r3, r2
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000a6a:	701a      	strb	r2, [r3, #0]
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40014400 	.word	0x40014400
 8000a78:	200002f0 	.word	0x200002f0
 8000a7c:	51eb851f 	.word	0x51eb851f
 8000a80:	40020000 	.word	0x40020000
 8000a84:	200002fc 	.word	0x200002fc
 8000a88:	200002f4 	.word	0x200002f4
 8000a8c:	20000300 	.word	0x20000300
 8000a90:	200001a8 	.word	0x200001a8

08000a94 <read_time>:

void read_time(void){
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af02      	add	r7, sp, #8
    HAL_I2C_Mem_Read_DMA(&hi2c1, DS3231_ADDR << 1, SECONDS, 1, &get_time, sizeof(struct time_t));
 8000a9a:	2307      	movs	r3, #7
 8000a9c:	9301      	str	r3, [sp, #4]
 8000a9e:	4b05      	ldr	r3, [pc, #20]	@ (8000ab4 <read_time+0x20>)
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	21d0      	movs	r1, #208	@ 0xd0
 8000aa8:	4803      	ldr	r0, [pc, #12]	@ (8000ab8 <read_time+0x24>)
 8000aaa:	f001 ff6f 	bl	800298c <HAL_I2C_Mem_Read_DMA>
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000084 	.word	0x20000084
 8000ab8:	20000094 	.word	0x20000094

08000abc <HAL_I2C_MemRxCpltCallback>:

// i2c 1 interrupt handler
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == I2C1){
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a06      	ldr	r2, [pc, #24]	@ (8000ae4 <HAL_I2C_MemRxCpltCallback+0x28>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d106      	bne.n	8000adc <HAL_I2C_MemRxCpltCallback+0x20>
    decode_time(&decoded_time, &get_time);
 8000ace:	4906      	ldr	r1, [pc, #24]	@ (8000ae8 <HAL_I2C_MemRxCpltCallback+0x2c>)
 8000ad0:	4806      	ldr	r0, [pc, #24]	@ (8000aec <HAL_I2C_MemRxCpltCallback+0x30>)
 8000ad2:	f000 f9fb 	bl	8000ecc <decode_time>
    display(&decoded_time);
 8000ad6:	4805      	ldr	r0, [pc, #20]	@ (8000aec <HAL_I2C_MemRxCpltCallback+0x30>)
 8000ad8:	f000 f98c 	bl	8000df4 <display>
  }
}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40005400 	.word	0x40005400
 8000ae8:	20000084 	.word	0x20000084
 8000aec:	2000008c 	.word	0x2000008c

08000af0 <HAL_SPI_TxCpltCallback>:

// spi 2 interrupt handler
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8000af8:	2201      	movs	r2, #1
 8000afa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000afe:	4803      	ldr	r0, [pc, #12]	@ (8000b0c <HAL_SPI_TxCpltCallback+0x1c>)
 8000b00:	f001 fc72 	bl	80023e8 <HAL_GPIO_WritePin>
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40020000 	.word	0x40020000

08000b10 <HAL_UART_RxCpltCallback>:


// uart 2 interrupt handler
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a17      	ldr	r2, [pc, #92]	@ (8000b7c <HAL_UART_RxCpltCallback+0x6c>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d127      	bne.n	8000b72 <HAL_UART_RxCpltCallback+0x62>
  {
    if(read_buffer[read_index - 1] == '\n' || read_buffer[read_index - 1] == '\r') {
 8000b22:	4b17      	ldr	r3, [pc, #92]	@ (8000b80 <HAL_UART_RxCpltCallback+0x70>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	4a16      	ldr	r2, [pc, #88]	@ (8000b84 <HAL_UART_RxCpltCallback+0x74>)
 8000b2a:	5cd3      	ldrb	r3, [r2, r3]
 8000b2c:	2b0a      	cmp	r3, #10
 8000b2e:	d006      	beq.n	8000b3e <HAL_UART_RxCpltCallback+0x2e>
 8000b30:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <HAL_UART_RxCpltCallback+0x70>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	3b01      	subs	r3, #1
 8000b36:	4a13      	ldr	r2, [pc, #76]	@ (8000b84 <HAL_UART_RxCpltCallback+0x74>)
 8000b38:	5cd3      	ldrb	r3, [r2, r3]
 8000b3a:	2b0d      	cmp	r3, #13
 8000b3c:	d10b      	bne.n	8000b56 <HAL_UART_RxCpltCallback+0x46>
      read_buffer[read_index - 1] = '\0';
 8000b3e:	4b10      	ldr	r3, [pc, #64]	@ (8000b80 <HAL_UART_RxCpltCallback+0x70>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	4a0f      	ldr	r2, [pc, #60]	@ (8000b84 <HAL_UART_RxCpltCallback+0x74>)
 8000b46:	2100      	movs	r1, #0
 8000b48:	54d1      	strb	r1, [r2, r3]

    process_command(read_buffer);
 8000b4a:	480e      	ldr	r0, [pc, #56]	@ (8000b84 <HAL_UART_RxCpltCallback+0x74>)
 8000b4c:	f000 f81e 	bl	8000b8c <process_command>
    read_index = 0;
 8000b50:	4b0b      	ldr	r3, [pc, #44]	@ (8000b80 <HAL_UART_RxCpltCallback+0x70>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart2, (uint8_t *)&read_buffer[read_index++], 1);
 8000b56:	4b0a      	ldr	r3, [pc, #40]	@ (8000b80 <HAL_UART_RxCpltCallback+0x70>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	1c5a      	adds	r2, r3, #1
 8000b5c:	b2d1      	uxtb	r1, r2
 8000b5e:	4a08      	ldr	r2, [pc, #32]	@ (8000b80 <HAL_UART_RxCpltCallback+0x70>)
 8000b60:	7011      	strb	r1, [r2, #0]
 8000b62:	461a      	mov	r2, r3
 8000b64:	4b07      	ldr	r3, [pc, #28]	@ (8000b84 <HAL_UART_RxCpltCallback+0x74>)
 8000b66:	4413      	add	r3, r2
 8000b68:	2201      	movs	r2, #1
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4806      	ldr	r0, [pc, #24]	@ (8000b88 <HAL_UART_RxCpltCallback+0x78>)
 8000b6e:	f005 fcb5 	bl	80064dc <HAL_UART_Receive_IT>
  }
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40004400 	.word	0x40004400
 8000b80:	2000030f 	.word	0x2000030f
 8000b84:	20000304 	.word	0x20000304
 8000b88:	200002a8 	.word	0x200002a8

08000b8c <process_command>:

uint8_t addr;
char buffer[100];
uint8_t arg;

void process_command(char *command){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af02      	add	r7, sp, #8
 8000b92:	6078      	str	r0, [r7, #4]
  arg = atoi(&command[1]);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3301      	adds	r3, #1
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f006 fbc3 	bl	8007324 <atoi>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4b88      	ldr	r3, [pc, #544]	@ (8000dc4 <process_command+0x238>)
 8000ba4:	701a      	strb	r2, [r3, #0]
  switch (command[0]){
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	3b44      	subs	r3, #68	@ 0x44
 8000bac:	2b2f      	cmp	r3, #47	@ 0x2f
 8000bae:	f200 80f9 	bhi.w	8000da4 <process_command+0x218>
 8000bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8000bb8 <process_command+0x2c>)
 8000bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bb8:	08000d1b 	.word	0x08000d1b
 8000bbc:	08000da5 	.word	0x08000da5
 8000bc0:	08000da5 	.word	0x08000da5
 8000bc4:	08000da5 	.word	0x08000da5
 8000bc8:	08000da5 	.word	0x08000da5
 8000bcc:	08000da5 	.word	0x08000da5
 8000bd0:	08000da5 	.word	0x08000da5
 8000bd4:	08000da5 	.word	0x08000da5
 8000bd8:	08000da5 	.word	0x08000da5
 8000bdc:	08000cf5 	.word	0x08000cf5
 8000be0:	08000da5 	.word	0x08000da5
 8000be4:	08000da5 	.word	0x08000da5
 8000be8:	08000da5 	.word	0x08000da5
 8000bec:	08000da5 	.word	0x08000da5
 8000bf0:	08000da5 	.word	0x08000da5
 8000bf4:	08000da5 	.word	0x08000da5
 8000bf8:	08000da5 	.word	0x08000da5
 8000bfc:	08000da5 	.word	0x08000da5
 8000c00:	08000da5 	.word	0x08000da5
 8000c04:	08000da5 	.word	0x08000da5
 8000c08:	08000da5 	.word	0x08000da5
 8000c0c:	08000cd7 	.word	0x08000cd7
 8000c10:	08000da5 	.word	0x08000da5
 8000c14:	08000da5 	.word	0x08000da5
 8000c18:	08000da5 	.word	0x08000da5
 8000c1c:	08000da5 	.word	0x08000da5
 8000c20:	08000da5 	.word	0x08000da5
 8000c24:	08000da5 	.word	0x08000da5
 8000c28:	08000da5 	.word	0x08000da5
 8000c2c:	08000da5 	.word	0x08000da5
 8000c30:	08000da5 	.word	0x08000da5
 8000c34:	08000da5 	.word	0x08000da5
 8000c38:	08000da5 	.word	0x08000da5
 8000c3c:	08000da5 	.word	0x08000da5
 8000c40:	08000da5 	.word	0x08000da5
 8000c44:	08000da5 	.word	0x08000da5
 8000c48:	08000c79 	.word	0x08000c79
 8000c4c:	08000da5 	.word	0x08000da5
 8000c50:	08000da5 	.word	0x08000da5
 8000c54:	08000da5 	.word	0x08000da5
 8000c58:	08000da5 	.word	0x08000da5
 8000c5c:	08000c99 	.word	0x08000c99
 8000c60:	08000da5 	.word	0x08000da5
 8000c64:	08000da5 	.word	0x08000da5
 8000c68:	08000da5 	.word	0x08000da5
 8000c6c:	08000da5 	.word	0x08000da5
 8000c70:	08000da5 	.word	0x08000da5
 8000c74:	08000cb9 	.word	0x08000cb9
  case 'h':
    // set hours
    if(arg > 23 || arg < 0){
 8000c78:	4b52      	ldr	r3, [pc, #328]	@ (8000dc4 <process_command+0x238>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b17      	cmp	r3, #23
 8000c7e:	f200 8093 	bhi.w	8000da8 <process_command+0x21c>
      return;
    }
    addr = HOURS;
 8000c82:	4b51      	ldr	r3, [pc, #324]	@ (8000dc8 <process_command+0x23c>)
 8000c84:	2202      	movs	r2, #2
 8000c86:	701a      	strb	r2, [r3, #0]
    sprintf(buffer, "set hours: %d\n", arg);
 8000c88:	4b4e      	ldr	r3, [pc, #312]	@ (8000dc4 <process_command+0x238>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	494f      	ldr	r1, [pc, #316]	@ (8000dcc <process_command+0x240>)
 8000c90:	484f      	ldr	r0, [pc, #316]	@ (8000dd0 <process_command+0x244>)
 8000c92:	f006 fb4b 	bl	800732c <siprintf>
    break;
 8000c96:	e053      	b.n	8000d40 <process_command+0x1b4>
  case 'm':
    // set minutes
    if(arg > 59 || arg < 0){
 8000c98:	4b4a      	ldr	r3, [pc, #296]	@ (8000dc4 <process_command+0x238>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b3b      	cmp	r3, #59	@ 0x3b
 8000c9e:	f200 8085 	bhi.w	8000dac <process_command+0x220>
      return;
    }
    addr = MINUTES;
 8000ca2:	4b49      	ldr	r3, [pc, #292]	@ (8000dc8 <process_command+0x23c>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	701a      	strb	r2, [r3, #0]
    sprintf(buffer, "set minutes: %d\n", arg);
 8000ca8:	4b46      	ldr	r3, [pc, #280]	@ (8000dc4 <process_command+0x238>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4949      	ldr	r1, [pc, #292]	@ (8000dd4 <process_command+0x248>)
 8000cb0:	4847      	ldr	r0, [pc, #284]	@ (8000dd0 <process_command+0x244>)
 8000cb2:	f006 fb3b 	bl	800732c <siprintf>
    break;
 8000cb6:	e043      	b.n	8000d40 <process_command+0x1b4>
  case 's':
    // set seconds
    if(arg > 59 || arg < 0){
 8000cb8:	4b42      	ldr	r3, [pc, #264]	@ (8000dc4 <process_command+0x238>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b3b      	cmp	r3, #59	@ 0x3b
 8000cbe:	d877      	bhi.n	8000db0 <process_command+0x224>
      return;
    }
    addr = SECONDS;
 8000cc0:	4b41      	ldr	r3, [pc, #260]	@ (8000dc8 <process_command+0x23c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
    sprintf(buffer, "set seconds: %d\n", arg);
 8000cc6:	4b3f      	ldr	r3, [pc, #252]	@ (8000dc4 <process_command+0x238>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	4942      	ldr	r1, [pc, #264]	@ (8000dd8 <process_command+0x24c>)
 8000cce:	4840      	ldr	r0, [pc, #256]	@ (8000dd0 <process_command+0x244>)
 8000cd0:	f006 fb2c 	bl	800732c <siprintf>
    break;
 8000cd4:	e034      	b.n	8000d40 <process_command+0x1b4>
  
  case 'Y':
    // set year
    if(arg > 99 || arg < 0){
 8000cd6:	4b3b      	ldr	r3, [pc, #236]	@ (8000dc4 <process_command+0x238>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b63      	cmp	r3, #99	@ 0x63
 8000cdc:	d86a      	bhi.n	8000db4 <process_command+0x228>
      return;
    }
    addr = YEAR;
 8000cde:	4b3a      	ldr	r3, [pc, #232]	@ (8000dc8 <process_command+0x23c>)
 8000ce0:	2206      	movs	r2, #6
 8000ce2:	701a      	strb	r2, [r3, #0]
    sprintf(buffer, "set year: %d\n", arg);
 8000ce4:	4b37      	ldr	r3, [pc, #220]	@ (8000dc4 <process_command+0x238>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	493c      	ldr	r1, [pc, #240]	@ (8000ddc <process_command+0x250>)
 8000cec:	4838      	ldr	r0, [pc, #224]	@ (8000dd0 <process_command+0x244>)
 8000cee:	f006 fb1d 	bl	800732c <siprintf>
    break;
 8000cf2:	e025      	b.n	8000d40 <process_command+0x1b4>
  case 'M':
    // set month
    if(arg > 12 || arg < 1){
 8000cf4:	4b33      	ldr	r3, [pc, #204]	@ (8000dc4 <process_command+0x238>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b0c      	cmp	r3, #12
 8000cfa:	d85d      	bhi.n	8000db8 <process_command+0x22c>
 8000cfc:	4b31      	ldr	r3, [pc, #196]	@ (8000dc4 <process_command+0x238>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d059      	beq.n	8000db8 <process_command+0x22c>
      return;
    }
    addr = MONTH;
 8000d04:	4b30      	ldr	r3, [pc, #192]	@ (8000dc8 <process_command+0x23c>)
 8000d06:	2205      	movs	r2, #5
 8000d08:	701a      	strb	r2, [r3, #0]
    sprintf(buffer, "set month: %d\n", arg);
 8000d0a:	4b2e      	ldr	r3, [pc, #184]	@ (8000dc4 <process_command+0x238>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	4933      	ldr	r1, [pc, #204]	@ (8000de0 <process_command+0x254>)
 8000d12:	482f      	ldr	r0, [pc, #188]	@ (8000dd0 <process_command+0x244>)
 8000d14:	f006 fb0a 	bl	800732c <siprintf>
    break;
 8000d18:	e012      	b.n	8000d40 <process_command+0x1b4>
  case 'D':
    // set date
    if(arg > 31 || arg < 1){
 8000d1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000dc4 <process_command+0x238>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b1f      	cmp	r3, #31
 8000d20:	d84c      	bhi.n	8000dbc <process_command+0x230>
 8000d22:	4b28      	ldr	r3, [pc, #160]	@ (8000dc4 <process_command+0x238>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d048      	beq.n	8000dbc <process_command+0x230>
      return;
    }
    addr = DATE;
 8000d2a:	4b27      	ldr	r3, [pc, #156]	@ (8000dc8 <process_command+0x23c>)
 8000d2c:	2204      	movs	r2, #4
 8000d2e:	701a      	strb	r2, [r3, #0]
    sprintf(buffer, "set date: %d\n", arg);
 8000d30:	4b24      	ldr	r3, [pc, #144]	@ (8000dc4 <process_command+0x238>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	492b      	ldr	r1, [pc, #172]	@ (8000de4 <process_command+0x258>)
 8000d38:	4825      	ldr	r0, [pc, #148]	@ (8000dd0 <process_command+0x244>)
 8000d3a:	f006 faf7 	bl	800732c <siprintf>
    break;
 8000d3e:	bf00      	nop
  
  default:
    return;
  }

  arg = ((arg / 10) << 4) | (arg % 10);
 8000d40:	4b20      	ldr	r3, [pc, #128]	@ (8000dc4 <process_command+0x238>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	4a28      	ldr	r2, [pc, #160]	@ (8000de8 <process_command+0x25c>)
 8000d46:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4a:	08db      	lsrs	r3, r3, #3
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	011b      	lsls	r3, r3, #4
 8000d50:	b258      	sxtb	r0, r3
 8000d52:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc4 <process_command+0x238>)
 8000d54:	781a      	ldrb	r2, [r3, #0]
 8000d56:	4b24      	ldr	r3, [pc, #144]	@ (8000de8 <process_command+0x25c>)
 8000d58:	fba3 1302 	umull	r1, r3, r3, r2
 8000d5c:	08d9      	lsrs	r1, r3, #3
 8000d5e:	460b      	mov	r3, r1
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	440b      	add	r3, r1
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	b25b      	sxtb	r3, r3
 8000d6c:	4303      	orrs	r3, r0
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4b14      	ldr	r3, [pc, #80]	@ (8000dc4 <process_command+0x238>)
 8000d74:	701a      	strb	r2, [r3, #0]

  HAL_UART_Transmit_IT(&huart2, (uint8_t *)buffer, strlen(buffer));
 8000d76:	4816      	ldr	r0, [pc, #88]	@ (8000dd0 <process_command+0x244>)
 8000d78:	f7ff fa4a 	bl	8000210 <strlen>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	461a      	mov	r2, r3
 8000d82:	4913      	ldr	r1, [pc, #76]	@ (8000dd0 <process_command+0x244>)
 8000d84:	4819      	ldr	r0, [pc, #100]	@ (8000dec <process_command+0x260>)
 8000d86:	f005 fb73 	bl	8006470 <HAL_UART_Transmit_IT>
  HAL_I2C_Mem_Write_DMA(&hi2c1, DS3231_ADDR << 1, addr, 1, &arg, 1);
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc8 <process_command+0x23c>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	2301      	movs	r3, #1
 8000d92:	9301      	str	r3, [sp, #4]
 8000d94:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc4 <process_command+0x238>)
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	2301      	movs	r3, #1
 8000d9a:	21d0      	movs	r1, #208	@ 0xd0
 8000d9c:	4814      	ldr	r0, [pc, #80]	@ (8000df0 <process_command+0x264>)
 8000d9e:	f001 fc97 	bl	80026d0 <HAL_I2C_Mem_Write_DMA>
 8000da2:	e00c      	b.n	8000dbe <process_command+0x232>
    return;
 8000da4:	bf00      	nop
 8000da6:	e00a      	b.n	8000dbe <process_command+0x232>
      return;
 8000da8:	bf00      	nop
 8000daa:	e008      	b.n	8000dbe <process_command+0x232>
      return;
 8000dac:	bf00      	nop
 8000dae:	e006      	b.n	8000dbe <process_command+0x232>
      return;
 8000db0:	bf00      	nop
 8000db2:	e004      	b.n	8000dbe <process_command+0x232>
      return;
 8000db4:	bf00      	nop
 8000db6:	e002      	b.n	8000dbe <process_command+0x232>
      return;
 8000db8:	bf00      	nop
 8000dba:	e000      	b.n	8000dbe <process_command+0x232>
      return;
 8000dbc:	bf00      	nop
}
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000378 	.word	0x20000378
 8000dc8:	20000311 	.word	0x20000311
 8000dcc:	08007d8c 	.word	0x08007d8c
 8000dd0:	20000314 	.word	0x20000314
 8000dd4:	08007d9c 	.word	0x08007d9c
 8000dd8:	08007db0 	.word	0x08007db0
 8000ddc:	08007dc4 	.word	0x08007dc4
 8000de0:	08007dd4 	.word	0x08007dd4
 8000de4:	08007de4 	.word	0x08007de4
 8000de8:	cccccccd 	.word	0xcccccccd
 8000dec:	200002a8 	.word	0x200002a8
 8000df0:	20000094 	.word	0x20000094

08000df4 <display>:

void display(struct time_t *decoded_time){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af02      	add	r7, sp, #8
 8000dfa:	6078      	str	r0, [r7, #4]
  char dig[NUM_INDICATORS + 1]; 

  if(display_flag){
 8000dfc:	4b2f      	ldr	r3, [pc, #188]	@ (8000ebc <display+0xc8>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d00f      	beq.n	8000e24 <display+0x30>
    sprintf(dig, "%02d%02d%02d", decoded_time->hours, decoded_time->minutes, decoded_time->seconds);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	789b      	ldrb	r3, [r3, #2]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	785b      	ldrb	r3, [r3, #1]
 8000e0e:	4619      	mov	r1, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	f107 0008 	add.w	r0, r7, #8
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	4928      	ldr	r1, [pc, #160]	@ (8000ec0 <display+0xcc>)
 8000e1e:	f006 fa85 	bl	800732c <siprintf>
 8000e22:	e00e      	b.n	8000e42 <display+0x4e>
  } else {
    sprintf(dig, "%02d%02d%02d", decoded_time->date, decoded_time->month, decoded_time->year);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	791b      	ldrb	r3, [r3, #4]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	795b      	ldrb	r3, [r3, #5]
 8000e2e:	4619      	mov	r1, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	799b      	ldrb	r3, [r3, #6]
 8000e34:	f107 0008 	add.w	r0, r7, #8
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	4920      	ldr	r1, [pc, #128]	@ (8000ec0 <display+0xcc>)
 8000e3e:	f006 fa75 	bl	800732c <siprintf>
  }

  uint8_t num_digits = strlen(dig);
 8000e42:	f107 0308 	add.w	r3, r7, #8
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff f9e2 	bl	8000210 <strlen>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	74fb      	strb	r3, [r7, #19]
  for(int i = 0; i < NUM_INDICATORS; i++){
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
 8000e54:	e029      	b.n	8000eaa <display+0xb6>
    if(i < num_digits){
 8000e56:	7cfb      	ldrb	r3, [r7, #19]
 8000e58:	697a      	ldr	r2, [r7, #20]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	da1d      	bge.n	8000e9a <display+0xa6>
      display_buffer[i] = digits[dig[i] - '0'] | (i % 2 == 1 ? (1 << 7) : 0);
 8000e5e:	f107 0208 	add.w	r2, r7, #8
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	4413      	add	r3, r2
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	3b30      	subs	r3, #48	@ 0x30
 8000e6a:	4a16      	ldr	r2, [pc, #88]	@ (8000ec4 <display+0xd0>)
 8000e6c:	5cd3      	ldrb	r3, [r2, r3]
 8000e6e:	b25a      	sxtb	r2, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	bfb8      	it	lt
 8000e7a:	425b      	neglt	r3, r3
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d102      	bne.n	8000e86 <display+0x92>
 8000e80:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8000e84:	e000      	b.n	8000e88 <display+0x94>
 8000e86:	2300      	movs	r3, #0
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	b25b      	sxtb	r3, r3
 8000e8c:	b2d9      	uxtb	r1, r3
 8000e8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ec8 <display+0xd4>)
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	4413      	add	r3, r2
 8000e94:	460a      	mov	r2, r1
 8000e96:	701a      	strb	r2, [r3, #0]
 8000e98:	e004      	b.n	8000ea4 <display+0xb0>
    } else {
      display_buffer[i] = DIGIT_N;
 8000e9a:	4a0b      	ldr	r2, [pc, #44]	@ (8000ec8 <display+0xd4>)
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < NUM_INDICATORS; i++){
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	617b      	str	r3, [r7, #20]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	2b07      	cmp	r3, #7
 8000eae:	ddd2      	ble.n	8000e56 <display+0x62>
  }

  // char buffer[100];
  // sprintf(buffer, "display: %d %d %d %d %d %d %d %d\n", display_buffer[0], display_buffer[1], display_buffer[2], display_buffer[3], display_buffer[4], display_buffer[5], display_buffer[6], display_buffer[7]);
  // HAL_UART_Transmit_IT(&huart2, (uint8_t *)buffer, strlen(buffer));
}
 8000eb0:	bf00      	nop
 8000eb2:	bf00      	nop
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000310 	.word	0x20000310
 8000ec0:	08007df4 	.word	0x08007df4
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	200002f4 	.word	0x200002f4

08000ecc <decode_time>:


void decode_time(struct time_t *decoded_time, struct time_t *get_time)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  decoded_time->seconds = ((get_time->seconds & 0xF0 )>> 4) * 10 + (get_time->seconds & 0x0F);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	091b      	lsrs	r3, r3, #4
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	461a      	mov	r2, r3
 8000ee0:	0092      	lsls	r2, r2, #2
 8000ee2:	4413      	add	r3, r2
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	f003 030f 	and.w	r3, r3, #15
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	4413      	add	r3, r2
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	701a      	strb	r2, [r3, #0]
  decoded_time->minutes = ((get_time->minutes & 0xF0 )>> 4) * 10 + (get_time->minutes & 0x0F);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	785b      	ldrb	r3, [r3, #1]
 8000efe:	091b      	lsrs	r3, r3, #4
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	461a      	mov	r2, r3
 8000f04:	0092      	lsls	r2, r2, #2
 8000f06:	4413      	add	r3, r2
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	785b      	ldrb	r3, [r3, #1]
 8000f10:	f003 030f 	and.w	r3, r3, #15
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	4413      	add	r3, r2
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	705a      	strb	r2, [r3, #1]
  decoded_time->hours = ((get_time->hours & 0xF0 )>> 4) * 10 + (get_time->hours & 0x0F);
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	789b      	ldrb	r3, [r3, #2]
 8000f22:	091b      	lsrs	r3, r3, #4
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	461a      	mov	r2, r3
 8000f28:	0092      	lsls	r2, r2, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	789b      	ldrb	r3, [r3, #2]
 8000f34:	f003 030f 	and.w	r3, r3, #15
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	4413      	add	r3, r2
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	709a      	strb	r2, [r3, #2]
  
  decoded_time->date = ((get_time->date & 0xF0 )>> 4) * 10 + (get_time->date & 0x0F);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	791b      	ldrb	r3, [r3, #4]
 8000f46:	091b      	lsrs	r3, r3, #4
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	0092      	lsls	r2, r2, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	791b      	ldrb	r3, [r3, #4]
 8000f58:	f003 030f 	and.w	r3, r3, #15
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	4413      	add	r3, r2
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	711a      	strb	r2, [r3, #4]
  decoded_time->month = ((get_time->month & 0x70 )>> 4) * 10 + (get_time->month & 0x0F);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	795b      	ldrb	r3, [r3, #5]
 8000f6a:	111b      	asrs	r3, r3, #4
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	461a      	mov	r2, r3
 8000f76:	0092      	lsls	r2, r2, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	795b      	ldrb	r3, [r3, #5]
 8000f82:	f003 030f 	and.w	r3, r3, #15
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	4413      	add	r3, r2
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	715a      	strb	r2, [r3, #5]
  decoded_time->year = ((get_time->year & 0xF0 )>> 4) * 10 + (get_time->year & 0x0F);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	799b      	ldrb	r3, [r3, #6]
 8000f94:	091b      	lsrs	r3, r3, #4
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	461a      	mov	r2, r3
 8000f9a:	0092      	lsls	r2, r2, #2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	799b      	ldrb	r3, [r3, #6]
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	4413      	add	r3, r2
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	719a      	strb	r2, [r3, #6]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	4b10      	ldr	r3, [pc, #64]	@ (800101c <HAL_MspInit+0x4c>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fde:	4a0f      	ldr	r2, [pc, #60]	@ (800101c <HAL_MspInit+0x4c>)
 8000fe0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fe4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800101c <HAL_MspInit+0x4c>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	603b      	str	r3, [r7, #0]
 8000ff6:	4b09      	ldr	r3, [pc, #36]	@ (800101c <HAL_MspInit+0x4c>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffa:	4a08      	ldr	r2, [pc, #32]	@ (800101c <HAL_MspInit+0x4c>)
 8000ffc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001000:	6413      	str	r3, [r2, #64]	@ 0x40
 8001002:	4b06      	ldr	r3, [pc, #24]	@ (800101c <HAL_MspInit+0x4c>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800

08001020 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	@ 0x28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a4c      	ldr	r2, [pc, #304]	@ (8001170 <HAL_I2C_MspInit+0x150>)
 800103e:	4293      	cmp	r3, r2
 8001040:	f040 8091 	bne.w	8001166 <HAL_I2C_MspInit+0x146>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001044:	2300      	movs	r3, #0
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	4b4a      	ldr	r3, [pc, #296]	@ (8001174 <HAL_I2C_MspInit+0x154>)
 800104a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104c:	4a49      	ldr	r2, [pc, #292]	@ (8001174 <HAL_I2C_MspInit+0x154>)
 800104e:	f043 0302 	orr.w	r3, r3, #2
 8001052:	6313      	str	r3, [r2, #48]	@ 0x30
 8001054:	4b47      	ldr	r3, [pc, #284]	@ (8001174 <HAL_I2C_MspInit+0x154>)
 8001056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001060:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001066:	2312      	movs	r3, #18
 8001068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106e:	2303      	movs	r3, #3
 8001070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001072:	2304      	movs	r3, #4
 8001074:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4619      	mov	r1, r3
 800107c:	483e      	ldr	r0, [pc, #248]	@ (8001178 <HAL_I2C_MspInit+0x158>)
 800107e:	f001 f807 	bl	8002090 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b3b      	ldr	r3, [pc, #236]	@ (8001174 <HAL_I2C_MspInit+0x154>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108a:	4a3a      	ldr	r2, [pc, #232]	@ (8001174 <HAL_I2C_MspInit+0x154>)
 800108c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001090:	6413      	str	r3, [r2, #64]	@ 0x40
 8001092:	4b38      	ldr	r3, [pc, #224]	@ (8001174 <HAL_I2C_MspInit+0x154>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001096:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800109e:	4b37      	ldr	r3, [pc, #220]	@ (800117c <HAL_I2C_MspInit+0x15c>)
 80010a0:	4a37      	ldr	r2, [pc, #220]	@ (8001180 <HAL_I2C_MspInit+0x160>)
 80010a2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80010a4:	4b35      	ldr	r3, [pc, #212]	@ (800117c <HAL_I2C_MspInit+0x15c>)
 80010a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80010aa:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010ac:	4b33      	ldr	r3, [pc, #204]	@ (800117c <HAL_I2C_MspInit+0x15c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010b2:	4b32      	ldr	r3, [pc, #200]	@ (800117c <HAL_I2C_MspInit+0x15c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010b8:	4b30      	ldr	r3, [pc, #192]	@ (800117c <HAL_I2C_MspInit+0x15c>)
 80010ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010be:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010c0:	4b2e      	ldr	r3, [pc, #184]	@ (800117c <HAL_I2C_MspInit+0x15c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010c6:	4b2d      	ldr	r3, [pc, #180]	@ (800117c <HAL_I2C_MspInit+0x15c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80010cc:	4b2b      	ldr	r3, [pc, #172]	@ (800117c <HAL_I2C_MspInit+0x15c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010d2:	4b2a      	ldr	r3, [pc, #168]	@ (800117c <HAL_I2C_MspInit+0x15c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010d8:	4b28      	ldr	r3, [pc, #160]	@ (800117c <HAL_I2C_MspInit+0x15c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80010de:	4827      	ldr	r0, [pc, #156]	@ (800117c <HAL_I2C_MspInit+0x15c>)
 80010e0:	f000 fbba 	bl	8001858 <HAL_DMA_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 80010ea:	f7ff ff69 	bl	8000fc0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a22      	ldr	r2, [pc, #136]	@ (800117c <HAL_I2C_MspInit+0x15c>)
 80010f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80010f4:	4a21      	ldr	r2, [pc, #132]	@ (800117c <HAL_I2C_MspInit+0x15c>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80010fa:	4b22      	ldr	r3, [pc, #136]	@ (8001184 <HAL_I2C_MspInit+0x164>)
 80010fc:	4a22      	ldr	r2, [pc, #136]	@ (8001188 <HAL_I2C_MspInit+0x168>)
 80010fe:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001100:	4b20      	ldr	r3, [pc, #128]	@ (8001184 <HAL_I2C_MspInit+0x164>)
 8001102:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001106:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001108:	4b1e      	ldr	r3, [pc, #120]	@ (8001184 <HAL_I2C_MspInit+0x164>)
 800110a:	2240      	movs	r2, #64	@ 0x40
 800110c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800110e:	4b1d      	ldr	r3, [pc, #116]	@ (8001184 <HAL_I2C_MspInit+0x164>)
 8001110:	2200      	movs	r2, #0
 8001112:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001114:	4b1b      	ldr	r3, [pc, #108]	@ (8001184 <HAL_I2C_MspInit+0x164>)
 8001116:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800111a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800111c:	4b19      	ldr	r3, [pc, #100]	@ (8001184 <HAL_I2C_MspInit+0x164>)
 800111e:	2200      	movs	r2, #0
 8001120:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001122:	4b18      	ldr	r3, [pc, #96]	@ (8001184 <HAL_I2C_MspInit+0x164>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001128:	4b16      	ldr	r3, [pc, #88]	@ (8001184 <HAL_I2C_MspInit+0x164>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800112e:	4b15      	ldr	r3, [pc, #84]	@ (8001184 <HAL_I2C_MspInit+0x164>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001134:	4b13      	ldr	r3, [pc, #76]	@ (8001184 <HAL_I2C_MspInit+0x164>)
 8001136:	2200      	movs	r2, #0
 8001138:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800113a:	4812      	ldr	r0, [pc, #72]	@ (8001184 <HAL_I2C_MspInit+0x164>)
 800113c:	f000 fb8c 	bl	8001858 <HAL_DMA_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8001146:	f7ff ff3b 	bl	8000fc0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a0d      	ldr	r2, [pc, #52]	@ (8001184 <HAL_I2C_MspInit+0x164>)
 800114e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001150:	4a0c      	ldr	r2, [pc, #48]	@ (8001184 <HAL_I2C_MspInit+0x164>)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2100      	movs	r1, #0
 800115a:	201f      	movs	r0, #31
 800115c:	f000 fb45 	bl	80017ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001160:	201f      	movs	r0, #31
 8001162:	f000 fb5e 	bl	8001822 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001166:	bf00      	nop
 8001168:	3728      	adds	r7, #40	@ 0x28
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40005400 	.word	0x40005400
 8001174:	40023800 	.word	0x40023800
 8001178:	40020400 	.word	0x40020400
 800117c:	200000e8 	.word	0x200000e8
 8001180:	40026010 	.word	0x40026010
 8001184:	20000148 	.word	0x20000148
 8001188:	400260a0 	.word	0x400260a0

0800118c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	@ 0x28
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a34      	ldr	r2, [pc, #208]	@ (800127c <HAL_SPI_MspInit+0xf0>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d161      	bne.n	8001272 <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	4b33      	ldr	r3, [pc, #204]	@ (8001280 <HAL_SPI_MspInit+0xf4>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b6:	4a32      	ldr	r2, [pc, #200]	@ (8001280 <HAL_SPI_MspInit+0xf4>)
 80011b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011be:	4b30      	ldr	r3, [pc, #192]	@ (8001280 <HAL_SPI_MspInit+0xf4>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001280 <HAL_SPI_MspInit+0xf4>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	4a2b      	ldr	r2, [pc, #172]	@ (8001280 <HAL_SPI_MspInit+0xf4>)
 80011d4:	f043 0302 	orr.w	r3, r3, #2
 80011d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011da:	4b29      	ldr	r3, [pc, #164]	@ (8001280 <HAL_SPI_MspInit+0xf4>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80011e6:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80011ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f4:	2303      	movs	r3, #3
 80011f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011f8:	2305      	movs	r3, #5
 80011fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4619      	mov	r1, r3
 8001202:	4820      	ldr	r0, [pc, #128]	@ (8001284 <HAL_SPI_MspInit+0xf8>)
 8001204:	f000 ff44 	bl	8002090 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001208:	4b1f      	ldr	r3, [pc, #124]	@ (8001288 <HAL_SPI_MspInit+0xfc>)
 800120a:	4a20      	ldr	r2, [pc, #128]	@ (800128c <HAL_SPI_MspInit+0x100>)
 800120c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800120e:	4b1e      	ldr	r3, [pc, #120]	@ (8001288 <HAL_SPI_MspInit+0xfc>)
 8001210:	2200      	movs	r2, #0
 8001212:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001214:	4b1c      	ldr	r3, [pc, #112]	@ (8001288 <HAL_SPI_MspInit+0xfc>)
 8001216:	2240      	movs	r2, #64	@ 0x40
 8001218:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800121a:	4b1b      	ldr	r3, [pc, #108]	@ (8001288 <HAL_SPI_MspInit+0xfc>)
 800121c:	2200      	movs	r2, #0
 800121e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001220:	4b19      	ldr	r3, [pc, #100]	@ (8001288 <HAL_SPI_MspInit+0xfc>)
 8001222:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001226:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001228:	4b17      	ldr	r3, [pc, #92]	@ (8001288 <HAL_SPI_MspInit+0xfc>)
 800122a:	2200      	movs	r2, #0
 800122c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800122e:	4b16      	ldr	r3, [pc, #88]	@ (8001288 <HAL_SPI_MspInit+0xfc>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001234:	4b14      	ldr	r3, [pc, #80]	@ (8001288 <HAL_SPI_MspInit+0xfc>)
 8001236:	2200      	movs	r2, #0
 8001238:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800123a:	4b13      	ldr	r3, [pc, #76]	@ (8001288 <HAL_SPI_MspInit+0xfc>)
 800123c:	2200      	movs	r2, #0
 800123e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001240:	4b11      	ldr	r3, [pc, #68]	@ (8001288 <HAL_SPI_MspInit+0xfc>)
 8001242:	2200      	movs	r2, #0
 8001244:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001246:	4810      	ldr	r0, [pc, #64]	@ (8001288 <HAL_SPI_MspInit+0xfc>)
 8001248:	f000 fb06 	bl	8001858 <HAL_DMA_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8001252:	f7ff feb5 	bl	8000fc0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a0b      	ldr	r2, [pc, #44]	@ (8001288 <HAL_SPI_MspInit+0xfc>)
 800125a:	649a      	str	r2, [r3, #72]	@ 0x48
 800125c:	4a0a      	ldr	r2, [pc, #40]	@ (8001288 <HAL_SPI_MspInit+0xfc>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	2024      	movs	r0, #36	@ 0x24
 8001268:	f000 fabf 	bl	80017ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800126c:	2024      	movs	r0, #36	@ 0x24
 800126e:	f000 fad8 	bl	8001822 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001272:	bf00      	nop
 8001274:	3728      	adds	r7, #40	@ 0x28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40003800 	.word	0x40003800
 8001280:	40023800 	.word	0x40023800
 8001284:	40020400 	.word	0x40020400
 8001288:	20000200 	.word	0x20000200
 800128c:	40026070 	.word	0x40026070

08001290 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a0e      	ldr	r2, [pc, #56]	@ (80012d8 <HAL_TIM_Base_MspInit+0x48>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d115      	bne.n	80012ce <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	4b0d      	ldr	r3, [pc, #52]	@ (80012dc <HAL_TIM_Base_MspInit+0x4c>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012aa:	4a0c      	ldr	r2, [pc, #48]	@ (80012dc <HAL_TIM_Base_MspInit+0x4c>)
 80012ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012b2:	4b0a      	ldr	r3, [pc, #40]	@ (80012dc <HAL_TIM_Base_MspInit+0x4c>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	2100      	movs	r1, #0
 80012c2:	2019      	movs	r0, #25
 80012c4:	f000 fa91 	bl	80017ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80012c8:	2019      	movs	r0, #25
 80012ca:	f000 faaa 	bl	8001822 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM10_MspInit 1 */

  }

}
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40014400 	.word	0x40014400
 80012dc:	40023800 	.word	0x40023800

080012e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	@ 0x28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a1d      	ldr	r2, [pc, #116]	@ (8001374 <HAL_UART_MspInit+0x94>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d133      	bne.n	800136a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	4b1c      	ldr	r3, [pc, #112]	@ (8001378 <HAL_UART_MspInit+0x98>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130a:	4a1b      	ldr	r2, [pc, #108]	@ (8001378 <HAL_UART_MspInit+0x98>)
 800130c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001310:	6413      	str	r3, [r2, #64]	@ 0x40
 8001312:	4b19      	ldr	r3, [pc, #100]	@ (8001378 <HAL_UART_MspInit+0x98>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b15      	ldr	r3, [pc, #84]	@ (8001378 <HAL_UART_MspInit+0x98>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	4a14      	ldr	r2, [pc, #80]	@ (8001378 <HAL_UART_MspInit+0x98>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6313      	str	r3, [r2, #48]	@ 0x30
 800132e:	4b12      	ldr	r3, [pc, #72]	@ (8001378 <HAL_UART_MspInit+0x98>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800133a:	230c      	movs	r3, #12
 800133c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001346:	2303      	movs	r3, #3
 8001348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800134a:	2307      	movs	r3, #7
 800134c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	4619      	mov	r1, r3
 8001354:	4809      	ldr	r0, [pc, #36]	@ (800137c <HAL_UART_MspInit+0x9c>)
 8001356:	f000 fe9b 	bl	8002090 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2100      	movs	r1, #0
 800135e:	2026      	movs	r0, #38	@ 0x26
 8001360:	f000 fa43 	bl	80017ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001364:	2026      	movs	r0, #38	@ 0x26
 8001366:	f000 fa5c 	bl	8001822 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800136a:	bf00      	nop
 800136c:	3728      	adds	r7, #40	@ 0x28
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40004400 	.word	0x40004400
 8001378:	40023800 	.word	0x40023800
 800137c:	40020000 	.word	0x40020000

08001380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <NMI_Handler+0x4>

08001388 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <HardFault_Handler+0x4>

08001390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <MemManage_Handler+0x4>

08001398 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <BusFault_Handler+0x4>

080013a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <UsageFault_Handler+0x4>

080013a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d6:	f000 f90d 	bl	80015f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80013e4:	4802      	ldr	r0, [pc, #8]	@ (80013f0 <DMA1_Stream0_IRQHandler+0x10>)
 80013e6:	f000 fbcf 	bl	8001b88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200000e8 	.word	0x200000e8

080013f4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80013f8:	4802      	ldr	r0, [pc, #8]	@ (8001404 <DMA1_Stream4_IRQHandler+0x10>)
 80013fa:	f000 fbc5 	bl	8001b88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000200 	.word	0x20000200

08001408 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800140c:	4802      	ldr	r0, [pc, #8]	@ (8001418 <DMA1_Stream6_IRQHandler+0x10>)
 800140e:	f000 fbbb 	bl	8001b88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000148 	.word	0x20000148

0800141c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001420:	4802      	ldr	r0, [pc, #8]	@ (800142c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001422:	f004 fdfd 	bl	8006020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000260 	.word	0x20000260

08001430 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001434:	4802      	ldr	r0, [pc, #8]	@ (8001440 <I2C1_EV_IRQHandler+0x10>)
 8001436:	f001 fc39 	bl	8002cac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000094 	.word	0x20000094

08001444 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001448:	4802      	ldr	r0, [pc, #8]	@ (8001454 <SPI2_IRQHandler+0x10>)
 800144a:	f004 faaf 	bl	80059ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200001a8 	.word	0x200001a8

08001458 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800145c:	4802      	ldr	r0, [pc, #8]	@ (8001468 <USART2_IRQHandler+0x10>)
 800145e:	f005 f863 	bl	8006528 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200002a8 	.word	0x200002a8

0800146c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001474:	4a14      	ldr	r2, [pc, #80]	@ (80014c8 <_sbrk+0x5c>)
 8001476:	4b15      	ldr	r3, [pc, #84]	@ (80014cc <_sbrk+0x60>)
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001480:	4b13      	ldr	r3, [pc, #76]	@ (80014d0 <_sbrk+0x64>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d102      	bne.n	800148e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001488:	4b11      	ldr	r3, [pc, #68]	@ (80014d0 <_sbrk+0x64>)
 800148a:	4a12      	ldr	r2, [pc, #72]	@ (80014d4 <_sbrk+0x68>)
 800148c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800148e:	4b10      	ldr	r3, [pc, #64]	@ (80014d0 <_sbrk+0x64>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	429a      	cmp	r2, r3
 800149a:	d207      	bcs.n	80014ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800149c:	f005 fff2 	bl	8007484 <__errno>
 80014a0:	4603      	mov	r3, r0
 80014a2:	220c      	movs	r2, #12
 80014a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014aa:	e009      	b.n	80014c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014ac:	4b08      	ldr	r3, [pc, #32]	@ (80014d0 <_sbrk+0x64>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014b2:	4b07      	ldr	r3, [pc, #28]	@ (80014d0 <_sbrk+0x64>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	4a05      	ldr	r2, [pc, #20]	@ (80014d0 <_sbrk+0x64>)
 80014bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014be:	68fb      	ldr	r3, [r7, #12]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20020000 	.word	0x20020000
 80014cc:	00000400 	.word	0x00000400
 80014d0:	2000037c 	.word	0x2000037c
 80014d4:	200004d0 	.word	0x200004d0

080014d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014dc:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <SystemInit+0x20>)
 80014de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014e2:	4a05      	ldr	r2, [pc, #20]	@ (80014f8 <SystemInit+0x20>)
 80014e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001534 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001500:	f7ff ffea 	bl	80014d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001504:	480c      	ldr	r0, [pc, #48]	@ (8001538 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001506:	490d      	ldr	r1, [pc, #52]	@ (800153c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001508:	4a0d      	ldr	r2, [pc, #52]	@ (8001540 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800150c:	e002      	b.n	8001514 <LoopCopyDataInit>

0800150e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800150e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001512:	3304      	adds	r3, #4

08001514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001518:	d3f9      	bcc.n	800150e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151a:	4a0a      	ldr	r2, [pc, #40]	@ (8001544 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800151c:	4c0a      	ldr	r4, [pc, #40]	@ (8001548 <LoopFillZerobss+0x22>)
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001520:	e001      	b.n	8001526 <LoopFillZerobss>

08001522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001524:	3204      	adds	r2, #4

08001526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001528:	d3fb      	bcc.n	8001522 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800152a:	f005 ffb1 	bl	8007490 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800152e:	f7ff f83f 	bl	80005b0 <main>
  bx  lr    
 8001532:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001534:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800153c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001540:	08007f68 	.word	0x08007f68
  ldr r2, =_sbss
 8001544:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001548:	200004cc 	.word	0x200004cc

0800154c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800154c:	e7fe      	b.n	800154c <ADC_IRQHandler>
	...

08001550 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001554:	4b0e      	ldr	r3, [pc, #56]	@ (8001590 <HAL_Init+0x40>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0d      	ldr	r2, [pc, #52]	@ (8001590 <HAL_Init+0x40>)
 800155a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800155e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001560:	4b0b      	ldr	r3, [pc, #44]	@ (8001590 <HAL_Init+0x40>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a0a      	ldr	r2, [pc, #40]	@ (8001590 <HAL_Init+0x40>)
 8001566:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800156a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800156c:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <HAL_Init+0x40>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a07      	ldr	r2, [pc, #28]	@ (8001590 <HAL_Init+0x40>)
 8001572:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001576:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001578:	2003      	movs	r0, #3
 800157a:	f000 f92b 	bl	80017d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800157e:	200f      	movs	r0, #15
 8001580:	f000 f808 	bl	8001594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001584:	f7ff fd24 	bl	8000fd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40023c00 	.word	0x40023c00

08001594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800159c:	4b12      	ldr	r3, [pc, #72]	@ (80015e8 <HAL_InitTick+0x54>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4b12      	ldr	r3, [pc, #72]	@ (80015ec <HAL_InitTick+0x58>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	4619      	mov	r1, r3
 80015a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 f943 	bl	800183e <HAL_SYSTICK_Config>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e00e      	b.n	80015e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b0f      	cmp	r3, #15
 80015c6:	d80a      	bhi.n	80015de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c8:	2200      	movs	r2, #0
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015d0:	f000 f90b 	bl	80017ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d4:	4a06      	ldr	r2, [pc, #24]	@ (80015f0 <HAL_InitTick+0x5c>)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	e000      	b.n	80015e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	2000000c 	.word	0x2000000c
 80015ec:	20000014 	.word	0x20000014
 80015f0:	20000010 	.word	0x20000010

080015f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f8:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <HAL_IncTick+0x20>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <HAL_IncTick+0x24>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4413      	add	r3, r2
 8001604:	4a04      	ldr	r2, [pc, #16]	@ (8001618 <HAL_IncTick+0x24>)
 8001606:	6013      	str	r3, [r2, #0]
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	20000014 	.word	0x20000014
 8001618:	20000380 	.word	0x20000380

0800161c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return uwTick;
 8001620:	4b03      	ldr	r3, [pc, #12]	@ (8001630 <HAL_GetTick+0x14>)
 8001622:	681b      	ldr	r3, [r3, #0]
}
 8001624:	4618      	mov	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	20000380 	.word	0x20000380

08001634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001644:	4b0c      	ldr	r3, [pc, #48]	@ (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001650:	4013      	ands	r3, r2
 8001652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800165c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001660:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001666:	4a04      	ldr	r2, [pc, #16]	@ (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	60d3      	str	r3, [r2, #12]
}
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001680:	4b04      	ldr	r3, [pc, #16]	@ (8001694 <__NVIC_GetPriorityGrouping+0x18>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	0a1b      	lsrs	r3, r3, #8
 8001686:	f003 0307 	and.w	r3, r3, #7
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	db0b      	blt.n	80016c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	f003 021f 	and.w	r2, r3, #31
 80016b0:	4907      	ldr	r1, [pc, #28]	@ (80016d0 <__NVIC_EnableIRQ+0x38>)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	095b      	lsrs	r3, r3, #5
 80016b8:	2001      	movs	r0, #1
 80016ba:	fa00 f202 	lsl.w	r2, r0, r2
 80016be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000e100 	.word	0xe000e100

080016d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	6039      	str	r1, [r7, #0]
 80016de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	db0a      	blt.n	80016fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	490c      	ldr	r1, [pc, #48]	@ (8001720 <__NVIC_SetPriority+0x4c>)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	0112      	lsls	r2, r2, #4
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	440b      	add	r3, r1
 80016f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016fc:	e00a      	b.n	8001714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	b2da      	uxtb	r2, r3
 8001702:	4908      	ldr	r1, [pc, #32]	@ (8001724 <__NVIC_SetPriority+0x50>)
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	3b04      	subs	r3, #4
 800170c:	0112      	lsls	r2, r2, #4
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	440b      	add	r3, r1
 8001712:	761a      	strb	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000e100 	.word	0xe000e100
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001728:	b480      	push	{r7}
 800172a:	b089      	sub	sp, #36	@ 0x24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f1c3 0307 	rsb	r3, r3, #7
 8001742:	2b04      	cmp	r3, #4
 8001744:	bf28      	it	cs
 8001746:	2304      	movcs	r3, #4
 8001748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3304      	adds	r3, #4
 800174e:	2b06      	cmp	r3, #6
 8001750:	d902      	bls.n	8001758 <NVIC_EncodePriority+0x30>
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3b03      	subs	r3, #3
 8001756:	e000      	b.n	800175a <NVIC_EncodePriority+0x32>
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800175c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43da      	mvns	r2, r3
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	401a      	ands	r2, r3
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001770:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	fa01 f303 	lsl.w	r3, r1, r3
 800177a:	43d9      	mvns	r1, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001780:	4313      	orrs	r3, r2
         );
}
 8001782:	4618      	mov	r0, r3
 8001784:	3724      	adds	r7, #36	@ 0x24
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
	...

08001790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017a0:	d301      	bcc.n	80017a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a2:	2301      	movs	r3, #1
 80017a4:	e00f      	b.n	80017c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a6:	4a0a      	ldr	r2, [pc, #40]	@ (80017d0 <SysTick_Config+0x40>)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ae:	210f      	movs	r1, #15
 80017b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017b4:	f7ff ff8e 	bl	80016d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b8:	4b05      	ldr	r3, [pc, #20]	@ (80017d0 <SysTick_Config+0x40>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017be:	4b04      	ldr	r3, [pc, #16]	@ (80017d0 <SysTick_Config+0x40>)
 80017c0:	2207      	movs	r2, #7
 80017c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	e000e010 	.word	0xe000e010

080017d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff ff29 	bl	8001634 <__NVIC_SetPriorityGrouping>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017fc:	f7ff ff3e 	bl	800167c <__NVIC_GetPriorityGrouping>
 8001800:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68b9      	ldr	r1, [r7, #8]
 8001806:	6978      	ldr	r0, [r7, #20]
 8001808:	f7ff ff8e 	bl	8001728 <NVIC_EncodePriority>
 800180c:	4602      	mov	r2, r0
 800180e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001812:	4611      	mov	r1, r2
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff5d 	bl	80016d4 <__NVIC_SetPriority>
}
 800181a:	bf00      	nop
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	4603      	mov	r3, r0
 800182a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800182c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff31 	bl	8001698 <__NVIC_EnableIRQ>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff ffa2 	bl	8001790 <SysTick_Config>
 800184c:	4603      	mov	r3, r0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001864:	f7ff feda 	bl	800161c <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e099      	b.n	80019a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2202      	movs	r2, #2
 8001878:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 0201 	bic.w	r2, r2, #1
 8001892:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001894:	e00f      	b.n	80018b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001896:	f7ff fec1 	bl	800161c <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b05      	cmp	r3, #5
 80018a2:	d908      	bls.n	80018b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2220      	movs	r2, #32
 80018a8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2203      	movs	r2, #3
 80018ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e078      	b.n	80019a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1e8      	bne.n	8001896 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	4b38      	ldr	r3, [pc, #224]	@ (80019b0 <HAL_DMA_Init+0x158>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	4313      	orrs	r3, r2
 8001906:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190c:	2b04      	cmp	r3, #4
 800190e:	d107      	bne.n	8001920 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001918:	4313      	orrs	r3, r2
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	4313      	orrs	r3, r2
 800191e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f023 0307 	bic.w	r3, r3, #7
 8001936:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	4313      	orrs	r3, r2
 8001940:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001946:	2b04      	cmp	r3, #4
 8001948:	d117      	bne.n	800197a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	4313      	orrs	r3, r2
 8001952:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001958:	2b00      	cmp	r3, #0
 800195a:	d00e      	beq.n	800197a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 fb1b 	bl	8001f98 <DMA_CheckFifoParam>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d008      	beq.n	800197a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2240      	movs	r2, #64	@ 0x40
 800196c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001976:	2301      	movs	r3, #1
 8001978:	e016      	b.n	80019a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 fad2 	bl	8001f2c <DMA_CalcBaseAndBitshift>
 8001988:	4603      	mov	r3, r0
 800198a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001990:	223f      	movs	r2, #63	@ 0x3f
 8001992:	409a      	lsls	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2201      	movs	r2, #1
 80019a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	f010803f 	.word	0xf010803f

080019b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
 80019c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019c2:	2300      	movs	r3, #0
 80019c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d101      	bne.n	80019da <HAL_DMA_Start_IT+0x26>
 80019d6:	2302      	movs	r3, #2
 80019d8:	e040      	b.n	8001a5c <HAL_DMA_Start_IT+0xa8>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d12f      	bne.n	8001a4e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2202      	movs	r2, #2
 80019f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2200      	movs	r2, #0
 80019fa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	68b9      	ldr	r1, [r7, #8]
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f000 fa64 	bl	8001ed0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a0c:	223f      	movs	r2, #63	@ 0x3f
 8001a0e:	409a      	lsls	r2, r3
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 0216 	orr.w	r2, r2, #22
 8001a22:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d007      	beq.n	8001a3c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f042 0208 	orr.w	r2, r2, #8
 8001a3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0201 	orr.w	r2, r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	e005      	b.n	8001a5a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a56:	2302      	movs	r3, #2
 8001a58:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a70:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a72:	f7ff fdd3 	bl	800161c <HAL_GetTick>
 8001a76:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d008      	beq.n	8001a96 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2280      	movs	r2, #128	@ 0x80
 8001a88:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e052      	b.n	8001b3c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 0216 	bic.w	r2, r2, #22
 8001aa4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	695a      	ldr	r2, [r3, #20]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ab4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d103      	bne.n	8001ac6 <HAL_DMA_Abort+0x62>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d007      	beq.n	8001ad6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 0208 	bic.w	r2, r2, #8
 8001ad4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 0201 	bic.w	r2, r2, #1
 8001ae4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ae6:	e013      	b.n	8001b10 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ae8:	f7ff fd98 	bl	800161c <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b05      	cmp	r3, #5
 8001af4:	d90c      	bls.n	8001b10 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2220      	movs	r2, #32
 8001afa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2203      	movs	r2, #3
 8001b00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e015      	b.n	8001b3c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1e4      	bne.n	8001ae8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b22:	223f      	movs	r2, #63	@ 0x3f
 8001b24:	409a      	lsls	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d004      	beq.n	8001b62 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2280      	movs	r2, #128	@ 0x80
 8001b5c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e00c      	b.n	8001b7c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2205      	movs	r2, #5
 8001b66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0201 	bic.w	r2, r2, #1
 8001b78:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b94:	4b8e      	ldr	r3, [pc, #568]	@ (8001dd0 <HAL_DMA_IRQHandler+0x248>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a8e      	ldr	r2, [pc, #568]	@ (8001dd4 <HAL_DMA_IRQHandler+0x24c>)
 8001b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9e:	0a9b      	lsrs	r3, r3, #10
 8001ba0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bb2:	2208      	movs	r2, #8
 8001bb4:	409a      	lsls	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d01a      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d013      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0204 	bic.w	r2, r2, #4
 8001bda:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001be0:	2208      	movs	r2, #8
 8001be2:	409a      	lsls	r2, r3
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bec:	f043 0201 	orr.w	r2, r3, #1
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	409a      	lsls	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d012      	beq.n	8001c2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00b      	beq.n	8001c2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c16:	2201      	movs	r2, #1
 8001c18:	409a      	lsls	r2, r3
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c22:	f043 0202 	orr.w	r2, r3, #2
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c2e:	2204      	movs	r2, #4
 8001c30:	409a      	lsls	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	4013      	ands	r3, r2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d012      	beq.n	8001c60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00b      	beq.n	8001c60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c4c:	2204      	movs	r2, #4
 8001c4e:	409a      	lsls	r2, r3
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c58:	f043 0204 	orr.w	r2, r3, #4
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c64:	2210      	movs	r2, #16
 8001c66:	409a      	lsls	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d043      	beq.n	8001cf8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0308 	and.w	r3, r3, #8
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d03c      	beq.n	8001cf8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c82:	2210      	movs	r2, #16
 8001c84:	409a      	lsls	r2, r3
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d018      	beq.n	8001cca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d108      	bne.n	8001cb8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d024      	beq.n	8001cf8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	4798      	blx	r3
 8001cb6:	e01f      	b.n	8001cf8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d01b      	beq.n	8001cf8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	4798      	blx	r3
 8001cc8:	e016      	b.n	8001cf8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d107      	bne.n	8001ce8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 0208 	bic.w	r2, r2, #8
 8001ce6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	409a      	lsls	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4013      	ands	r3, r2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 808f 	beq.w	8001e28 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0310 	and.w	r3, r3, #16
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 8087 	beq.w	8001e28 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d1e:	2220      	movs	r2, #32
 8001d20:	409a      	lsls	r2, r3
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b05      	cmp	r3, #5
 8001d30:	d136      	bne.n	8001da0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0216 	bic.w	r2, r2, #22
 8001d40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	695a      	ldr	r2, [r3, #20]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d103      	bne.n	8001d62 <HAL_DMA_IRQHandler+0x1da>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d007      	beq.n	8001d72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f022 0208 	bic.w	r2, r2, #8
 8001d70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d76:	223f      	movs	r2, #63	@ 0x3f
 8001d78:	409a      	lsls	r2, r3
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d07e      	beq.n	8001e94 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	4798      	blx	r3
        }
        return;
 8001d9e:	e079      	b.n	8001e94 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d01d      	beq.n	8001dea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10d      	bne.n	8001dd8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d031      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	4798      	blx	r3
 8001dcc:	e02c      	b.n	8001e28 <HAL_DMA_IRQHandler+0x2a0>
 8001dce:	bf00      	nop
 8001dd0:	2000000c 	.word	0x2000000c
 8001dd4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d023      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	4798      	blx	r3
 8001de8:	e01e      	b.n	8001e28 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d10f      	bne.n	8001e18 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0210 	bic.w	r2, r2, #16
 8001e06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d032      	beq.n	8001e96 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d022      	beq.n	8001e82 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2205      	movs	r2, #5
 8001e40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0201 	bic.w	r2, r2, #1
 8001e52:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	3301      	adds	r3, #1
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d307      	bcc.n	8001e70 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f2      	bne.n	8001e54 <HAL_DMA_IRQHandler+0x2cc>
 8001e6e:	e000      	b.n	8001e72 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e70:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d005      	beq.n	8001e96 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	4798      	blx	r3
 8001e92:	e000      	b.n	8001e96 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e94:	bf00      	nop
    }
  }
}
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001eaa:	b2db      	uxtb	r3, r3
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
 8001edc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001eec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	2b40      	cmp	r3, #64	@ 0x40
 8001efc:	d108      	bne.n	8001f10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f0e:	e007      	b.n	8001f20 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	60da      	str	r2, [r3, #12]
}
 8001f20:	bf00      	nop
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	3b10      	subs	r3, #16
 8001f3c:	4a14      	ldr	r2, [pc, #80]	@ (8001f90 <DMA_CalcBaseAndBitshift+0x64>)
 8001f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f42:	091b      	lsrs	r3, r3, #4
 8001f44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f46:	4a13      	ldr	r2, [pc, #76]	@ (8001f94 <DMA_CalcBaseAndBitshift+0x68>)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	d909      	bls.n	8001f6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f62:	f023 0303 	bic.w	r3, r3, #3
 8001f66:	1d1a      	adds	r2, r3, #4
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f6c:	e007      	b.n	8001f7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f76:	f023 0303 	bic.w	r3, r3, #3
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	aaaaaaab 	.word	0xaaaaaaab
 8001f94:	08007e1c 	.word	0x08007e1c

08001f98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d11f      	bne.n	8001ff2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	2b03      	cmp	r3, #3
 8001fb6:	d856      	bhi.n	8002066 <DMA_CheckFifoParam+0xce>
 8001fb8:	a201      	add	r2, pc, #4	@ (adr r2, 8001fc0 <DMA_CheckFifoParam+0x28>)
 8001fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fbe:	bf00      	nop
 8001fc0:	08001fd1 	.word	0x08001fd1
 8001fc4:	08001fe3 	.word	0x08001fe3
 8001fc8:	08001fd1 	.word	0x08001fd1
 8001fcc:	08002067 	.word	0x08002067
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d046      	beq.n	800206a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fe0:	e043      	b.n	800206a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001fea:	d140      	bne.n	800206e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ff0:	e03d      	b.n	800206e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ffa:	d121      	bne.n	8002040 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d837      	bhi.n	8002072 <DMA_CheckFifoParam+0xda>
 8002002:	a201      	add	r2, pc, #4	@ (adr r2, 8002008 <DMA_CheckFifoParam+0x70>)
 8002004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002008:	08002019 	.word	0x08002019
 800200c:	0800201f 	.word	0x0800201f
 8002010:	08002019 	.word	0x08002019
 8002014:	08002031 	.word	0x08002031
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	73fb      	strb	r3, [r7, #15]
      break;
 800201c:	e030      	b.n	8002080 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002022:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d025      	beq.n	8002076 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800202e:	e022      	b.n	8002076 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002034:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002038:	d11f      	bne.n	800207a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800203e:	e01c      	b.n	800207a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d903      	bls.n	800204e <DMA_CheckFifoParam+0xb6>
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	2b03      	cmp	r3, #3
 800204a:	d003      	beq.n	8002054 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800204c:	e018      	b.n	8002080 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	73fb      	strb	r3, [r7, #15]
      break;
 8002052:	e015      	b.n	8002080 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002058:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00e      	beq.n	800207e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	73fb      	strb	r3, [r7, #15]
      break;
 8002064:	e00b      	b.n	800207e <DMA_CheckFifoParam+0xe6>
      break;
 8002066:	bf00      	nop
 8002068:	e00a      	b.n	8002080 <DMA_CheckFifoParam+0xe8>
      break;
 800206a:	bf00      	nop
 800206c:	e008      	b.n	8002080 <DMA_CheckFifoParam+0xe8>
      break;
 800206e:	bf00      	nop
 8002070:	e006      	b.n	8002080 <DMA_CheckFifoParam+0xe8>
      break;
 8002072:	bf00      	nop
 8002074:	e004      	b.n	8002080 <DMA_CheckFifoParam+0xe8>
      break;
 8002076:	bf00      	nop
 8002078:	e002      	b.n	8002080 <DMA_CheckFifoParam+0xe8>
      break;   
 800207a:	bf00      	nop
 800207c:	e000      	b.n	8002080 <DMA_CheckFifoParam+0xe8>
      break;
 800207e:	bf00      	nop
    }
  } 
  
  return status; 
 8002080:	7bfb      	ldrb	r3, [r7, #15]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop

08002090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002090:	b480      	push	{r7}
 8002092:	b089      	sub	sp, #36	@ 0x24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
 80020aa:	e165      	b.n	8002378 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020ac:	2201      	movs	r2, #1
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	4013      	ands	r3, r2
 80020be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	f040 8154 	bne.w	8002372 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d005      	beq.n	80020e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d130      	bne.n	8002144 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	2203      	movs	r2, #3
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4013      	ands	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002118:	2201      	movs	r2, #1
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	091b      	lsrs	r3, r3, #4
 800212e:	f003 0201 	and.w	r2, r3, #1
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	2b03      	cmp	r3, #3
 800214e:	d017      	beq.n	8002180 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	2203      	movs	r2, #3
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d123      	bne.n	80021d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	08da      	lsrs	r2, r3, #3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3208      	adds	r2, #8
 8002194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002198:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	220f      	movs	r2, #15
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	691a      	ldr	r2, [r3, #16]
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	08da      	lsrs	r2, r3, #3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3208      	adds	r2, #8
 80021ce:	69b9      	ldr	r1, [r7, #24]
 80021d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	2203      	movs	r2, #3
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0203 	and.w	r2, r3, #3
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 80ae 	beq.w	8002372 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	4b5d      	ldr	r3, [pc, #372]	@ (8002390 <HAL_GPIO_Init+0x300>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221e:	4a5c      	ldr	r2, [pc, #368]	@ (8002390 <HAL_GPIO_Init+0x300>)
 8002220:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002224:	6453      	str	r3, [r2, #68]	@ 0x44
 8002226:	4b5a      	ldr	r3, [pc, #360]	@ (8002390 <HAL_GPIO_Init+0x300>)
 8002228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002232:	4a58      	ldr	r2, [pc, #352]	@ (8002394 <HAL_GPIO_Init+0x304>)
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	089b      	lsrs	r3, r3, #2
 8002238:	3302      	adds	r3, #2
 800223a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	220f      	movs	r2, #15
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a4f      	ldr	r2, [pc, #316]	@ (8002398 <HAL_GPIO_Init+0x308>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d025      	beq.n	80022aa <HAL_GPIO_Init+0x21a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a4e      	ldr	r2, [pc, #312]	@ (800239c <HAL_GPIO_Init+0x30c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d01f      	beq.n	80022a6 <HAL_GPIO_Init+0x216>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a4d      	ldr	r2, [pc, #308]	@ (80023a0 <HAL_GPIO_Init+0x310>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d019      	beq.n	80022a2 <HAL_GPIO_Init+0x212>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a4c      	ldr	r2, [pc, #304]	@ (80023a4 <HAL_GPIO_Init+0x314>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d013      	beq.n	800229e <HAL_GPIO_Init+0x20e>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a4b      	ldr	r2, [pc, #300]	@ (80023a8 <HAL_GPIO_Init+0x318>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d00d      	beq.n	800229a <HAL_GPIO_Init+0x20a>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a4a      	ldr	r2, [pc, #296]	@ (80023ac <HAL_GPIO_Init+0x31c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d007      	beq.n	8002296 <HAL_GPIO_Init+0x206>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a49      	ldr	r2, [pc, #292]	@ (80023b0 <HAL_GPIO_Init+0x320>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d101      	bne.n	8002292 <HAL_GPIO_Init+0x202>
 800228e:	2306      	movs	r3, #6
 8002290:	e00c      	b.n	80022ac <HAL_GPIO_Init+0x21c>
 8002292:	2307      	movs	r3, #7
 8002294:	e00a      	b.n	80022ac <HAL_GPIO_Init+0x21c>
 8002296:	2305      	movs	r3, #5
 8002298:	e008      	b.n	80022ac <HAL_GPIO_Init+0x21c>
 800229a:	2304      	movs	r3, #4
 800229c:	e006      	b.n	80022ac <HAL_GPIO_Init+0x21c>
 800229e:	2303      	movs	r3, #3
 80022a0:	e004      	b.n	80022ac <HAL_GPIO_Init+0x21c>
 80022a2:	2302      	movs	r3, #2
 80022a4:	e002      	b.n	80022ac <HAL_GPIO_Init+0x21c>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <HAL_GPIO_Init+0x21c>
 80022aa:	2300      	movs	r3, #0
 80022ac:	69fa      	ldr	r2, [r7, #28]
 80022ae:	f002 0203 	and.w	r2, r2, #3
 80022b2:	0092      	lsls	r2, r2, #2
 80022b4:	4093      	lsls	r3, r2
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022bc:	4935      	ldr	r1, [pc, #212]	@ (8002394 <HAL_GPIO_Init+0x304>)
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	089b      	lsrs	r3, r3, #2
 80022c2:	3302      	adds	r3, #2
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022ca:	4b3a      	ldr	r3, [pc, #232]	@ (80023b4 <HAL_GPIO_Init+0x324>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	43db      	mvns	r3, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4013      	ands	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ee:	4a31      	ldr	r2, [pc, #196]	@ (80023b4 <HAL_GPIO_Init+0x324>)
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022f4:	4b2f      	ldr	r3, [pc, #188]	@ (80023b4 <HAL_GPIO_Init+0x324>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002318:	4a26      	ldr	r2, [pc, #152]	@ (80023b4 <HAL_GPIO_Init+0x324>)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800231e:	4b25      	ldr	r3, [pc, #148]	@ (80023b4 <HAL_GPIO_Init+0x324>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	43db      	mvns	r3, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4013      	ands	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002342:	4a1c      	ldr	r2, [pc, #112]	@ (80023b4 <HAL_GPIO_Init+0x324>)
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002348:	4b1a      	ldr	r3, [pc, #104]	@ (80023b4 <HAL_GPIO_Init+0x324>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800236c:	4a11      	ldr	r2, [pc, #68]	@ (80023b4 <HAL_GPIO_Init+0x324>)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3301      	adds	r3, #1
 8002376:	61fb      	str	r3, [r7, #28]
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	2b0f      	cmp	r3, #15
 800237c:	f67f ae96 	bls.w	80020ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002380:	bf00      	nop
 8002382:	bf00      	nop
 8002384:	3724      	adds	r7, #36	@ 0x24
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	40023800 	.word	0x40023800
 8002394:	40013800 	.word	0x40013800
 8002398:	40020000 	.word	0x40020000
 800239c:	40020400 	.word	0x40020400
 80023a0:	40020800 	.word	0x40020800
 80023a4:	40020c00 	.word	0x40020c00
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40021400 	.word	0x40021400
 80023b0:	40021800 	.word	0x40021800
 80023b4:	40013c00 	.word	0x40013c00

080023b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	887b      	ldrh	r3, [r7, #2]
 80023ca:	4013      	ands	r3, r2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d002      	beq.n	80023d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023d0:	2301      	movs	r3, #1
 80023d2:	73fb      	strb	r3, [r7, #15]
 80023d4:	e001      	b.n	80023da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023d6:	2300      	movs	r3, #0
 80023d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023da:	7bfb      	ldrb	r3, [r7, #15]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	807b      	strh	r3, [r7, #2]
 80023f4:	4613      	mov	r3, r2
 80023f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023f8:	787b      	ldrb	r3, [r7, #1]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023fe:	887a      	ldrh	r2, [r7, #2]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002404:	e003      	b.n	800240e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002406:	887b      	ldrh	r3, [r7, #2]
 8002408:	041a      	lsls	r2, r3, #16
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	619a      	str	r2, [r3, #24]
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
	...

0800241c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e12b      	b.n	8002686 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d106      	bne.n	8002448 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7fe fdec 	bl	8001020 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2224      	movs	r2, #36	@ 0x24
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0201 	bic.w	r2, r2, #1
 800245e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800246e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800247e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002480:	f002 fce8 	bl	8004e54 <HAL_RCC_GetPCLK1Freq>
 8002484:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	4a81      	ldr	r2, [pc, #516]	@ (8002690 <HAL_I2C_Init+0x274>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d807      	bhi.n	80024a0 <HAL_I2C_Init+0x84>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4a80      	ldr	r2, [pc, #512]	@ (8002694 <HAL_I2C_Init+0x278>)
 8002494:	4293      	cmp	r3, r2
 8002496:	bf94      	ite	ls
 8002498:	2301      	movls	r3, #1
 800249a:	2300      	movhi	r3, #0
 800249c:	b2db      	uxtb	r3, r3
 800249e:	e006      	b.n	80024ae <HAL_I2C_Init+0x92>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4a7d      	ldr	r2, [pc, #500]	@ (8002698 <HAL_I2C_Init+0x27c>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	bf94      	ite	ls
 80024a8:	2301      	movls	r3, #1
 80024aa:	2300      	movhi	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e0e7      	b.n	8002686 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4a78      	ldr	r2, [pc, #480]	@ (800269c <HAL_I2C_Init+0x280>)
 80024ba:	fba2 2303 	umull	r2, r3, r2, r3
 80024be:	0c9b      	lsrs	r3, r3, #18
 80024c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	4a6a      	ldr	r2, [pc, #424]	@ (8002690 <HAL_I2C_Init+0x274>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d802      	bhi.n	80024f0 <HAL_I2C_Init+0xd4>
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	3301      	adds	r3, #1
 80024ee:	e009      	b.n	8002504 <HAL_I2C_Init+0xe8>
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80024f6:	fb02 f303 	mul.w	r3, r2, r3
 80024fa:	4a69      	ldr	r2, [pc, #420]	@ (80026a0 <HAL_I2C_Init+0x284>)
 80024fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002500:	099b      	lsrs	r3, r3, #6
 8002502:	3301      	adds	r3, #1
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	6812      	ldr	r2, [r2, #0]
 8002508:	430b      	orrs	r3, r1
 800250a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002516:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	495c      	ldr	r1, [pc, #368]	@ (8002690 <HAL_I2C_Init+0x274>)
 8002520:	428b      	cmp	r3, r1
 8002522:	d819      	bhi.n	8002558 <HAL_I2C_Init+0x13c>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	1e59      	subs	r1, r3, #1
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002532:	1c59      	adds	r1, r3, #1
 8002534:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002538:	400b      	ands	r3, r1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00a      	beq.n	8002554 <HAL_I2C_Init+0x138>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	1e59      	subs	r1, r3, #1
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	fbb1 f3f3 	udiv	r3, r1, r3
 800254c:	3301      	adds	r3, #1
 800254e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002552:	e051      	b.n	80025f8 <HAL_I2C_Init+0x1dc>
 8002554:	2304      	movs	r3, #4
 8002556:	e04f      	b.n	80025f8 <HAL_I2C_Init+0x1dc>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d111      	bne.n	8002584 <HAL_I2C_Init+0x168>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	1e58      	subs	r0, r3, #1
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6859      	ldr	r1, [r3, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	440b      	add	r3, r1
 800256e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002572:	3301      	adds	r3, #1
 8002574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002578:	2b00      	cmp	r3, #0
 800257a:	bf0c      	ite	eq
 800257c:	2301      	moveq	r3, #1
 800257e:	2300      	movne	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	e012      	b.n	80025aa <HAL_I2C_Init+0x18e>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	1e58      	subs	r0, r3, #1
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6859      	ldr	r1, [r3, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	0099      	lsls	r1, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	fbb0 f3f3 	udiv	r3, r0, r3
 800259a:	3301      	adds	r3, #1
 800259c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	bf0c      	ite	eq
 80025a4:	2301      	moveq	r3, #1
 80025a6:	2300      	movne	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_I2C_Init+0x196>
 80025ae:	2301      	movs	r3, #1
 80025b0:	e022      	b.n	80025f8 <HAL_I2C_Init+0x1dc>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10e      	bne.n	80025d8 <HAL_I2C_Init+0x1bc>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	1e58      	subs	r0, r3, #1
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6859      	ldr	r1, [r3, #4]
 80025c2:	460b      	mov	r3, r1
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	440b      	add	r3, r1
 80025c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80025cc:	3301      	adds	r3, #1
 80025ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025d6:	e00f      	b.n	80025f8 <HAL_I2C_Init+0x1dc>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	1e58      	subs	r0, r3, #1
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6859      	ldr	r1, [r3, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	0099      	lsls	r1, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ee:	3301      	adds	r3, #1
 80025f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	6809      	ldr	r1, [r1, #0]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69da      	ldr	r2, [r3, #28]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002626:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	6911      	ldr	r1, [r2, #16]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	68d2      	ldr	r2, [r2, #12]
 8002632:	4311      	orrs	r1, r2
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6812      	ldr	r2, [r2, #0]
 8002638:	430b      	orrs	r3, r1
 800263a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695a      	ldr	r2, [r3, #20]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0201 	orr.w	r2, r2, #1
 8002666:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2220      	movs	r2, #32
 8002672:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	000186a0 	.word	0x000186a0
 8002694:	001e847f 	.word	0x001e847f
 8002698:	003d08ff 	.word	0x003d08ff
 800269c:	431bde83 	.word	0x431bde83
 80026a0:	10624dd3 	.word	0x10624dd3

080026a4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026b6:	2b80      	cmp	r3, #128	@ 0x80
 80026b8:	d103      	bne.n	80026c2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2200      	movs	r2, #0
 80026c0:	611a      	str	r2, [r3, #16]
  }
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
	...

080026d0 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08a      	sub	sp, #40	@ 0x28
 80026d4:	af02      	add	r7, sp, #8
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	4608      	mov	r0, r1
 80026da:	4611      	mov	r1, r2
 80026dc:	461a      	mov	r2, r3
 80026de:	4603      	mov	r3, r0
 80026e0:	817b      	strh	r3, [r7, #10]
 80026e2:	460b      	mov	r3, r1
 80026e4:	813b      	strh	r3, [r7, #8]
 80026e6:	4613      	mov	r3, r2
 80026e8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026ee:	f7fe ff95 	bl	800161c <HAL_GetTick>
 80026f2:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b20      	cmp	r3, #32
 80026fe:	f040 8136 	bne.w	800296e <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002702:	4b9d      	ldr	r3, [pc, #628]	@ (8002978 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	08db      	lsrs	r3, r3, #3
 8002708:	4a9c      	ldr	r2, [pc, #624]	@ (800297c <HAL_I2C_Mem_Write_DMA+0x2ac>)
 800270a:	fba2 2303 	umull	r2, r3, r2, r3
 800270e:	0a1a      	lsrs	r2, r3, #8
 8002710:	4613      	mov	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	009a      	lsls	r2, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	3b01      	subs	r3, #1
 8002720:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d112      	bne.n	800274e <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2220      	movs	r2, #32
 8002732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002742:	f043 0220 	orr.w	r2, r3, #32
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800274a:	2302      	movs	r3, #2
 800274c:	e110      	b.n	8002970 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b02      	cmp	r3, #2
 800275a:	d0df      	beq.n	800271c <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002762:	2b01      	cmp	r3, #1
 8002764:	d101      	bne.n	800276a <HAL_I2C_Mem_Write_DMA+0x9a>
 8002766:	2302      	movs	r3, #2
 8002768:	e102      	b.n	8002970 <HAL_I2C_Mem_Write_DMA+0x2a0>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b01      	cmp	r3, #1
 800277e:	d007      	beq.n	8002790 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0201 	orr.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800279e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2221      	movs	r2, #33	@ 0x21
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2240      	movs	r2, #64	@ 0x40
 80027ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80027c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4a6c      	ldr	r2, [pc, #432]	@ (8002980 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 80027d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80027d2:	897a      	ldrh	r2, [r7, #10]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80027d8:	893a      	ldrh	r2, [r7, #8]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80027de:	88fa      	ldrh	r2, [r7, #6]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 80a9 	beq.w	8002946 <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d02a      	beq.n	8002852 <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002800:	4a60      	ldr	r2, [pc, #384]	@ (8002984 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8002802:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002808:	4a5f      	ldr	r2, [pc, #380]	@ (8002988 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 800280a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002810:	2200      	movs	r2, #0
 8002812:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002818:	2200      	movs	r2, #0
 800281a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002820:	2200      	movs	r2, #0
 8002822:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002828:	2200      	movs	r2, #0
 800282a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002834:	4619      	mov	r1, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	3310      	adds	r3, #16
 800283c:	461a      	mov	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002842:	f7ff f8b7 	bl	80019b4 <HAL_DMA_Start_IT>
 8002846:	4603      	mov	r3, r0
 8002848:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800284a:	7efb      	ldrb	r3, [r7, #27]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d166      	bne.n	800291e <HAL_I2C_Mem_Write_DMA+0x24e>
 8002850:	e013      	b.n	800287a <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2220      	movs	r2, #32
 8002856:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002866:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e07a      	b.n	8002970 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800287a:	88f8      	ldrh	r0, [r7, #6]
 800287c:	893a      	ldrh	r2, [r7, #8]
 800287e:	8979      	ldrh	r1, [r7, #10]
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	9301      	str	r3, [sp, #4]
 8002884:	2323      	movs	r3, #35	@ 0x23
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	4603      	mov	r3, r0
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f001 fcd0 	bl	8004230 <I2C_RequestMemoryWrite>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d022      	beq.n	80028dc <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff f952 	bl	8001b44 <HAL_DMA_Abort_IT>
 80028a0:	4603      	mov	r3, r0
 80028a2:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028a8:	2200      	movs	r2, #0
 80028aa:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028ba:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0201 	bic.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e049      	b.n	8002970 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028dc:	2300      	movs	r3, #0
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	613b      	str	r3, [r7, #16]
 80028f0:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002908:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002918:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 800291a:	2300      	movs	r3, #0
 800291c:	e028      	b.n	8002970 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2220      	movs	r2, #32
 8002922:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002932:	f043 0210 	orr.w	r2, r3, #16
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e014      	b.n	8002970 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2220      	movs	r2, #32
 800294a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 800296e:	2302      	movs	r3, #2
  }
}
 8002970:	4618      	mov	r0, r3
 8002972:	3720      	adds	r7, #32
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	2000000c 	.word	0x2000000c
 800297c:	14f8b589 	.word	0x14f8b589
 8002980:	ffff0000 	.word	0xffff0000
 8002984:	0800452d 	.word	0x0800452d
 8002988:	080046eb 	.word	0x080046eb

0800298c <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b08c      	sub	sp, #48	@ 0x30
 8002990:	af02      	add	r7, sp, #8
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	4608      	mov	r0, r1
 8002996:	4611      	mov	r1, r2
 8002998:	461a      	mov	r2, r3
 800299a:	4603      	mov	r3, r0
 800299c:	817b      	strh	r3, [r7, #10]
 800299e:	460b      	mov	r3, r1
 80029a0:	813b      	strh	r3, [r7, #8]
 80029a2:	4613      	mov	r3, r2
 80029a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029a6:	f7fe fe39 	bl	800161c <HAL_GetTick>
 80029aa:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b20      	cmp	r3, #32
 80029ba:	f040 8172 	bne.w	8002ca2 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80029be:	4b93      	ldr	r3, [pc, #588]	@ (8002c0c <HAL_I2C_Mem_Read_DMA+0x280>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	08db      	lsrs	r3, r3, #3
 80029c4:	4a92      	ldr	r2, [pc, #584]	@ (8002c10 <HAL_I2C_Mem_Read_DMA+0x284>)
 80029c6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ca:	0a1a      	lsrs	r2, r3, #8
 80029cc:	4613      	mov	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	009a      	lsls	r2, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	3b01      	subs	r3, #1
 80029dc:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d112      	bne.n	8002a0a <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2220      	movs	r2, #32
 80029ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fe:	f043 0220 	orr.w	r2, r3, #32
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8002a06:	2302      	movs	r3, #2
 8002a08:	e14c      	b.n	8002ca4 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d0df      	beq.n	80029d8 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d101      	bne.n	8002a26 <HAL_I2C_Mem_Read_DMA+0x9a>
 8002a22:	2302      	movs	r3, #2
 8002a24:	e13e      	b.n	8002ca4 <HAL_I2C_Mem_Read_DMA+0x318>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d007      	beq.n	8002a4c <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0201 	orr.w	r2, r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2222      	movs	r2, #34	@ 0x22
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2240      	movs	r2, #64	@ 0x40
 8002a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a76:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002a7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4a62      	ldr	r2, [pc, #392]	@ (8002c14 <HAL_I2C_Mem_Read_DMA+0x288>)
 8002a8c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8002a8e:	897a      	ldrh	r2, [r7, #10]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8002a94:	893a      	ldrh	r2, [r7, #8]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002a9a:	88fa      	ldrh	r2, [r7, #6]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 80cc 	beq.w	8002c48 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d02d      	beq.n	8002b14 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002abc:	4a56      	ldr	r2, [pc, #344]	@ (8002c18 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8002abe:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac4:	4a55      	ldr	r2, [pc, #340]	@ (8002c1c <HAL_I2C_Mem_Read_DMA+0x290>)
 8002ac6:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002acc:	2200      	movs	r2, #0
 8002ace:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002adc:	2200      	movs	r2, #0
 8002ade:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	3310      	adds	r3, #16
 8002af2:	4619      	mov	r1, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af8:	461a      	mov	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002afe:	f7fe ff59 	bl	80019b4 <HAL_DMA_Start_IT>
 8002b02:	4603      	mov	r3, r0
 8002b04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002b08:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f040 8087 	bne.w	8002c20 <HAL_I2C_Mem_Read_DMA+0x294>
 8002b12:	e013      	b.n	8002b3c <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b28:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e0b3      	b.n	8002ca4 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002b3c:	88f8      	ldrh	r0, [r7, #6]
 8002b3e:	893a      	ldrh	r2, [r7, #8]
 8002b40:	8979      	ldrh	r1, [r7, #10]
 8002b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b44:	9301      	str	r3, [sp, #4]
 8002b46:	2323      	movs	r3, #35	@ 0x23
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f001 fc05 	bl	800435c <I2C_RequestMemoryRead>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d023      	beq.n	8002ba0 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fe fff1 	bl	8001b44 <HAL_DMA_Abort_IT>
 8002b62:	4603      	mov	r3, r0
 8002b64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b7e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0201 	bic.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e081      	b.n	8002ca4 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d108      	bne.n	8002bba <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	e007      	b.n	8002bca <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002bc8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61bb      	str	r3, [r7, #24]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	61bb      	str	r3, [r7, #24]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	61bb      	str	r3, [r7, #24]
 8002bde:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bf6:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c06:	605a      	str	r2, [r3, #4]
 8002c08:	e049      	b.n	8002c9e <HAL_I2C_Mem_Read_DMA+0x312>
 8002c0a:	bf00      	nop
 8002c0c:	2000000c 	.word	0x2000000c
 8002c10:	14f8b589 	.word	0x14f8b589
 8002c14:	ffff0000 	.word	0xffff0000
 8002c18:	0800452d 	.word	0x0800452d
 8002c1c:	080046eb 	.word	0x080046eb
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c34:	f043 0210 	orr.w	r2, r3, #16
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e02d      	b.n	8002ca4 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002c48:	88f8      	ldrh	r0, [r7, #6]
 8002c4a:	893a      	ldrh	r2, [r7, #8]
 8002c4c:	8979      	ldrh	r1, [r7, #10]
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c50:	9301      	str	r3, [sp, #4]
 8002c52:	2323      	movs	r3, #35	@ 0x23
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	4603      	mov	r3, r0
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f001 fb7f 	bl	800435c <I2C_RequestMemoryRead>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e01d      	b.n	8002ca4 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c8c:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2220      	movs	r2, #32
 8002c92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	e000      	b.n	8002ca4 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 8002ca2:	2302      	movs	r3, #2
  }
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3728      	adds	r7, #40	@ 0x28
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ccc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cd4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	2b10      	cmp	r3, #16
 8002cda:	d003      	beq.n	8002ce4 <HAL_I2C_EV_IRQHandler+0x38>
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
 8002cde:	2b40      	cmp	r3, #64	@ 0x40
 8002ce0:	f040 80b1 	bne.w	8002e46 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10d      	bne.n	8002d1a <HAL_I2C_EV_IRQHandler+0x6e>
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002d04:	d003      	beq.n	8002d0e <HAL_I2C_EV_IRQHandler+0x62>
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002d0c:	d101      	bne.n	8002d12 <HAL_I2C_EV_IRQHandler+0x66>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <HAL_I2C_EV_IRQHandler+0x68>
 8002d12:	2300      	movs	r3, #0
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	f000 8114 	beq.w	8002f42 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00b      	beq.n	8002d3c <HAL_I2C_EV_IRQHandler+0x90>
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d006      	beq.n	8002d3c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f001 ff83 	bl	8004c3a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 fcd1 	bl	80036dc <I2C_Master_SB>
 8002d3a:	e083      	b.n	8002e44 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d008      	beq.n	8002d58 <HAL_I2C_EV_IRQHandler+0xac>
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 fd49 	bl	80037e8 <I2C_Master_ADD10>
 8002d56:	e075      	b.n	8002e44 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d008      	beq.n	8002d74 <HAL_I2C_EV_IRQHandler+0xc8>
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 fd65 	bl	800383c <I2C_Master_ADDR>
 8002d72:	e067      	b.n	8002e44 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	f003 0304 	and.w	r3, r3, #4
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d036      	beq.n	8002dec <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d8c:	f000 80db 	beq.w	8002f46 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00d      	beq.n	8002db6 <HAL_I2C_EV_IRQHandler+0x10a>
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d008      	beq.n	8002db6 <HAL_I2C_EV_IRQHandler+0x10a>
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f003 0304 	and.w	r3, r3, #4
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d103      	bne.n	8002db6 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f92d 	bl	800300e <I2C_MasterTransmit_TXE>
 8002db4:	e046      	b.n	8002e44 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 80c2 	beq.w	8002f46 <HAL_I2C_EV_IRQHandler+0x29a>
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 80bc 	beq.w	8002f46 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002dce:	7bbb      	ldrb	r3, [r7, #14]
 8002dd0:	2b21      	cmp	r3, #33	@ 0x21
 8002dd2:	d103      	bne.n	8002ddc <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f9b6 	bl	8003146 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dda:	e0b4      	b.n	8002f46 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	2b40      	cmp	r3, #64	@ 0x40
 8002de0:	f040 80b1 	bne.w	8002f46 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 fa24 	bl	8003232 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dea:	e0ac      	b.n	8002f46 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002df6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dfa:	f000 80a4 	beq.w	8002f46 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00d      	beq.n	8002e24 <HAL_I2C_EV_IRQHandler+0x178>
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d008      	beq.n	8002e24 <HAL_I2C_EV_IRQHandler+0x178>
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d103      	bne.n	8002e24 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 faa0 	bl	8003362 <I2C_MasterReceive_RXNE>
 8002e22:	e00f      	b.n	8002e44 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 808b 	beq.w	8002f46 <HAL_I2C_EV_IRQHandler+0x29a>
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 8085 	beq.w	8002f46 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 fb58 	bl	80034f2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e42:	e080      	b.n	8002f46 <HAL_I2C_EV_IRQHandler+0x29a>
 8002e44:	e07f      	b.n	8002f46 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d004      	beq.n	8002e58 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	61fb      	str	r3, [r7, #28]
 8002e56:	e007      	b.n	8002e68 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d011      	beq.n	8002e96 <HAL_I2C_EV_IRQHandler+0x1ea>
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00c      	beq.n	8002e96 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002e8c:	69b9      	ldr	r1, [r7, #24]
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 ff23 	bl	8003cda <I2C_Slave_ADDR>
 8002e94:	e05a      	b.n	8002f4c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	f003 0310 	and.w	r3, r3, #16
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d008      	beq.n	8002eb2 <HAL_I2C_EV_IRQHandler+0x206>
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 ff5e 	bl	8003d6c <I2C_Slave_STOPF>
 8002eb0:	e04c      	b.n	8002f4c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002eb2:	7bbb      	ldrb	r3, [r7, #14]
 8002eb4:	2b21      	cmp	r3, #33	@ 0x21
 8002eb6:	d002      	beq.n	8002ebe <HAL_I2C_EV_IRQHandler+0x212>
 8002eb8:	7bbb      	ldrb	r3, [r7, #14]
 8002eba:	2b29      	cmp	r3, #41	@ 0x29
 8002ebc:	d120      	bne.n	8002f00 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00d      	beq.n	8002ee4 <HAL_I2C_EV_IRQHandler+0x238>
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d008      	beq.n	8002ee4 <HAL_I2C_EV_IRQHandler+0x238>
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d103      	bne.n	8002ee4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 fe3e 	bl	8003b5e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ee2:	e032      	b.n	8002f4a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d02d      	beq.n	8002f4a <HAL_I2C_EV_IRQHandler+0x29e>
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d028      	beq.n	8002f4a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 fe6d 	bl	8003bd8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002efe:	e024      	b.n	8002f4a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00d      	beq.n	8002f26 <HAL_I2C_EV_IRQHandler+0x27a>
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d008      	beq.n	8002f26 <HAL_I2C_EV_IRQHandler+0x27a>
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	f003 0304 	and.w	r3, r3, #4
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d103      	bne.n	8002f26 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 fe7b 	bl	8003c1a <I2C_SlaveReceive_RXNE>
 8002f24:	e012      	b.n	8002f4c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00d      	beq.n	8002f4c <HAL_I2C_EV_IRQHandler+0x2a0>
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d008      	beq.n	8002f4c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 feab 	bl	8003c96 <I2C_SlaveReceive_BTF>
 8002f40:	e004      	b.n	8002f4c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002f42:	bf00      	nop
 8002f44:	e002      	b.n	8002f4c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f46:	bf00      	nop
 8002f48:	e000      	b.n	8002f4c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f4a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002f4c:	3720      	adds	r7, #32
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	460b      	mov	r3, r1
 8002fac:	70fb      	strb	r3, [r7, #3]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b083      	sub	sp, #12
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b084      	sub	sp, #16
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800301c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003024:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800302a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003030:	2b00      	cmp	r3, #0
 8003032:	d150      	bne.n	80030d6 <I2C_MasterTransmit_TXE+0xc8>
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	2b21      	cmp	r3, #33	@ 0x21
 8003038:	d14d      	bne.n	80030d6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	2b08      	cmp	r3, #8
 800303e:	d01d      	beq.n	800307c <I2C_MasterTransmit_TXE+0x6e>
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2b20      	cmp	r3, #32
 8003044:	d01a      	beq.n	800307c <I2C_MasterTransmit_TXE+0x6e>
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800304c:	d016      	beq.n	800307c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800305c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2211      	movs	r2, #17
 8003062:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2220      	movs	r2, #32
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7ff ff6c 	bl	8002f52 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800307a:	e060      	b.n	800313e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800308a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800309a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b40      	cmp	r3, #64	@ 0x40
 80030b4:	d107      	bne.n	80030c6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7ff ff87 	bl	8002fd2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030c4:	e03b      	b.n	800313e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7ff ff3f 	bl	8002f52 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030d4:	e033      	b.n	800313e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
 80030d8:	2b21      	cmp	r3, #33	@ 0x21
 80030da:	d005      	beq.n	80030e8 <I2C_MasterTransmit_TXE+0xda>
 80030dc:	7bbb      	ldrb	r3, [r7, #14]
 80030de:	2b40      	cmp	r3, #64	@ 0x40
 80030e0:	d12d      	bne.n	800313e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80030e2:	7bfb      	ldrb	r3, [r7, #15]
 80030e4:	2b22      	cmp	r3, #34	@ 0x22
 80030e6:	d12a      	bne.n	800313e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d108      	bne.n	8003104 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003100:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003102:	e01c      	b.n	800313e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b40      	cmp	r3, #64	@ 0x40
 800310e:	d103      	bne.n	8003118 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f88e 	bl	8003232 <I2C_MemoryTransmit_TXE_BTF>
}
 8003116:	e012      	b.n	800313e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311c:	781a      	ldrb	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003132:	b29b      	uxth	r3, r3
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800313c:	e7ff      	b.n	800313e <I2C_MasterTransmit_TXE+0x130>
 800313e:	bf00      	nop
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b084      	sub	sp, #16
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003152:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b21      	cmp	r3, #33	@ 0x21
 800315e:	d164      	bne.n	800322a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003164:	b29b      	uxth	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d012      	beq.n	8003190 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316e:	781a      	ldrb	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003184:	b29b      	uxth	r3, r3
 8003186:	3b01      	subs	r3, #1
 8003188:	b29a      	uxth	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800318e:	e04c      	b.n	800322a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2b08      	cmp	r3, #8
 8003194:	d01d      	beq.n	80031d2 <I2C_MasterTransmit_BTF+0x8c>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2b20      	cmp	r3, #32
 800319a:	d01a      	beq.n	80031d2 <I2C_MasterTransmit_BTF+0x8c>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80031a2:	d016      	beq.n	80031d2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80031b2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2211      	movs	r2, #17
 80031b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2220      	movs	r2, #32
 80031c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7ff fec1 	bl	8002f52 <HAL_I2C_MasterTxCpltCallback>
}
 80031d0:	e02b      	b.n	800322a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80031e0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031f0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b40      	cmp	r3, #64	@ 0x40
 800320a:	d107      	bne.n	800321c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7ff fedc 	bl	8002fd2 <HAL_I2C_MemTxCpltCallback>
}
 800321a:	e006      	b.n	800322a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7ff fe94 	bl	8002f52 <HAL_I2C_MasterTxCpltCallback>
}
 800322a:	bf00      	nop
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b084      	sub	sp, #16
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003240:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003246:	2b00      	cmp	r3, #0
 8003248:	d11d      	bne.n	8003286 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800324e:	2b01      	cmp	r3, #1
 8003250:	d10b      	bne.n	800326a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003256:	b2da      	uxtb	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003262:	1c9a      	adds	r2, r3, #2
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003268:	e077      	b.n	800335a <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800326e:	b29b      	uxth	r3, r3
 8003270:	121b      	asrs	r3, r3, #8
 8003272:	b2da      	uxtb	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800327e:	1c5a      	adds	r2, r3, #1
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003284:	e069      	b.n	800335a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800328a:	2b01      	cmp	r3, #1
 800328c:	d10b      	bne.n	80032a6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003292:	b2da      	uxtb	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800329e:	1c5a      	adds	r2, r3, #1
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80032a4:	e059      	b.n	800335a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d152      	bne.n	8003354 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
 80032b0:	2b22      	cmp	r3, #34	@ 0x22
 80032b2:	d10d      	bne.n	80032d0 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032c2:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80032ce:	e044      	b.n	800335a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d015      	beq.n	8003306 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80032da:	7bfb      	ldrb	r3, [r7, #15]
 80032dc:	2b21      	cmp	r3, #33	@ 0x21
 80032de:	d112      	bne.n	8003306 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e4:	781a      	ldrb	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f0:	1c5a      	adds	r2, r3, #1
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	3b01      	subs	r3, #1
 80032fe:	b29a      	uxth	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003304:	e029      	b.n	800335a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800330a:	b29b      	uxth	r3, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	d124      	bne.n	800335a <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003310:	7bfb      	ldrb	r3, [r7, #15]
 8003312:	2b21      	cmp	r3, #33	@ 0x21
 8003314:	d121      	bne.n	800335a <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003324:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003334:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7ff fe40 	bl	8002fd2 <HAL_I2C_MemTxCpltCallback>
}
 8003352:	e002      	b.n	800335a <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff f9a5 	bl	80026a4 <I2C_Flush_DR>
}
 800335a:	bf00      	nop
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b084      	sub	sp, #16
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b22      	cmp	r3, #34	@ 0x22
 8003374:	f040 80b9 	bne.w	80034ea <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800337c:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003382:	b29b      	uxth	r3, r3
 8003384:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b03      	cmp	r3, #3
 800338a:	d921      	bls.n	80033d0 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	691a      	ldr	r2, [r3, #16]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	2b03      	cmp	r3, #3
 80033ba:	f040 8096 	bne.w	80034ea <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033cc:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80033ce:	e08c      	b.n	80034ea <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d07f      	beq.n	80034d8 <I2C_MasterReceive_RXNE+0x176>
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d002      	beq.n	80033e4 <I2C_MasterReceive_RXNE+0x82>
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d179      	bne.n	80034d8 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f001 fbc7 	bl	8004b78 <I2C_WaitOnSTOPRequestThroughIT>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d14c      	bne.n	800348a <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033fe:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800340e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691a      	ldr	r2, [r3, #16]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800342c:	b29b      	uxth	r3, r3
 800342e:	3b01      	subs	r3, #1
 8003430:	b29a      	uxth	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2220      	movs	r2, #32
 800343a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b40      	cmp	r3, #64	@ 0x40
 8003448:	d10a      	bne.n	8003460 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7fd fb2f 	bl	8000abc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800345e:	e044      	b.n	80034ea <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2b08      	cmp	r3, #8
 800346c:	d002      	beq.n	8003474 <I2C_MasterReceive_RXNE+0x112>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2b20      	cmp	r3, #32
 8003472:	d103      	bne.n	800347c <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	631a      	str	r2, [r3, #48]	@ 0x30
 800347a:	e002      	b.n	8003482 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2212      	movs	r2, #18
 8003480:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7ff fd6f 	bl	8002f66 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003488:	e02f      	b.n	80034ea <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003498:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a4:	b2d2      	uxtb	r2, r2
 80034a6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	3b01      	subs	r3, #1
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7ff fd88 	bl	8002fe6 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80034d6:	e008      	b.n	80034ea <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034e6:	605a      	str	r2, [r3, #4]
}
 80034e8:	e7ff      	b.n	80034ea <I2C_MasterReceive_RXNE+0x188>
 80034ea:	bf00      	nop
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b084      	sub	sp, #16
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034fe:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003504:	b29b      	uxth	r3, r3
 8003506:	2b04      	cmp	r3, #4
 8003508:	d11b      	bne.n	8003542 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003518:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	691a      	ldr	r2, [r3, #16]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003524:	b2d2      	uxtb	r2, r2
 8003526:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352c:	1c5a      	adds	r2, r3, #1
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003536:	b29b      	uxth	r3, r3
 8003538:	3b01      	subs	r3, #1
 800353a:	b29a      	uxth	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003540:	e0c8      	b.n	80036d4 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003546:	b29b      	uxth	r3, r3
 8003548:	2b03      	cmp	r3, #3
 800354a:	d129      	bne.n	80035a0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800355a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2b04      	cmp	r3, #4
 8003560:	d00a      	beq.n	8003578 <I2C_MasterReceive_BTF+0x86>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2b02      	cmp	r3, #2
 8003566:	d007      	beq.n	8003578 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003576:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	691a      	ldr	r2, [r3, #16]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003594:	b29b      	uxth	r3, r3
 8003596:	3b01      	subs	r3, #1
 8003598:	b29a      	uxth	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800359e:	e099      	b.n	80036d4 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	f040 8081 	bne.w	80036ae <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d002      	beq.n	80035b8 <I2C_MasterReceive_BTF+0xc6>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2b10      	cmp	r3, #16
 80035b6:	d108      	bne.n	80035ca <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	e019      	b.n	80035fe <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d002      	beq.n	80035d6 <I2C_MasterReceive_BTF+0xe4>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d108      	bne.n	80035e8 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	e00a      	b.n	80035fe <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2b10      	cmp	r3, #16
 80035ec:	d007      	beq.n	80035fe <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035fc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003610:	1c5a      	adds	r2, r3, #1
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361a:	b29b      	uxth	r3, r3
 800361c:	3b01      	subs	r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691a      	ldr	r2, [r3, #16]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003640:	b29b      	uxth	r3, r3
 8003642:	3b01      	subs	r3, #1
 8003644:	b29a      	uxth	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003658:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2220      	movs	r2, #32
 800365e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b40      	cmp	r3, #64	@ 0x40
 800366c:	d10a      	bne.n	8003684 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7fd fa1d 	bl	8000abc <HAL_I2C_MemRxCpltCallback>
}
 8003682:	e027      	b.n	80036d4 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2b08      	cmp	r3, #8
 8003690:	d002      	beq.n	8003698 <I2C_MasterReceive_BTF+0x1a6>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2b20      	cmp	r3, #32
 8003696:	d103      	bne.n	80036a0 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	631a      	str	r2, [r3, #48]	@ 0x30
 800369e:	e002      	b.n	80036a6 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2212      	movs	r2, #18
 80036a4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff fc5d 	bl	8002f66 <HAL_I2C_MasterRxCpltCallback>
}
 80036ac:	e012      	b.n	80036d4 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	691a      	ldr	r2, [r3, #16]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b8:	b2d2      	uxtb	r2, r2
 80036ba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80036d4:	bf00      	nop
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b40      	cmp	r3, #64	@ 0x40
 80036ee:	d117      	bne.n	8003720 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d109      	bne.n	800370c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	461a      	mov	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003708:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800370a:	e067      	b.n	80037dc <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003710:	b2db      	uxtb	r3, r3
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	b2da      	uxtb	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	611a      	str	r2, [r3, #16]
}
 800371e:	e05d      	b.n	80037dc <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003728:	d133      	bne.n	8003792 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b21      	cmp	r3, #33	@ 0x21
 8003734:	d109      	bne.n	800374a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373a:	b2db      	uxtb	r3, r3
 800373c:	461a      	mov	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003746:	611a      	str	r2, [r3, #16]
 8003748:	e008      	b.n	800375c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374e:	b2db      	uxtb	r3, r3
 8003750:	f043 0301 	orr.w	r3, r3, #1
 8003754:	b2da      	uxtb	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003760:	2b00      	cmp	r3, #0
 8003762:	d004      	beq.n	800376e <I2C_Master_SB+0x92>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800376a:	2b00      	cmp	r3, #0
 800376c:	d108      	bne.n	8003780 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003772:	2b00      	cmp	r3, #0
 8003774:	d032      	beq.n	80037dc <I2C_Master_SB+0x100>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800377a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800377c:	2b00      	cmp	r3, #0
 800377e:	d02d      	beq.n	80037dc <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800378e:	605a      	str	r2, [r3, #4]
}
 8003790:	e024      	b.n	80037dc <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10e      	bne.n	80037b8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800379e:	b29b      	uxth	r3, r3
 80037a0:	11db      	asrs	r3, r3, #7
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	f003 0306 	and.w	r3, r3, #6
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	f063 030f 	orn	r3, r3, #15
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	611a      	str	r2, [r3, #16]
}
 80037b6:	e011      	b.n	80037dc <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d10d      	bne.n	80037dc <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	11db      	asrs	r3, r3, #7
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	f003 0306 	and.w	r3, r3, #6
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	f063 030e 	orn	r3, r3, #14
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	611a      	str	r2, [r3, #16]
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003800:	2b00      	cmp	r3, #0
 8003802:	d004      	beq.n	800380e <I2C_Master_ADD10+0x26>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800380a:	2b00      	cmp	r3, #0
 800380c:	d108      	bne.n	8003820 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00c      	beq.n	8003830 <I2C_Master_ADD10+0x48>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800381a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800381c:	2b00      	cmp	r3, #0
 800381e:	d007      	beq.n	8003830 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800382e:	605a      	str	r2, [r3, #4]
  }
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800383c:	b480      	push	{r7}
 800383e:	b091      	sub	sp, #68	@ 0x44
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800384a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003852:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003858:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b22      	cmp	r3, #34	@ 0x22
 8003864:	f040 8169 	bne.w	8003b3a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10f      	bne.n	8003890 <I2C_Master_ADDR+0x54>
 8003870:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003874:	2b40      	cmp	r3, #64	@ 0x40
 8003876:	d10b      	bne.n	8003890 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003878:	2300      	movs	r3, #0
 800387a:	633b      	str	r3, [r7, #48]	@ 0x30
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	633b      	str	r3, [r7, #48]	@ 0x30
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	633b      	str	r3, [r7, #48]	@ 0x30
 800388c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800388e:	e160      	b.n	8003b52 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003894:	2b00      	cmp	r3, #0
 8003896:	d11d      	bne.n	80038d4 <I2C_Master_ADDR+0x98>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80038a0:	d118      	bne.n	80038d4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a2:	2300      	movs	r3, #0
 80038a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038c6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038cc:	1c5a      	adds	r2, r3, #1
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	651a      	str	r2, [r3, #80]	@ 0x50
 80038d2:	e13e      	b.n	8003b52 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d8:	b29b      	uxth	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d113      	bne.n	8003906 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038de:	2300      	movs	r3, #0
 80038e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	e115      	b.n	8003b32 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800390a:	b29b      	uxth	r3, r3
 800390c:	2b01      	cmp	r3, #1
 800390e:	f040 808a 	bne.w	8003a26 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003914:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003918:	d137      	bne.n	800398a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003928:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003934:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003938:	d113      	bne.n	8003962 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003948:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800394a:	2300      	movs	r3, #0
 800394c:	627b      	str	r3, [r7, #36]	@ 0x24
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	627b      	str	r3, [r7, #36]	@ 0x24
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	627b      	str	r3, [r7, #36]	@ 0x24
 800395e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003960:	e0e7      	b.n	8003b32 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003962:	2300      	movs	r3, #0
 8003964:	623b      	str	r3, [r7, #32]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	623b      	str	r3, [r7, #32]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	623b      	str	r3, [r7, #32]
 8003976:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	e0d3      	b.n	8003b32 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800398a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800398c:	2b08      	cmp	r3, #8
 800398e:	d02e      	beq.n	80039ee <I2C_Master_ADDR+0x1b2>
 8003990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003992:	2b20      	cmp	r3, #32
 8003994:	d02b      	beq.n	80039ee <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003998:	2b12      	cmp	r3, #18
 800399a:	d102      	bne.n	80039a2 <I2C_Master_ADDR+0x166>
 800399c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d125      	bne.n	80039ee <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80039a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d00e      	beq.n	80039c6 <I2C_Master_ADDR+0x18a>
 80039a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d00b      	beq.n	80039c6 <I2C_Master_ADDR+0x18a>
 80039ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039b0:	2b10      	cmp	r3, #16
 80039b2:	d008      	beq.n	80039c6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	e007      	b.n	80039d6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80039d4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039d6:	2300      	movs	r3, #0
 80039d8:	61fb      	str	r3, [r7, #28]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	61fb      	str	r3, [r7, #28]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	61fb      	str	r3, [r7, #28]
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	e0a1      	b.n	8003b32 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039fc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039fe:	2300      	movs	r3, #0
 8003a00:	61bb      	str	r3, [r7, #24]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	61bb      	str	r3, [r7, #24]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	61bb      	str	r3, [r7, #24]
 8003a12:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	e085      	b.n	8003b32 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d14d      	bne.n	8003acc <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d016      	beq.n	8003a64 <I2C_Master_ADDR+0x228>
 8003a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d013      	beq.n	8003a64 <I2C_Master_ADDR+0x228>
 8003a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a3e:	2b10      	cmp	r3, #16
 8003a40:	d010      	beq.n	8003a64 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a50:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	e007      	b.n	8003a74 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a72:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a82:	d117      	bne.n	8003ab4 <I2C_Master_ADDR+0x278>
 8003a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a86:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a8a:	d00b      	beq.n	8003aa4 <I2C_Master_ADDR+0x268>
 8003a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d008      	beq.n	8003aa4 <I2C_Master_ADDR+0x268>
 8003a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a94:	2b08      	cmp	r3, #8
 8003a96:	d005      	beq.n	8003aa4 <I2C_Master_ADDR+0x268>
 8003a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a9a:	2b10      	cmp	r3, #16
 8003a9c:	d002      	beq.n	8003aa4 <I2C_Master_ADDR+0x268>
 8003a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aa0:	2b20      	cmp	r3, #32
 8003aa2:	d107      	bne.n	8003ab4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ab2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	617b      	str	r3, [r7, #20]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	e032      	b.n	8003b32 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ada:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ae6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003aea:	d117      	bne.n	8003b1c <I2C_Master_ADDR+0x2e0>
 8003aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003af2:	d00b      	beq.n	8003b0c <I2C_Master_ADDR+0x2d0>
 8003af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d008      	beq.n	8003b0c <I2C_Master_ADDR+0x2d0>
 8003afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003afc:	2b08      	cmp	r3, #8
 8003afe:	d005      	beq.n	8003b0c <I2C_Master_ADDR+0x2d0>
 8003b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b02:	2b10      	cmp	r3, #16
 8003b04:	d002      	beq.n	8003b0c <I2C_Master_ADDR+0x2d0>
 8003b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b08:	2b20      	cmp	r3, #32
 8003b0a:	d107      	bne.n	8003b1c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b1a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	613b      	str	r3, [r7, #16]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	613b      	str	r3, [r7, #16]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	613b      	str	r3, [r7, #16]
 8003b30:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003b38:	e00b      	b.n	8003b52 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60fb      	str	r3, [r7, #12]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	60fb      	str	r3, [r7, #12]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	60fb      	str	r3, [r7, #12]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
}
 8003b50:	e7ff      	b.n	8003b52 <I2C_Master_ADDR+0x316>
 8003b52:	bf00      	nop
 8003b54:	3744      	adds	r7, #68	@ 0x44
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b084      	sub	sp, #16
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b6c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d02b      	beq.n	8003bd0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7c:	781a      	ldrb	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b88:	1c5a      	adds	r2, r3, #1
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	3b01      	subs	r3, #1
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d114      	bne.n	8003bd0 <I2C_SlaveTransmit_TXE+0x72>
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
 8003ba8:	2b29      	cmp	r3, #41	@ 0x29
 8003baa:	d111      	bne.n	8003bd0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bba:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2221      	movs	r2, #33	@ 0x21
 8003bc0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2228      	movs	r2, #40	@ 0x28
 8003bc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7ff f9d5 	bl	8002f7a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003bd0:	bf00      	nop
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d011      	beq.n	8003c0e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bee:	781a      	ldrb	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003c0e:	bf00      	nop
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b084      	sub	sp, #16
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c28:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d02c      	beq.n	8003c8e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	691a      	ldr	r2, [r3, #16]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3e:	b2d2      	uxtb	r2, r2
 8003c40:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	3b01      	subs	r3, #1
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d114      	bne.n	8003c8e <I2C_SlaveReceive_RXNE+0x74>
 8003c64:	7bfb      	ldrb	r3, [r7, #15]
 8003c66:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c68:	d111      	bne.n	8003c8e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c78:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2222      	movs	r2, #34	@ 0x22
 8003c7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2228      	movs	r2, #40	@ 0x28
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7ff f980 	bl	8002f8e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003c8e:	bf00      	nop
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d012      	beq.n	8003cce <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	691a      	ldr	r2, [r3, #16]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb2:	b2d2      	uxtb	r2, r2
 8003cb4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cba:	1c5a      	adds	r2, r3, #1
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b084      	sub	sp, #16
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003cf4:	2b28      	cmp	r3, #40	@ 0x28
 8003cf6:	d125      	bne.n	8003d44 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d06:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	f003 0304 	and.w	r3, r3, #4
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003d12:	2301      	movs	r3, #1
 8003d14:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d103      	bne.n	8003d28 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	81bb      	strh	r3, [r7, #12]
 8003d26:	e002      	b.n	8003d2e <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003d36:	89ba      	ldrh	r2, [r7, #12]
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff f930 	bl	8002fa2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003d42:	e00e      	b.n	8003d62 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d44:	2300      	movs	r3, #0
 8003d46:	60bb      	str	r3, [r7, #8]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	60bb      	str	r3, [r7, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	60bb      	str	r3, [r7, #8]
 8003d58:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003d62:	bf00      	nop
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
	...

08003d6c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d7a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d8a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60bb      	str	r3, [r7, #8]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	60bb      	str	r3, [r7, #8]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0201 	orr.w	r2, r2, #1
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003db8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dc8:	d172      	bne.n	8003eb0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003dca:	7bfb      	ldrb	r3, [r7, #15]
 8003dcc:	2b22      	cmp	r3, #34	@ 0x22
 8003dce:	d002      	beq.n	8003dd6 <I2C_Slave_STOPF+0x6a>
 8003dd0:	7bfb      	ldrb	r3, [r7, #15]
 8003dd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003dd4:	d135      	bne.n	8003e42 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d005      	beq.n	8003dfa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df2:	f043 0204 	orr.w	r2, r3, #4
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e08:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fe f844 	bl	8001e9c <HAL_DMA_GetState>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d049      	beq.n	8003eae <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e1e:	4a69      	ldr	r2, [pc, #420]	@ (8003fc4 <I2C_Slave_STOPF+0x258>)
 8003e20:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fd fe8c 	bl	8001b44 <HAL_DMA_Abort_IT>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d03d      	beq.n	8003eae <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003e3c:	4610      	mov	r0, r2
 8003e3e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e40:	e035      	b.n	8003eae <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d005      	beq.n	8003e66 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5e:	f043 0204 	orr.w	r2, r3, #4
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e74:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fe f80e 	bl	8001e9c <HAL_DMA_GetState>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d014      	beq.n	8003eb0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e8a:	4a4e      	ldr	r2, [pc, #312]	@ (8003fc4 <I2C_Slave_STOPF+0x258>)
 8003e8c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fd fe56 	bl	8001b44 <HAL_DMA_Abort_IT>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d008      	beq.n	8003eb0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003ea8:	4610      	mov	r0, r2
 8003eaa:	4798      	blx	r3
 8003eac:	e000      	b.n	8003eb0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003eae:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d03e      	beq.n	8003f38 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	2b04      	cmp	r3, #4
 8003ec6:	d112      	bne.n	8003eee <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	691a      	ldr	r2, [r3, #16]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed2:	b2d2      	uxtb	r2, r2
 8003ed4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eda:	1c5a      	adds	r2, r3, #1
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef8:	2b40      	cmp	r3, #64	@ 0x40
 8003efa:	d112      	bne.n	8003f22 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	691a      	ldr	r2, [r3, #16]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f06:	b2d2      	uxtb	r2, r2
 8003f08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0e:	1c5a      	adds	r2, r3, #1
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d005      	beq.n	8003f38 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f30:	f043 0204 	orr.w	r2, r3, #4
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f843 	bl	8003fcc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003f46:	e039      	b.n	8003fbc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
 8003f4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f4c:	d109      	bne.n	8003f62 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2228      	movs	r2, #40	@ 0x28
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff f816 	bl	8002f8e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b28      	cmp	r3, #40	@ 0x28
 8003f6c:	d111      	bne.n	8003f92 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a15      	ldr	r2, [pc, #84]	@ (8003fc8 <I2C_Slave_STOPF+0x25c>)
 8003f72:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7ff f817 	bl	8002fbe <HAL_I2C_ListenCpltCallback>
}
 8003f90:	e014      	b.n	8003fbc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f96:	2b22      	cmp	r3, #34	@ 0x22
 8003f98:	d002      	beq.n	8003fa0 <I2C_Slave_STOPF+0x234>
 8003f9a:	7bfb      	ldrb	r3, [r7, #15]
 8003f9c:	2b22      	cmp	r3, #34	@ 0x22
 8003f9e:	d10d      	bne.n	8003fbc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7fe ffe9 	bl	8002f8e <HAL_I2C_SlaveRxCpltCallback>
}
 8003fbc:	bf00      	nop
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	08004765 	.word	0x08004765
 8003fc8:	ffff0000 	.word	0xffff0000

08003fcc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fda:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fe2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003fe4:	7bbb      	ldrb	r3, [r7, #14]
 8003fe6:	2b10      	cmp	r3, #16
 8003fe8:	d002      	beq.n	8003ff0 <I2C_ITError+0x24>
 8003fea:	7bbb      	ldrb	r3, [r7, #14]
 8003fec:	2b40      	cmp	r3, #64	@ 0x40
 8003fee:	d10a      	bne.n	8004006 <I2C_ITError+0x3a>
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
 8003ff2:	2b22      	cmp	r3, #34	@ 0x22
 8003ff4:	d107      	bne.n	8004006 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004004:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004006:	7bfb      	ldrb	r3, [r7, #15]
 8004008:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800400c:	2b28      	cmp	r3, #40	@ 0x28
 800400e:	d107      	bne.n	8004020 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2228      	movs	r2, #40	@ 0x28
 800401a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800401e:	e015      	b.n	800404c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800402a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800402e:	d00a      	beq.n	8004046 <I2C_ITError+0x7a>
 8004030:	7bfb      	ldrb	r3, [r7, #15]
 8004032:	2b60      	cmp	r3, #96	@ 0x60
 8004034:	d007      	beq.n	8004046 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2220      	movs	r2, #32
 800403a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004056:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800405a:	d162      	bne.n	8004122 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800406a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004070:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b01      	cmp	r3, #1
 8004078:	d020      	beq.n	80040bc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800407e:	4a6a      	ldr	r2, [pc, #424]	@ (8004228 <I2C_ITError+0x25c>)
 8004080:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004086:	4618      	mov	r0, r3
 8004088:	f7fd fd5c 	bl	8001b44 <HAL_DMA_Abort_IT>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 8089 	beq.w	80041a6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0201 	bic.w	r2, r2, #1
 80040a2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80040b6:	4610      	mov	r0, r2
 80040b8:	4798      	blx	r3
 80040ba:	e074      	b.n	80041a6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c0:	4a59      	ldr	r2, [pc, #356]	@ (8004228 <I2C_ITError+0x25c>)
 80040c2:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fd fd3b 	bl	8001b44 <HAL_DMA_Abort_IT>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d068      	beq.n	80041a6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040de:	2b40      	cmp	r3, #64	@ 0x40
 80040e0:	d10b      	bne.n	80040fa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f4:	1c5a      	adds	r2, r3, #1
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0201 	bic.w	r2, r2, #1
 8004108:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2220      	movs	r2, #32
 800410e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800411c:	4610      	mov	r0, r2
 800411e:	4798      	blx	r3
 8004120:	e041      	b.n	80041a6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b60      	cmp	r3, #96	@ 0x60
 800412c:	d125      	bne.n	800417a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2220      	movs	r2, #32
 8004132:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004146:	2b40      	cmp	r3, #64	@ 0x40
 8004148:	d10b      	bne.n	8004162 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	691a      	ldr	r2, [r3, #16]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004154:	b2d2      	uxtb	r2, r2
 8004156:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415c:	1c5a      	adds	r2, r3, #1
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0201 	bic.w	r2, r2, #1
 8004170:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7fe ff41 	bl	8002ffa <HAL_I2C_AbortCpltCallback>
 8004178:	e015      	b.n	80041a6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004184:	2b40      	cmp	r3, #64	@ 0x40
 8004186:	d10b      	bne.n	80041a0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	691a      	ldr	r2, [r3, #16]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7fe ff20 	bl	8002fe6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041aa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10e      	bne.n	80041d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d109      	bne.n	80041d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d104      	bne.n	80041d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d007      	beq.n	80041e4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80041e2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041ea:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b04      	cmp	r3, #4
 80041f6:	d113      	bne.n	8004220 <I2C_ITError+0x254>
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	2b28      	cmp	r3, #40	@ 0x28
 80041fc:	d110      	bne.n	8004220 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a0a      	ldr	r2, [pc, #40]	@ (800422c <I2C_ITError+0x260>)
 8004202:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2220      	movs	r2, #32
 800420e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7fe fecf 	bl	8002fbe <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004220:	bf00      	nop
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	08004765 	.word	0x08004765
 800422c:	ffff0000 	.word	0xffff0000

08004230 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b088      	sub	sp, #32
 8004234:	af02      	add	r7, sp, #8
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	4608      	mov	r0, r1
 800423a:	4611      	mov	r1, r2
 800423c:	461a      	mov	r2, r3
 800423e:	4603      	mov	r3, r0
 8004240:	817b      	strh	r3, [r7, #10]
 8004242:	460b      	mov	r3, r1
 8004244:	813b      	strh	r3, [r7, #8]
 8004246:	4613      	mov	r3, r2
 8004248:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004258:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800425a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	2200      	movs	r2, #0
 8004262:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f000 fb24 	bl	80048b4 <I2C_WaitOnFlagUntilTimeout>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00d      	beq.n	800428e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800427c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004280:	d103      	bne.n	800428a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004288:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e05f      	b.n	800434e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800428e:	897b      	ldrh	r3, [r7, #10]
 8004290:	b2db      	uxtb	r3, r3
 8004292:	461a      	mov	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800429c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800429e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a0:	6a3a      	ldr	r2, [r7, #32]
 80042a2:	492d      	ldr	r1, [pc, #180]	@ (8004358 <I2C_RequestMemoryWrite+0x128>)
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f000 fb7f 	bl	80049a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e04c      	b.n	800434e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042b4:	2300      	movs	r3, #0
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	617b      	str	r3, [r7, #20]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	617b      	str	r3, [r7, #20]
 80042c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042cc:	6a39      	ldr	r1, [r7, #32]
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f000 fc0a 	bl	8004ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00d      	beq.n	80042f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042de:	2b04      	cmp	r3, #4
 80042e0:	d107      	bne.n	80042f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e02b      	b.n	800434e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042f6:	88fb      	ldrh	r3, [r7, #6]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d105      	bne.n	8004308 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042fc:	893b      	ldrh	r3, [r7, #8]
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	611a      	str	r2, [r3, #16]
 8004306:	e021      	b.n	800434c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004308:	893b      	ldrh	r3, [r7, #8]
 800430a:	0a1b      	lsrs	r3, r3, #8
 800430c:	b29b      	uxth	r3, r3
 800430e:	b2da      	uxtb	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004318:	6a39      	ldr	r1, [r7, #32]
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 fbe4 	bl	8004ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00d      	beq.n	8004342 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432a:	2b04      	cmp	r3, #4
 800432c:	d107      	bne.n	800433e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800433c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e005      	b.n	800434e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004342:	893b      	ldrh	r3, [r7, #8]
 8004344:	b2da      	uxtb	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3718      	adds	r7, #24
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	00010002 	.word	0x00010002

0800435c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b088      	sub	sp, #32
 8004360:	af02      	add	r7, sp, #8
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	4608      	mov	r0, r1
 8004366:	4611      	mov	r1, r2
 8004368:	461a      	mov	r2, r3
 800436a:	4603      	mov	r3, r0
 800436c:	817b      	strh	r3, [r7, #10]
 800436e:	460b      	mov	r3, r1
 8004370:	813b      	strh	r3, [r7, #8]
 8004372:	4613      	mov	r3, r2
 8004374:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004384:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004394:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	2200      	movs	r2, #0
 800439e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 fa86 	bl	80048b4 <I2C_WaitOnFlagUntilTimeout>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00d      	beq.n	80043ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043bc:	d103      	bne.n	80043c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e0aa      	b.n	8004520 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043ca:	897b      	ldrh	r3, [r7, #10]
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	461a      	mov	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80043d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043dc:	6a3a      	ldr	r2, [r7, #32]
 80043de:	4952      	ldr	r1, [pc, #328]	@ (8004528 <I2C_RequestMemoryRead+0x1cc>)
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 fae1 	bl	80049a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e097      	b.n	8004520 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043f0:	2300      	movs	r3, #0
 80043f2:	617b      	str	r3, [r7, #20]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	617b      	str	r3, [r7, #20]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	617b      	str	r3, [r7, #20]
 8004404:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004408:	6a39      	ldr	r1, [r7, #32]
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 fb6c 	bl	8004ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00d      	beq.n	8004432 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441a:	2b04      	cmp	r3, #4
 800441c:	d107      	bne.n	800442e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800442c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e076      	b.n	8004520 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004432:	88fb      	ldrh	r3, [r7, #6]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d105      	bne.n	8004444 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004438:	893b      	ldrh	r3, [r7, #8]
 800443a:	b2da      	uxtb	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	611a      	str	r2, [r3, #16]
 8004442:	e021      	b.n	8004488 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004444:	893b      	ldrh	r3, [r7, #8]
 8004446:	0a1b      	lsrs	r3, r3, #8
 8004448:	b29b      	uxth	r3, r3
 800444a:	b2da      	uxtb	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004454:	6a39      	ldr	r1, [r7, #32]
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 fb46 	bl	8004ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00d      	beq.n	800447e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004466:	2b04      	cmp	r3, #4
 8004468:	d107      	bne.n	800447a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004478:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e050      	b.n	8004520 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800447e:	893b      	ldrh	r3, [r7, #8]
 8004480:	b2da      	uxtb	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800448a:	6a39      	ldr	r1, [r7, #32]
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 fb2b 	bl	8004ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00d      	beq.n	80044b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449c:	2b04      	cmp	r3, #4
 800449e:	d107      	bne.n	80044b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e035      	b.n	8004520 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 f9ef 	bl	80048b4 <I2C_WaitOnFlagUntilTimeout>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00d      	beq.n	80044f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044ea:	d103      	bne.n	80044f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e013      	b.n	8004520 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80044f8:	897b      	ldrh	r3, [r7, #10]
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	f043 0301 	orr.w	r3, r3, #1
 8004500:	b2da      	uxtb	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450a:	6a3a      	ldr	r2, [r7, #32]
 800450c:	4906      	ldr	r1, [pc, #24]	@ (8004528 <I2C_RequestMemoryRead+0x1cc>)
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f000 fa4a 	bl	80049a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e000      	b.n	8004520 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3718      	adds	r7, #24
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	00010002 	.word	0x00010002

0800452c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004538:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004540:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004548:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685a      	ldr	r2, [r3, #4]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800455e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800456c:	2200      	movs	r2, #0
 800456e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800457c:	2200      	movs	r2, #0
 800457e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004580:	7cfb      	ldrb	r3, [r7, #19]
 8004582:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8004586:	2b21      	cmp	r3, #33	@ 0x21
 8004588:	d007      	beq.n	800459a <I2C_DMAXferCplt+0x6e>
 800458a:	7cfb      	ldrb	r3, [r7, #19]
 800458c:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8004590:	2b22      	cmp	r3, #34	@ 0x22
 8004592:	d131      	bne.n	80045f8 <I2C_DMAXferCplt+0xcc>
 8004594:	7cbb      	ldrb	r3, [r7, #18]
 8004596:	2b20      	cmp	r3, #32
 8004598:	d12e      	bne.n	80045f8 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045a8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2200      	movs	r2, #0
 80045ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80045b0:	7cfb      	ldrb	r3, [r7, #19]
 80045b2:	2b29      	cmp	r3, #41	@ 0x29
 80045b4:	d10a      	bne.n	80045cc <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2221      	movs	r2, #33	@ 0x21
 80045ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	2228      	movs	r2, #40	@ 0x28
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80045c4:	6978      	ldr	r0, [r7, #20]
 80045c6:	f7fe fcd8 	bl	8002f7a <HAL_I2C_SlaveTxCpltCallback>
 80045ca:	e00c      	b.n	80045e6 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80045cc:	7cfb      	ldrb	r3, [r7, #19]
 80045ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80045d0:	d109      	bne.n	80045e6 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	2222      	movs	r2, #34	@ 0x22
 80045d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	2228      	movs	r2, #40	@ 0x28
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80045e0:	6978      	ldr	r0, [r7, #20]
 80045e2:	f7fe fcd4 	bl	8002f8e <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80045f4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80045f6:	e074      	b.n	80046e2 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	d06e      	beq.n	80046e2 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004608:	b29b      	uxth	r3, r3
 800460a:	2b01      	cmp	r3, #1
 800460c:	d107      	bne.n	800461e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800461c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800462c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004634:	d009      	beq.n	800464a <I2C_DMAXferCplt+0x11e>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2b08      	cmp	r3, #8
 800463a:	d006      	beq.n	800464a <I2C_DMAXferCplt+0x11e>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004642:	d002      	beq.n	800464a <I2C_DMAXferCplt+0x11e>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2b20      	cmp	r3, #32
 8004648:	d107      	bne.n	800465a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004658:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004668:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004678:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	2200      	movs	r2, #0
 800467e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004688:	6978      	ldr	r0, [r7, #20]
 800468a:	f7fe fcac 	bl	8002fe6 <HAL_I2C_ErrorCallback>
}
 800468e:	e028      	b.n	80046e2 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	2220      	movs	r2, #32
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b40      	cmp	r3, #64	@ 0x40
 80046a2:	d10a      	bne.n	80046ba <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	2200      	movs	r2, #0
 80046b0:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80046b2:	6978      	ldr	r0, [r7, #20]
 80046b4:	f7fc fa02 	bl	8000abc <HAL_I2C_MemRxCpltCallback>
}
 80046b8:	e013      	b.n	80046e2 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	d002      	beq.n	80046ce <I2C_DMAXferCplt+0x1a2>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b20      	cmp	r3, #32
 80046cc:	d103      	bne.n	80046d6 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	2200      	movs	r2, #0
 80046d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80046d4:	e002      	b.n	80046dc <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2212      	movs	r2, #18
 80046da:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80046dc:	6978      	ldr	r0, [r7, #20]
 80046de:	f7fe fc42 	bl	8002f66 <HAL_I2C_MasterRxCpltCallback>
}
 80046e2:	bf00      	nop
 80046e4:	3718      	adds	r7, #24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b084      	sub	sp, #16
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d003      	beq.n	8004708 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004704:	2200      	movs	r2, #0
 8004706:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800470c:	2b00      	cmp	r3, #0
 800470e:	d003      	beq.n	8004718 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004714:	2200      	movs	r2, #0
 8004716:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f7fd fbcd 	bl	8001eb8 <HAL_DMA_GetError>
 800471e:	4603      	mov	r3, r0
 8004720:	2b02      	cmp	r3, #2
 8004722:	d01b      	beq.n	800475c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004732:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2220      	movs	r2, #32
 800473e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474e:	f043 0210 	orr.w	r2, r3, #16
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f7fe fc45 	bl	8002fe6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800475c:	bf00      	nop
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800476c:	2300      	movs	r3, #0
 800476e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004774:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800477c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800477e:	4b4b      	ldr	r3, [pc, #300]	@ (80048ac <I2C_DMAAbort+0x148>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	08db      	lsrs	r3, r3, #3
 8004784:	4a4a      	ldr	r2, [pc, #296]	@ (80048b0 <I2C_DMAAbort+0x14c>)
 8004786:	fba2 2303 	umull	r2, r3, r2, r3
 800478a:	0a1a      	lsrs	r2, r3, #8
 800478c:	4613      	mov	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	00da      	lsls	r2, r3, #3
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d106      	bne.n	80047ac <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a2:	f043 0220 	orr.w	r2, r3, #32
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80047aa:	e00a      	b.n	80047c2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	3b01      	subs	r3, #1
 80047b0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047c0:	d0ea      	beq.n	8004798 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047ce:	2200      	movs	r2, #0
 80047d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047de:	2200      	movs	r2, #0
 80047e0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047f0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	2200      	movs	r2, #0
 80047f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004804:	2200      	movs	r2, #0
 8004806:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004814:	2200      	movs	r2, #0
 8004816:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0201 	bic.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b60      	cmp	r3, #96	@ 0x60
 8004832:	d10e      	bne.n	8004852 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	2220      	movs	r2, #32
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	2200      	movs	r2, #0
 8004848:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800484a:	6978      	ldr	r0, [r7, #20]
 800484c:	f7fe fbd5 	bl	8002ffa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004850:	e027      	b.n	80048a2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004852:	7cfb      	ldrb	r3, [r7, #19]
 8004854:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004858:	2b28      	cmp	r3, #40	@ 0x28
 800485a:	d117      	bne.n	800488c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0201 	orr.w	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800487a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	2200      	movs	r2, #0
 8004880:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2228      	movs	r2, #40	@ 0x28
 8004886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800488a:	e007      	b.n	800489c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	2220      	movs	r2, #32
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800489c:	6978      	ldr	r0, [r7, #20]
 800489e:	f7fe fba2 	bl	8002fe6 <HAL_I2C_ErrorCallback>
}
 80048a2:	bf00      	nop
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	2000000c 	.word	0x2000000c
 80048b0:	14f8b589 	.word	0x14f8b589

080048b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	603b      	str	r3, [r7, #0]
 80048c0:	4613      	mov	r3, r2
 80048c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048c4:	e048      	b.n	8004958 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048cc:	d044      	beq.n	8004958 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ce:	f7fc fea5 	bl	800161c <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d302      	bcc.n	80048e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d139      	bne.n	8004958 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	0c1b      	lsrs	r3, r3, #16
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d10d      	bne.n	800490a <I2C_WaitOnFlagUntilTimeout+0x56>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	43da      	mvns	r2, r3
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	4013      	ands	r3, r2
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	bf0c      	ite	eq
 8004900:	2301      	moveq	r3, #1
 8004902:	2300      	movne	r3, #0
 8004904:	b2db      	uxtb	r3, r3
 8004906:	461a      	mov	r2, r3
 8004908:	e00c      	b.n	8004924 <I2C_WaitOnFlagUntilTimeout+0x70>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	43da      	mvns	r2, r3
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	4013      	ands	r3, r2
 8004916:	b29b      	uxth	r3, r3
 8004918:	2b00      	cmp	r3, #0
 800491a:	bf0c      	ite	eq
 800491c:	2301      	moveq	r3, #1
 800491e:	2300      	movne	r3, #0
 8004920:	b2db      	uxtb	r3, r3
 8004922:	461a      	mov	r2, r3
 8004924:	79fb      	ldrb	r3, [r7, #7]
 8004926:	429a      	cmp	r2, r3
 8004928:	d116      	bne.n	8004958 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2220      	movs	r2, #32
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004944:	f043 0220 	orr.w	r2, r3, #32
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e023      	b.n	80049a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	0c1b      	lsrs	r3, r3, #16
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b01      	cmp	r3, #1
 8004960:	d10d      	bne.n	800497e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	43da      	mvns	r2, r3
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	4013      	ands	r3, r2
 800496e:	b29b      	uxth	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	bf0c      	ite	eq
 8004974:	2301      	moveq	r3, #1
 8004976:	2300      	movne	r3, #0
 8004978:	b2db      	uxtb	r3, r3
 800497a:	461a      	mov	r2, r3
 800497c:	e00c      	b.n	8004998 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	43da      	mvns	r2, r3
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	4013      	ands	r3, r2
 800498a:	b29b      	uxth	r3, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	bf0c      	ite	eq
 8004990:	2301      	moveq	r3, #1
 8004992:	2300      	movne	r3, #0
 8004994:	b2db      	uxtb	r3, r3
 8004996:	461a      	mov	r2, r3
 8004998:	79fb      	ldrb	r3, [r7, #7]
 800499a:	429a      	cmp	r2, r3
 800499c:	d093      	beq.n	80048c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
 80049b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049b6:	e071      	b.n	8004a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049c6:	d123      	bne.n	8004a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80049e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2220      	movs	r2, #32
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fc:	f043 0204 	orr.w	r2, r3, #4
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e067      	b.n	8004ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a16:	d041      	beq.n	8004a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a18:	f7fc fe00 	bl	800161c <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d302      	bcc.n	8004a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d136      	bne.n	8004a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	0c1b      	lsrs	r3, r3, #16
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d10c      	bne.n	8004a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	43da      	mvns	r2, r3
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	4013      	ands	r3, r2
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	bf14      	ite	ne
 8004a4a:	2301      	movne	r3, #1
 8004a4c:	2300      	moveq	r3, #0
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	e00b      	b.n	8004a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	43da      	mvns	r2, r3
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	bf14      	ite	ne
 8004a64:	2301      	movne	r3, #1
 8004a66:	2300      	moveq	r3, #0
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d016      	beq.n	8004a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2220      	movs	r2, #32
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a88:	f043 0220 	orr.w	r2, r3, #32
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e021      	b.n	8004ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	0c1b      	lsrs	r3, r3, #16
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d10c      	bne.n	8004ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	43da      	mvns	r2, r3
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	bf14      	ite	ne
 8004ab8:	2301      	movne	r3, #1
 8004aba:	2300      	moveq	r3, #0
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	e00b      	b.n	8004ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	43da      	mvns	r2, r3
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	4013      	ands	r3, r2
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	bf14      	ite	ne
 8004ad2:	2301      	movne	r3, #1
 8004ad4:	2300      	moveq	r3, #0
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f47f af6d 	bne.w	80049b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004af4:	e034      	b.n	8004b60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f000 f870 	bl	8004bdc <I2C_IsAcknowledgeFailed>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e034      	b.n	8004b70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b0c:	d028      	beq.n	8004b60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b0e:	f7fc fd85 	bl	800161c <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d302      	bcc.n	8004b24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d11d      	bne.n	8004b60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b2e:	2b80      	cmp	r3, #128	@ 0x80
 8004b30:	d016      	beq.n	8004b60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4c:	f043 0220 	orr.w	r2, r3, #32
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e007      	b.n	8004b70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b6a:	2b80      	cmp	r3, #128	@ 0x80
 8004b6c:	d1c3      	bne.n	8004af6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b84:	4b13      	ldr	r3, [pc, #76]	@ (8004bd4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	08db      	lsrs	r3, r3, #3
 8004b8a:	4a13      	ldr	r2, [pc, #76]	@ (8004bd8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b90:	0a1a      	lsrs	r2, r3, #8
 8004b92:	4613      	mov	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d107      	bne.n	8004bb6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004baa:	f043 0220 	orr.w	r2, r3, #32
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e008      	b.n	8004bc8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bc4:	d0e9      	beq.n	8004b9a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	2000000c 	.word	0x2000000c
 8004bd8:	14f8b589 	.word	0x14f8b589

08004bdc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bf2:	d11b      	bne.n	8004c2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004bfc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2220      	movs	r2, #32
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c18:	f043 0204 	orr.w	r2, r3, #4
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e000      	b.n	8004c2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b083      	sub	sp, #12
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c46:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004c4a:	d103      	bne.n	8004c54 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004c52:	e007      	b.n	8004c64 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c58:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004c5c:	d102      	bne.n	8004c64 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2208      	movs	r2, #8
 8004c62:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e0cc      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c84:	4b68      	ldr	r3, [pc, #416]	@ (8004e28 <HAL_RCC_ClockConfig+0x1b8>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 030f 	and.w	r3, r3, #15
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d90c      	bls.n	8004cac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c92:	4b65      	ldr	r3, [pc, #404]	@ (8004e28 <HAL_RCC_ClockConfig+0x1b8>)
 8004c94:	683a      	ldr	r2, [r7, #0]
 8004c96:	b2d2      	uxtb	r2, r2
 8004c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c9a:	4b63      	ldr	r3, [pc, #396]	@ (8004e28 <HAL_RCC_ClockConfig+0x1b8>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 030f 	and.w	r3, r3, #15
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d001      	beq.n	8004cac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e0b8      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d020      	beq.n	8004cfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0304 	and.w	r3, r3, #4
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d005      	beq.n	8004cd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cc4:	4b59      	ldr	r3, [pc, #356]	@ (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	4a58      	ldr	r2, [pc, #352]	@ (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004cca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004cce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0308 	and.w	r3, r3, #8
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d005      	beq.n	8004ce8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cdc:	4b53      	ldr	r3, [pc, #332]	@ (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	4a52      	ldr	r2, [pc, #328]	@ (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ce2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004ce6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ce8:	4b50      	ldr	r3, [pc, #320]	@ (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	494d      	ldr	r1, [pc, #308]	@ (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d044      	beq.n	8004d90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d107      	bne.n	8004d1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d0e:	4b47      	ldr	r3, [pc, #284]	@ (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d119      	bne.n	8004d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e07f      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d003      	beq.n	8004d2e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d2a:	2b03      	cmp	r3, #3
 8004d2c:	d107      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d2e:	4b3f      	ldr	r3, [pc, #252]	@ (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d109      	bne.n	8004d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e06f      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d3e:	4b3b      	ldr	r3, [pc, #236]	@ (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e067      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d4e:	4b37      	ldr	r3, [pc, #220]	@ (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f023 0203 	bic.w	r2, r3, #3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	4934      	ldr	r1, [pc, #208]	@ (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d60:	f7fc fc5c 	bl	800161c <HAL_GetTick>
 8004d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d66:	e00a      	b.n	8004d7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d68:	f7fc fc58 	bl	800161c <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e04f      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d7e:	4b2b      	ldr	r3, [pc, #172]	@ (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f003 020c 	and.w	r2, r3, #12
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d1eb      	bne.n	8004d68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d90:	4b25      	ldr	r3, [pc, #148]	@ (8004e28 <HAL_RCC_ClockConfig+0x1b8>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 030f 	and.w	r3, r3, #15
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d20c      	bcs.n	8004db8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d9e:	4b22      	ldr	r3, [pc, #136]	@ (8004e28 <HAL_RCC_ClockConfig+0x1b8>)
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004da6:	4b20      	ldr	r3, [pc, #128]	@ (8004e28 <HAL_RCC_ClockConfig+0x1b8>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 030f 	and.w	r3, r3, #15
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d001      	beq.n	8004db8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e032      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d008      	beq.n	8004dd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dc4:	4b19      	ldr	r3, [pc, #100]	@ (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	4916      	ldr	r1, [pc, #88]	@ (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0308 	and.w	r3, r3, #8
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d009      	beq.n	8004df6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004de2:	4b12      	ldr	r3, [pc, #72]	@ (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	490e      	ldr	r1, [pc, #56]	@ (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004df6:	f000 f855 	bl	8004ea4 <HAL_RCC_GetSysClockFreq>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	091b      	lsrs	r3, r3, #4
 8004e02:	f003 030f 	and.w	r3, r3, #15
 8004e06:	490a      	ldr	r1, [pc, #40]	@ (8004e30 <HAL_RCC_ClockConfig+0x1c0>)
 8004e08:	5ccb      	ldrb	r3, [r1, r3]
 8004e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e0e:	4a09      	ldr	r2, [pc, #36]	@ (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004e12:	4b09      	ldr	r3, [pc, #36]	@ (8004e38 <HAL_RCC_ClockConfig+0x1c8>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7fc fbbc 	bl	8001594 <HAL_InitTick>

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	40023c00 	.word	0x40023c00
 8004e2c:	40023800 	.word	0x40023800
 8004e30:	08007e04 	.word	0x08007e04
 8004e34:	2000000c 	.word	0x2000000c
 8004e38:	20000010 	.word	0x20000010

08004e3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e40:	4b03      	ldr	r3, [pc, #12]	@ (8004e50 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e42:	681b      	ldr	r3, [r3, #0]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	2000000c 	.word	0x2000000c

08004e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e58:	f7ff fff0 	bl	8004e3c <HAL_RCC_GetHCLKFreq>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	4b05      	ldr	r3, [pc, #20]	@ (8004e74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	0a9b      	lsrs	r3, r3, #10
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	4903      	ldr	r1, [pc, #12]	@ (8004e78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e6a:	5ccb      	ldrb	r3, [r1, r3]
 8004e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	40023800 	.word	0x40023800
 8004e78:	08007e14 	.word	0x08007e14

08004e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e80:	f7ff ffdc 	bl	8004e3c <HAL_RCC_GetHCLKFreq>
 8004e84:	4602      	mov	r2, r0
 8004e86:	4b05      	ldr	r3, [pc, #20]	@ (8004e9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	0b5b      	lsrs	r3, r3, #13
 8004e8c:	f003 0307 	and.w	r3, r3, #7
 8004e90:	4903      	ldr	r1, [pc, #12]	@ (8004ea0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e92:	5ccb      	ldrb	r3, [r1, r3]
 8004e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	40023800 	.word	0x40023800
 8004ea0:	08007e14 	.word	0x08007e14

08004ea4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ea8:	b0a6      	sub	sp, #152	@ 0x98
 8004eaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004eac:	2300      	movs	r3, #0
 8004eae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004eca:	4bc8      	ldr	r3, [pc, #800]	@ (80051ec <HAL_RCC_GetSysClockFreq+0x348>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f003 030c 	and.w	r3, r3, #12
 8004ed2:	2b0c      	cmp	r3, #12
 8004ed4:	f200 817e 	bhi.w	80051d4 <HAL_RCC_GetSysClockFreq+0x330>
 8004ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ee0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ede:	bf00      	nop
 8004ee0:	08004f15 	.word	0x08004f15
 8004ee4:	080051d5 	.word	0x080051d5
 8004ee8:	080051d5 	.word	0x080051d5
 8004eec:	080051d5 	.word	0x080051d5
 8004ef0:	08004f1d 	.word	0x08004f1d
 8004ef4:	080051d5 	.word	0x080051d5
 8004ef8:	080051d5 	.word	0x080051d5
 8004efc:	080051d5 	.word	0x080051d5
 8004f00:	08004f25 	.word	0x08004f25
 8004f04:	080051d5 	.word	0x080051d5
 8004f08:	080051d5 	.word	0x080051d5
 8004f0c:	080051d5 	.word	0x080051d5
 8004f10:	0800508f 	.word	0x0800508f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f14:	4bb6      	ldr	r3, [pc, #728]	@ (80051f0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004f16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004f1a:	e15f      	b.n	80051dc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f1c:	4bb5      	ldr	r3, [pc, #724]	@ (80051f4 <HAL_RCC_GetSysClockFreq+0x350>)
 8004f1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004f22:	e15b      	b.n	80051dc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f24:	4bb1      	ldr	r3, [pc, #708]	@ (80051ec <HAL_RCC_GetSysClockFreq+0x348>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f30:	4bae      	ldr	r3, [pc, #696]	@ (80051ec <HAL_RCC_GetSysClockFreq+0x348>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d031      	beq.n	8004fa0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f3c:	4bab      	ldr	r3, [pc, #684]	@ (80051ec <HAL_RCC_GetSysClockFreq+0x348>)
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	099b      	lsrs	r3, r3, #6
 8004f42:	2200      	movs	r2, #0
 8004f44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004f48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f4e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f50:	2300      	movs	r3, #0
 8004f52:	667b      	str	r3, [r7, #100]	@ 0x64
 8004f54:	4ba7      	ldr	r3, [pc, #668]	@ (80051f4 <HAL_RCC_GetSysClockFreq+0x350>)
 8004f56:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004f5a:	462a      	mov	r2, r5
 8004f5c:	fb03 f202 	mul.w	r2, r3, r2
 8004f60:	2300      	movs	r3, #0
 8004f62:	4621      	mov	r1, r4
 8004f64:	fb01 f303 	mul.w	r3, r1, r3
 8004f68:	4413      	add	r3, r2
 8004f6a:	4aa2      	ldr	r2, [pc, #648]	@ (80051f4 <HAL_RCC_GetSysClockFreq+0x350>)
 8004f6c:	4621      	mov	r1, r4
 8004f6e:	fba1 1202 	umull	r1, r2, r1, r2
 8004f72:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f74:	460a      	mov	r2, r1
 8004f76:	67ba      	str	r2, [r7, #120]	@ 0x78
 8004f78:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004f7a:	4413      	add	r3, r2
 8004f7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004f7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f82:	2200      	movs	r2, #0
 8004f84:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f86:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004f88:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004f8c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8004f90:	f7fb f996 	bl	80002c0 <__aeabi_uldivmod>
 8004f94:	4602      	mov	r2, r0
 8004f96:	460b      	mov	r3, r1
 8004f98:	4613      	mov	r3, r2
 8004f9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004f9e:	e064      	b.n	800506a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fa0:	4b92      	ldr	r3, [pc, #584]	@ (80051ec <HAL_RCC_GetSysClockFreq+0x348>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	099b      	lsrs	r3, r3, #6
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	653b      	str	r3, [r7, #80]	@ 0x50
 8004faa:	657a      	str	r2, [r7, #84]	@ 0x54
 8004fac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fb8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8004fbc:	4622      	mov	r2, r4
 8004fbe:	462b      	mov	r3, r5
 8004fc0:	f04f 0000 	mov.w	r0, #0
 8004fc4:	f04f 0100 	mov.w	r1, #0
 8004fc8:	0159      	lsls	r1, r3, #5
 8004fca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fce:	0150      	lsls	r0, r2, #5
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4621      	mov	r1, r4
 8004fd6:	1a51      	subs	r1, r2, r1
 8004fd8:	6139      	str	r1, [r7, #16]
 8004fda:	4629      	mov	r1, r5
 8004fdc:	eb63 0301 	sbc.w	r3, r3, r1
 8004fe0:	617b      	str	r3, [r7, #20]
 8004fe2:	f04f 0200 	mov.w	r2, #0
 8004fe6:	f04f 0300 	mov.w	r3, #0
 8004fea:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fee:	4659      	mov	r1, fp
 8004ff0:	018b      	lsls	r3, r1, #6
 8004ff2:	4651      	mov	r1, sl
 8004ff4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ff8:	4651      	mov	r1, sl
 8004ffa:	018a      	lsls	r2, r1, #6
 8004ffc:	4651      	mov	r1, sl
 8004ffe:	ebb2 0801 	subs.w	r8, r2, r1
 8005002:	4659      	mov	r1, fp
 8005004:	eb63 0901 	sbc.w	r9, r3, r1
 8005008:	f04f 0200 	mov.w	r2, #0
 800500c:	f04f 0300 	mov.w	r3, #0
 8005010:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005014:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005018:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800501c:	4690      	mov	r8, r2
 800501e:	4699      	mov	r9, r3
 8005020:	4623      	mov	r3, r4
 8005022:	eb18 0303 	adds.w	r3, r8, r3
 8005026:	60bb      	str	r3, [r7, #8]
 8005028:	462b      	mov	r3, r5
 800502a:	eb49 0303 	adc.w	r3, r9, r3
 800502e:	60fb      	str	r3, [r7, #12]
 8005030:	f04f 0200 	mov.w	r2, #0
 8005034:	f04f 0300 	mov.w	r3, #0
 8005038:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800503c:	4629      	mov	r1, r5
 800503e:	028b      	lsls	r3, r1, #10
 8005040:	4621      	mov	r1, r4
 8005042:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005046:	4621      	mov	r1, r4
 8005048:	028a      	lsls	r2, r1, #10
 800504a:	4610      	mov	r0, r2
 800504c:	4619      	mov	r1, r3
 800504e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005052:	2200      	movs	r2, #0
 8005054:	643b      	str	r3, [r7, #64]	@ 0x40
 8005056:	647a      	str	r2, [r7, #68]	@ 0x44
 8005058:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800505c:	f7fb f930 	bl	80002c0 <__aeabi_uldivmod>
 8005060:	4602      	mov	r2, r0
 8005062:	460b      	mov	r3, r1
 8005064:	4613      	mov	r3, r2
 8005066:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800506a:	4b60      	ldr	r3, [pc, #384]	@ (80051ec <HAL_RCC_GetSysClockFreq+0x348>)
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	0c1b      	lsrs	r3, r3, #16
 8005070:	f003 0303 	and.w	r3, r3, #3
 8005074:	3301      	adds	r3, #1
 8005076:	005b      	lsls	r3, r3, #1
 8005078:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 800507c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005080:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005084:	fbb2 f3f3 	udiv	r3, r2, r3
 8005088:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800508c:	e0a6      	b.n	80051dc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800508e:	4b57      	ldr	r3, [pc, #348]	@ (80051ec <HAL_RCC_GetSysClockFreq+0x348>)
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005096:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800509a:	4b54      	ldr	r3, [pc, #336]	@ (80051ec <HAL_RCC_GetSysClockFreq+0x348>)
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d02a      	beq.n	80050fc <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050a6:	4b51      	ldr	r3, [pc, #324]	@ (80051ec <HAL_RCC_GetSysClockFreq+0x348>)
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	099b      	lsrs	r3, r3, #6
 80050ac:	2200      	movs	r2, #0
 80050ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80050b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80050b8:	2100      	movs	r1, #0
 80050ba:	4b4e      	ldr	r3, [pc, #312]	@ (80051f4 <HAL_RCC_GetSysClockFreq+0x350>)
 80050bc:	fb03 f201 	mul.w	r2, r3, r1
 80050c0:	2300      	movs	r3, #0
 80050c2:	fb00 f303 	mul.w	r3, r0, r3
 80050c6:	4413      	add	r3, r2
 80050c8:	4a4a      	ldr	r2, [pc, #296]	@ (80051f4 <HAL_RCC_GetSysClockFreq+0x350>)
 80050ca:	fba0 1202 	umull	r1, r2, r0, r2
 80050ce:	677a      	str	r2, [r7, #116]	@ 0x74
 80050d0:	460a      	mov	r2, r1
 80050d2:	673a      	str	r2, [r7, #112]	@ 0x70
 80050d4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80050d6:	4413      	add	r3, r2
 80050d8:	677b      	str	r3, [r7, #116]	@ 0x74
 80050da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050de:	2200      	movs	r2, #0
 80050e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80050e2:	637a      	str	r2, [r7, #52]	@ 0x34
 80050e4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80050e8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80050ec:	f7fb f8e8 	bl	80002c0 <__aeabi_uldivmod>
 80050f0:	4602      	mov	r2, r0
 80050f2:	460b      	mov	r3, r1
 80050f4:	4613      	mov	r3, r2
 80050f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80050fa:	e05b      	b.n	80051b4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050fc:	4b3b      	ldr	r3, [pc, #236]	@ (80051ec <HAL_RCC_GetSysClockFreq+0x348>)
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	099b      	lsrs	r3, r3, #6
 8005102:	2200      	movs	r2, #0
 8005104:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005106:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800510a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800510e:	623b      	str	r3, [r7, #32]
 8005110:	2300      	movs	r3, #0
 8005112:	627b      	str	r3, [r7, #36]	@ 0x24
 8005114:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005118:	4642      	mov	r2, r8
 800511a:	464b      	mov	r3, r9
 800511c:	f04f 0000 	mov.w	r0, #0
 8005120:	f04f 0100 	mov.w	r1, #0
 8005124:	0159      	lsls	r1, r3, #5
 8005126:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800512a:	0150      	lsls	r0, r2, #5
 800512c:	4602      	mov	r2, r0
 800512e:	460b      	mov	r3, r1
 8005130:	4641      	mov	r1, r8
 8005132:	ebb2 0a01 	subs.w	sl, r2, r1
 8005136:	4649      	mov	r1, r9
 8005138:	eb63 0b01 	sbc.w	fp, r3, r1
 800513c:	f04f 0200 	mov.w	r2, #0
 8005140:	f04f 0300 	mov.w	r3, #0
 8005144:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005148:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800514c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005150:	ebb2 040a 	subs.w	r4, r2, sl
 8005154:	eb63 050b 	sbc.w	r5, r3, fp
 8005158:	f04f 0200 	mov.w	r2, #0
 800515c:	f04f 0300 	mov.w	r3, #0
 8005160:	00eb      	lsls	r3, r5, #3
 8005162:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005166:	00e2      	lsls	r2, r4, #3
 8005168:	4614      	mov	r4, r2
 800516a:	461d      	mov	r5, r3
 800516c:	4643      	mov	r3, r8
 800516e:	18e3      	adds	r3, r4, r3
 8005170:	603b      	str	r3, [r7, #0]
 8005172:	464b      	mov	r3, r9
 8005174:	eb45 0303 	adc.w	r3, r5, r3
 8005178:	607b      	str	r3, [r7, #4]
 800517a:	f04f 0200 	mov.w	r2, #0
 800517e:	f04f 0300 	mov.w	r3, #0
 8005182:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005186:	4629      	mov	r1, r5
 8005188:	028b      	lsls	r3, r1, #10
 800518a:	4621      	mov	r1, r4
 800518c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005190:	4621      	mov	r1, r4
 8005192:	028a      	lsls	r2, r1, #10
 8005194:	4610      	mov	r0, r2
 8005196:	4619      	mov	r1, r3
 8005198:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800519c:	2200      	movs	r2, #0
 800519e:	61bb      	str	r3, [r7, #24]
 80051a0:	61fa      	str	r2, [r7, #28]
 80051a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051a6:	f7fb f88b 	bl	80002c0 <__aeabi_uldivmod>
 80051aa:	4602      	mov	r2, r0
 80051ac:	460b      	mov	r3, r1
 80051ae:	4613      	mov	r3, r2
 80051b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80051b4:	4b0d      	ldr	r3, [pc, #52]	@ (80051ec <HAL_RCC_GetSysClockFreq+0x348>)
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	0f1b      	lsrs	r3, r3, #28
 80051ba:	f003 0307 	and.w	r3, r3, #7
 80051be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80051c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80051c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80051ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80051d2:	e003      	b.n	80051dc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051d4:	4b06      	ldr	r3, [pc, #24]	@ (80051f0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80051d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80051da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3798      	adds	r7, #152	@ 0x98
 80051e4:	46bd      	mov	sp, r7
 80051e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051ea:	bf00      	nop
 80051ec:	40023800 	.word	0x40023800
 80051f0:	00f42400 	.word	0x00f42400
 80051f4:	017d7840 	.word	0x017d7840

080051f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e28d      	b.n	8005726 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	f000 8083 	beq.w	800531e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005218:	4b94      	ldr	r3, [pc, #592]	@ (800546c <HAL_RCC_OscConfig+0x274>)
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f003 030c 	and.w	r3, r3, #12
 8005220:	2b04      	cmp	r3, #4
 8005222:	d019      	beq.n	8005258 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005224:	4b91      	ldr	r3, [pc, #580]	@ (800546c <HAL_RCC_OscConfig+0x274>)
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f003 030c 	and.w	r3, r3, #12
        || \
 800522c:	2b08      	cmp	r3, #8
 800522e:	d106      	bne.n	800523e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005230:	4b8e      	ldr	r3, [pc, #568]	@ (800546c <HAL_RCC_OscConfig+0x274>)
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005238:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800523c:	d00c      	beq.n	8005258 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800523e:	4b8b      	ldr	r3, [pc, #556]	@ (800546c <HAL_RCC_OscConfig+0x274>)
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005246:	2b0c      	cmp	r3, #12
 8005248:	d112      	bne.n	8005270 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800524a:	4b88      	ldr	r3, [pc, #544]	@ (800546c <HAL_RCC_OscConfig+0x274>)
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005252:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005256:	d10b      	bne.n	8005270 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005258:	4b84      	ldr	r3, [pc, #528]	@ (800546c <HAL_RCC_OscConfig+0x274>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d05b      	beq.n	800531c <HAL_RCC_OscConfig+0x124>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d157      	bne.n	800531c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e25a      	b.n	8005726 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005278:	d106      	bne.n	8005288 <HAL_RCC_OscConfig+0x90>
 800527a:	4b7c      	ldr	r3, [pc, #496]	@ (800546c <HAL_RCC_OscConfig+0x274>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a7b      	ldr	r2, [pc, #492]	@ (800546c <HAL_RCC_OscConfig+0x274>)
 8005280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005284:	6013      	str	r3, [r2, #0]
 8005286:	e01d      	b.n	80052c4 <HAL_RCC_OscConfig+0xcc>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005290:	d10c      	bne.n	80052ac <HAL_RCC_OscConfig+0xb4>
 8005292:	4b76      	ldr	r3, [pc, #472]	@ (800546c <HAL_RCC_OscConfig+0x274>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a75      	ldr	r2, [pc, #468]	@ (800546c <HAL_RCC_OscConfig+0x274>)
 8005298:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800529c:	6013      	str	r3, [r2, #0]
 800529e:	4b73      	ldr	r3, [pc, #460]	@ (800546c <HAL_RCC_OscConfig+0x274>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a72      	ldr	r2, [pc, #456]	@ (800546c <HAL_RCC_OscConfig+0x274>)
 80052a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052a8:	6013      	str	r3, [r2, #0]
 80052aa:	e00b      	b.n	80052c4 <HAL_RCC_OscConfig+0xcc>
 80052ac:	4b6f      	ldr	r3, [pc, #444]	@ (800546c <HAL_RCC_OscConfig+0x274>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a6e      	ldr	r2, [pc, #440]	@ (800546c <HAL_RCC_OscConfig+0x274>)
 80052b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052b6:	6013      	str	r3, [r2, #0]
 80052b8:	4b6c      	ldr	r3, [pc, #432]	@ (800546c <HAL_RCC_OscConfig+0x274>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a6b      	ldr	r2, [pc, #428]	@ (800546c <HAL_RCC_OscConfig+0x274>)
 80052be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d013      	beq.n	80052f4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052cc:	f7fc f9a6 	bl	800161c <HAL_GetTick>
 80052d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052d2:	e008      	b.n	80052e6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052d4:	f7fc f9a2 	bl	800161c <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b64      	cmp	r3, #100	@ 0x64
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e21f      	b.n	8005726 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052e6:	4b61      	ldr	r3, [pc, #388]	@ (800546c <HAL_RCC_OscConfig+0x274>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d0f0      	beq.n	80052d4 <HAL_RCC_OscConfig+0xdc>
 80052f2:	e014      	b.n	800531e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f4:	f7fc f992 	bl	800161c <HAL_GetTick>
 80052f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052fa:	e008      	b.n	800530e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052fc:	f7fc f98e 	bl	800161c <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b64      	cmp	r3, #100	@ 0x64
 8005308:	d901      	bls.n	800530e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e20b      	b.n	8005726 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800530e:	4b57      	ldr	r3, [pc, #348]	@ (800546c <HAL_RCC_OscConfig+0x274>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1f0      	bne.n	80052fc <HAL_RCC_OscConfig+0x104>
 800531a:	e000      	b.n	800531e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800531c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0302 	and.w	r3, r3, #2
 8005326:	2b00      	cmp	r3, #0
 8005328:	d06f      	beq.n	800540a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800532a:	4b50      	ldr	r3, [pc, #320]	@ (800546c <HAL_RCC_OscConfig+0x274>)
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f003 030c 	and.w	r3, r3, #12
 8005332:	2b00      	cmp	r3, #0
 8005334:	d017      	beq.n	8005366 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005336:	4b4d      	ldr	r3, [pc, #308]	@ (800546c <HAL_RCC_OscConfig+0x274>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f003 030c 	and.w	r3, r3, #12
        || \
 800533e:	2b08      	cmp	r3, #8
 8005340:	d105      	bne.n	800534e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005342:	4b4a      	ldr	r3, [pc, #296]	@ (800546c <HAL_RCC_OscConfig+0x274>)
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00b      	beq.n	8005366 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800534e:	4b47      	ldr	r3, [pc, #284]	@ (800546c <HAL_RCC_OscConfig+0x274>)
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005356:	2b0c      	cmp	r3, #12
 8005358:	d11c      	bne.n	8005394 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800535a:	4b44      	ldr	r3, [pc, #272]	@ (800546c <HAL_RCC_OscConfig+0x274>)
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d116      	bne.n	8005394 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005366:	4b41      	ldr	r3, [pc, #260]	@ (800546c <HAL_RCC_OscConfig+0x274>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d005      	beq.n	800537e <HAL_RCC_OscConfig+0x186>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d001      	beq.n	800537e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e1d3      	b.n	8005726 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800537e:	4b3b      	ldr	r3, [pc, #236]	@ (800546c <HAL_RCC_OscConfig+0x274>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	4937      	ldr	r1, [pc, #220]	@ (800546c <HAL_RCC_OscConfig+0x274>)
 800538e:	4313      	orrs	r3, r2
 8005390:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005392:	e03a      	b.n	800540a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d020      	beq.n	80053de <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800539c:	4b34      	ldr	r3, [pc, #208]	@ (8005470 <HAL_RCC_OscConfig+0x278>)
 800539e:	2201      	movs	r2, #1
 80053a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a2:	f7fc f93b 	bl	800161c <HAL_GetTick>
 80053a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053a8:	e008      	b.n	80053bc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053aa:	f7fc f937 	bl	800161c <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d901      	bls.n	80053bc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e1b4      	b.n	8005726 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053bc:	4b2b      	ldr	r3, [pc, #172]	@ (800546c <HAL_RCC_OscConfig+0x274>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d0f0      	beq.n	80053aa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053c8:	4b28      	ldr	r3, [pc, #160]	@ (800546c <HAL_RCC_OscConfig+0x274>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	00db      	lsls	r3, r3, #3
 80053d6:	4925      	ldr	r1, [pc, #148]	@ (800546c <HAL_RCC_OscConfig+0x274>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	600b      	str	r3, [r1, #0]
 80053dc:	e015      	b.n	800540a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053de:	4b24      	ldr	r3, [pc, #144]	@ (8005470 <HAL_RCC_OscConfig+0x278>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e4:	f7fc f91a 	bl	800161c <HAL_GetTick>
 80053e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053ea:	e008      	b.n	80053fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053ec:	f7fc f916 	bl	800161c <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e193      	b.n	8005726 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053fe:	4b1b      	ldr	r3, [pc, #108]	@ (800546c <HAL_RCC_OscConfig+0x274>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1f0      	bne.n	80053ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0308 	and.w	r3, r3, #8
 8005412:	2b00      	cmp	r3, #0
 8005414:	d036      	beq.n	8005484 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d016      	beq.n	800544c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800541e:	4b15      	ldr	r3, [pc, #84]	@ (8005474 <HAL_RCC_OscConfig+0x27c>)
 8005420:	2201      	movs	r2, #1
 8005422:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005424:	f7fc f8fa 	bl	800161c <HAL_GetTick>
 8005428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800542a:	e008      	b.n	800543e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800542c:	f7fc f8f6 	bl	800161c <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e173      	b.n	8005726 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800543e:	4b0b      	ldr	r3, [pc, #44]	@ (800546c <HAL_RCC_OscConfig+0x274>)
 8005440:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d0f0      	beq.n	800542c <HAL_RCC_OscConfig+0x234>
 800544a:	e01b      	b.n	8005484 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800544c:	4b09      	ldr	r3, [pc, #36]	@ (8005474 <HAL_RCC_OscConfig+0x27c>)
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005452:	f7fc f8e3 	bl	800161c <HAL_GetTick>
 8005456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005458:	e00e      	b.n	8005478 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800545a:	f7fc f8df 	bl	800161c <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d907      	bls.n	8005478 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e15c      	b.n	8005726 <HAL_RCC_OscConfig+0x52e>
 800546c:	40023800 	.word	0x40023800
 8005470:	42470000 	.word	0x42470000
 8005474:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005478:	4b8a      	ldr	r3, [pc, #552]	@ (80056a4 <HAL_RCC_OscConfig+0x4ac>)
 800547a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1ea      	bne.n	800545a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0304 	and.w	r3, r3, #4
 800548c:	2b00      	cmp	r3, #0
 800548e:	f000 8097 	beq.w	80055c0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005492:	2300      	movs	r3, #0
 8005494:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005496:	4b83      	ldr	r3, [pc, #524]	@ (80056a4 <HAL_RCC_OscConfig+0x4ac>)
 8005498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10f      	bne.n	80054c2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054a2:	2300      	movs	r3, #0
 80054a4:	60bb      	str	r3, [r7, #8]
 80054a6:	4b7f      	ldr	r3, [pc, #508]	@ (80056a4 <HAL_RCC_OscConfig+0x4ac>)
 80054a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054aa:	4a7e      	ldr	r2, [pc, #504]	@ (80056a4 <HAL_RCC_OscConfig+0x4ac>)
 80054ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80054b2:	4b7c      	ldr	r3, [pc, #496]	@ (80056a4 <HAL_RCC_OscConfig+0x4ac>)
 80054b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054ba:	60bb      	str	r3, [r7, #8]
 80054bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054be:	2301      	movs	r3, #1
 80054c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054c2:	4b79      	ldr	r3, [pc, #484]	@ (80056a8 <HAL_RCC_OscConfig+0x4b0>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d118      	bne.n	8005500 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054ce:	4b76      	ldr	r3, [pc, #472]	@ (80056a8 <HAL_RCC_OscConfig+0x4b0>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a75      	ldr	r2, [pc, #468]	@ (80056a8 <HAL_RCC_OscConfig+0x4b0>)
 80054d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054da:	f7fc f89f 	bl	800161c <HAL_GetTick>
 80054de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054e0:	e008      	b.n	80054f4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054e2:	f7fc f89b 	bl	800161c <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d901      	bls.n	80054f4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e118      	b.n	8005726 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054f4:	4b6c      	ldr	r3, [pc, #432]	@ (80056a8 <HAL_RCC_OscConfig+0x4b0>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d0f0      	beq.n	80054e2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d106      	bne.n	8005516 <HAL_RCC_OscConfig+0x31e>
 8005508:	4b66      	ldr	r3, [pc, #408]	@ (80056a4 <HAL_RCC_OscConfig+0x4ac>)
 800550a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800550c:	4a65      	ldr	r2, [pc, #404]	@ (80056a4 <HAL_RCC_OscConfig+0x4ac>)
 800550e:	f043 0301 	orr.w	r3, r3, #1
 8005512:	6713      	str	r3, [r2, #112]	@ 0x70
 8005514:	e01c      	b.n	8005550 <HAL_RCC_OscConfig+0x358>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	2b05      	cmp	r3, #5
 800551c:	d10c      	bne.n	8005538 <HAL_RCC_OscConfig+0x340>
 800551e:	4b61      	ldr	r3, [pc, #388]	@ (80056a4 <HAL_RCC_OscConfig+0x4ac>)
 8005520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005522:	4a60      	ldr	r2, [pc, #384]	@ (80056a4 <HAL_RCC_OscConfig+0x4ac>)
 8005524:	f043 0304 	orr.w	r3, r3, #4
 8005528:	6713      	str	r3, [r2, #112]	@ 0x70
 800552a:	4b5e      	ldr	r3, [pc, #376]	@ (80056a4 <HAL_RCC_OscConfig+0x4ac>)
 800552c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800552e:	4a5d      	ldr	r2, [pc, #372]	@ (80056a4 <HAL_RCC_OscConfig+0x4ac>)
 8005530:	f043 0301 	orr.w	r3, r3, #1
 8005534:	6713      	str	r3, [r2, #112]	@ 0x70
 8005536:	e00b      	b.n	8005550 <HAL_RCC_OscConfig+0x358>
 8005538:	4b5a      	ldr	r3, [pc, #360]	@ (80056a4 <HAL_RCC_OscConfig+0x4ac>)
 800553a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800553c:	4a59      	ldr	r2, [pc, #356]	@ (80056a4 <HAL_RCC_OscConfig+0x4ac>)
 800553e:	f023 0301 	bic.w	r3, r3, #1
 8005542:	6713      	str	r3, [r2, #112]	@ 0x70
 8005544:	4b57      	ldr	r3, [pc, #348]	@ (80056a4 <HAL_RCC_OscConfig+0x4ac>)
 8005546:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005548:	4a56      	ldr	r2, [pc, #344]	@ (80056a4 <HAL_RCC_OscConfig+0x4ac>)
 800554a:	f023 0304 	bic.w	r3, r3, #4
 800554e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d015      	beq.n	8005584 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005558:	f7fc f860 	bl	800161c <HAL_GetTick>
 800555c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800555e:	e00a      	b.n	8005576 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005560:	f7fc f85c 	bl	800161c <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800556e:	4293      	cmp	r3, r2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e0d7      	b.n	8005726 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005576:	4b4b      	ldr	r3, [pc, #300]	@ (80056a4 <HAL_RCC_OscConfig+0x4ac>)
 8005578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d0ee      	beq.n	8005560 <HAL_RCC_OscConfig+0x368>
 8005582:	e014      	b.n	80055ae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005584:	f7fc f84a 	bl	800161c <HAL_GetTick>
 8005588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800558a:	e00a      	b.n	80055a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800558c:	f7fc f846 	bl	800161c <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800559a:	4293      	cmp	r3, r2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e0c1      	b.n	8005726 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055a2:	4b40      	ldr	r3, [pc, #256]	@ (80056a4 <HAL_RCC_OscConfig+0x4ac>)
 80055a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1ee      	bne.n	800558c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055ae:	7dfb      	ldrb	r3, [r7, #23]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d105      	bne.n	80055c0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055b4:	4b3b      	ldr	r3, [pc, #236]	@ (80056a4 <HAL_RCC_OscConfig+0x4ac>)
 80055b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b8:	4a3a      	ldr	r2, [pc, #232]	@ (80056a4 <HAL_RCC_OscConfig+0x4ac>)
 80055ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f000 80ad 	beq.w	8005724 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055ca:	4b36      	ldr	r3, [pc, #216]	@ (80056a4 <HAL_RCC_OscConfig+0x4ac>)
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f003 030c 	and.w	r3, r3, #12
 80055d2:	2b08      	cmp	r3, #8
 80055d4:	d060      	beq.n	8005698 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d145      	bne.n	800566a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055de:	4b33      	ldr	r3, [pc, #204]	@ (80056ac <HAL_RCC_OscConfig+0x4b4>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e4:	f7fc f81a 	bl	800161c <HAL_GetTick>
 80055e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ea:	e008      	b.n	80055fe <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ec:	f7fc f816 	bl	800161c <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e093      	b.n	8005726 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055fe:	4b29      	ldr	r3, [pc, #164]	@ (80056a4 <HAL_RCC_OscConfig+0x4ac>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1f0      	bne.n	80055ec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	69da      	ldr	r2, [r3, #28]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	431a      	orrs	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005618:	019b      	lsls	r3, r3, #6
 800561a:	431a      	orrs	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005620:	085b      	lsrs	r3, r3, #1
 8005622:	3b01      	subs	r3, #1
 8005624:	041b      	lsls	r3, r3, #16
 8005626:	431a      	orrs	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800562c:	061b      	lsls	r3, r3, #24
 800562e:	431a      	orrs	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005634:	071b      	lsls	r3, r3, #28
 8005636:	491b      	ldr	r1, [pc, #108]	@ (80056a4 <HAL_RCC_OscConfig+0x4ac>)
 8005638:	4313      	orrs	r3, r2
 800563a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800563c:	4b1b      	ldr	r3, [pc, #108]	@ (80056ac <HAL_RCC_OscConfig+0x4b4>)
 800563e:	2201      	movs	r2, #1
 8005640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005642:	f7fb ffeb 	bl	800161c <HAL_GetTick>
 8005646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005648:	e008      	b.n	800565c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800564a:	f7fb ffe7 	bl	800161c <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	2b02      	cmp	r3, #2
 8005656:	d901      	bls.n	800565c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e064      	b.n	8005726 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800565c:	4b11      	ldr	r3, [pc, #68]	@ (80056a4 <HAL_RCC_OscConfig+0x4ac>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d0f0      	beq.n	800564a <HAL_RCC_OscConfig+0x452>
 8005668:	e05c      	b.n	8005724 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800566a:	4b10      	ldr	r3, [pc, #64]	@ (80056ac <HAL_RCC_OscConfig+0x4b4>)
 800566c:	2200      	movs	r2, #0
 800566e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005670:	f7fb ffd4 	bl	800161c <HAL_GetTick>
 8005674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005676:	e008      	b.n	800568a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005678:	f7fb ffd0 	bl	800161c <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b02      	cmp	r3, #2
 8005684:	d901      	bls.n	800568a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e04d      	b.n	8005726 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800568a:	4b06      	ldr	r3, [pc, #24]	@ (80056a4 <HAL_RCC_OscConfig+0x4ac>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1f0      	bne.n	8005678 <HAL_RCC_OscConfig+0x480>
 8005696:	e045      	b.n	8005724 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d107      	bne.n	80056b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e040      	b.n	8005726 <HAL_RCC_OscConfig+0x52e>
 80056a4:	40023800 	.word	0x40023800
 80056a8:	40007000 	.word	0x40007000
 80056ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056b0:	4b1f      	ldr	r3, [pc, #124]	@ (8005730 <HAL_RCC_OscConfig+0x538>)
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d030      	beq.n	8005720 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d129      	bne.n	8005720 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d122      	bne.n	8005720 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80056e0:	4013      	ands	r3, r2
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80056e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d119      	bne.n	8005720 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f6:	085b      	lsrs	r3, r3, #1
 80056f8:	3b01      	subs	r3, #1
 80056fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d10f      	bne.n	8005720 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800570a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800570c:	429a      	cmp	r2, r3
 800570e:	d107      	bne.n	8005720 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800571a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800571c:	429a      	cmp	r2, r3
 800571e:	d001      	beq.n	8005724 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e000      	b.n	8005726 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3718      	adds	r7, #24
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	40023800 	.word	0x40023800

08005734 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e07b      	b.n	800583e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574a:	2b00      	cmp	r3, #0
 800574c:	d108      	bne.n	8005760 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005756:	d009      	beq.n	800576c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	61da      	str	r2, [r3, #28]
 800575e:	e005      	b.n	800576c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d106      	bne.n	800578c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7fb fd00 	bl	800118c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80057b4:	431a      	orrs	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057be:	431a      	orrs	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	431a      	orrs	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	431a      	orrs	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057dc:	431a      	orrs	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057e6:	431a      	orrs	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a1b      	ldr	r3, [r3, #32]
 80057ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057f0:	ea42 0103 	orr.w	r1, r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	0c1b      	lsrs	r3, r3, #16
 800580a:	f003 0104 	and.w	r1, r3, #4
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005812:	f003 0210 	and.w	r2, r3, #16
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	69da      	ldr	r2, [r3, #28]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800582c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
	...

08005848 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	4613      	mov	r3, r2
 8005854:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b01      	cmp	r3, #1
 8005860:	d001      	beq.n	8005866 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8005862:	2302      	movs	r3, #2
 8005864:	e097      	b.n	8005996 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <HAL_SPI_Transmit_DMA+0x2a>
 800586c:	88fb      	ldrh	r3, [r7, #6]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e08f      	b.n	8005996 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800587c:	2b01      	cmp	r3, #1
 800587e:	d101      	bne.n	8005884 <HAL_SPI_Transmit_DMA+0x3c>
 8005880:	2302      	movs	r3, #2
 8005882:	e088      	b.n	8005996 <HAL_SPI_Transmit_DMA+0x14e>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2203      	movs	r2, #3
 8005890:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	88fa      	ldrh	r2, [r7, #6]
 80058a4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	88fa      	ldrh	r2, [r7, #6]
 80058aa:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058d2:	d10f      	bne.n	80058f4 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058f8:	4a29      	ldr	r2, [pc, #164]	@ (80059a0 <HAL_SPI_Transmit_DMA+0x158>)
 80058fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005900:	4a28      	ldr	r2, [pc, #160]	@ (80059a4 <HAL_SPI_Transmit_DMA+0x15c>)
 8005902:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005908:	4a27      	ldr	r2, [pc, #156]	@ (80059a8 <HAL_SPI_Transmit_DMA+0x160>)
 800590a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005910:	2200      	movs	r2, #0
 8005912:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800591c:	4619      	mov	r1, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	330c      	adds	r3, #12
 8005924:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800592a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800592c:	f7fc f842 	bl	80019b4 <HAL_DMA_Start_IT>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00b      	beq.n	800594e <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800593a:	f043 0210 	orr.w	r2, r3, #16
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e023      	b.n	8005996 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005958:	2b40      	cmp	r3, #64	@ 0x40
 800595a:	d007      	beq.n	800596c <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800596a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	685a      	ldr	r2, [r3, #4]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f042 0220 	orr.w	r2, r2, #32
 8005982:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	685a      	ldr	r2, [r3, #4]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f042 0202 	orr.w	r2, r2, #2
 8005992:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	08005c65 	.word	0x08005c65
 80059a4:	08005bbd 	.word	0x08005bbd
 80059a8:	08005c81 	.word	0x08005c81

080059ac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b088      	sub	sp, #32
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10e      	bne.n	80059ec <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d009      	beq.n	80059ec <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d004      	beq.n	80059ec <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	4798      	blx	r3
    return;
 80059ea:	e0ce      	b.n	8005b8a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d009      	beq.n	8005a0a <HAL_SPI_IRQHandler+0x5e>
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d004      	beq.n	8005a0a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	4798      	blx	r3
    return;
 8005a08:	e0bf      	b.n	8005b8a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	f003 0320 	and.w	r3, r3, #32
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d10a      	bne.n	8005a2a <HAL_SPI_IRQHandler+0x7e>
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d105      	bne.n	8005a2a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 80b0 	beq.w	8005b8a <HAL_SPI_IRQHandler+0x1de>
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	f003 0320 	and.w	r3, r3, #32
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 80aa 	beq.w	8005b8a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d023      	beq.n	8005a88 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b03      	cmp	r3, #3
 8005a4a:	d011      	beq.n	8005a70 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a50:	f043 0204 	orr.w	r2, r3, #4
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a58:	2300      	movs	r3, #0
 8005a5a:	617b      	str	r3, [r7, #20]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	617b      	str	r3, [r7, #20]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	617b      	str	r3, [r7, #20]
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	e00b      	b.n	8005a88 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a70:	2300      	movs	r3, #0
 8005a72:	613b      	str	r3, [r7, #16]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	613b      	str	r3, [r7, #16]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	613b      	str	r3, [r7, #16]
 8005a84:	693b      	ldr	r3, [r7, #16]
        return;
 8005a86:	e080      	b.n	8005b8a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	f003 0320 	and.w	r3, r3, #32
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d014      	beq.n	8005abc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a96:	f043 0201 	orr.w	r2, r3, #1
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	60fb      	str	r3, [r7, #12]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	60fb      	str	r3, [r7, #12]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ab8:	601a      	str	r2, [r3, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00c      	beq.n	8005ae0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aca:	f043 0208 	orr.w	r2, r3, #8
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	60bb      	str	r3, [r7, #8]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	60bb      	str	r3, [r7, #8]
 8005ade:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d04f      	beq.n	8005b88 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	685a      	ldr	r2, [r3, #4]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005af6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d104      	bne.n	8005b14 <HAL_SPI_IRQHandler+0x168>
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	f003 0301 	and.w	r3, r3, #1
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d034      	beq.n	8005b7e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0203 	bic.w	r2, r2, #3
 8005b22:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d011      	beq.n	8005b50 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b30:	4a17      	ldr	r2, [pc, #92]	@ (8005b90 <HAL_SPI_IRQHandler+0x1e4>)
 8005b32:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7fc f803 	bl	8001b44 <HAL_DMA_Abort_IT>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d005      	beq.n	8005b50 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b48:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d016      	beq.n	8005b86 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b5c:	4a0c      	ldr	r2, [pc, #48]	@ (8005b90 <HAL_SPI_IRQHandler+0x1e4>)
 8005b5e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7fb ffed 	bl	8001b44 <HAL_DMA_Abort_IT>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00a      	beq.n	8005b86 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b74:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005b7c:	e003      	b.n	8005b86 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f812 	bl	8005ba8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005b84:	e000      	b.n	8005b88 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005b86:	bf00      	nop
    return;
 8005b88:	bf00      	nop
  }
}
 8005b8a:	3720      	adds	r7, #32
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	08005cc1 	.word	0x08005cc1

08005b94 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bca:	f7fb fd27 	bl	800161c <HAL_GetTick>
 8005bce:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bde:	d03b      	beq.n	8005c58 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f022 0220 	bic.w	r2, r2, #32
 8005bee:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 0202 	bic.w	r2, r2, #2
 8005bfe:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	2164      	movs	r1, #100	@ 0x64
 8005c04:	6978      	ldr	r0, [r7, #20]
 8005c06:	f000 f8f7 	bl	8005df8 <SPI_EndRxTxTransaction>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d005      	beq.n	8005c1c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c14:	f043 0220 	orr.w	r2, r3, #32
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10a      	bne.n	8005c3a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c24:	2300      	movs	r3, #0
 8005c26:	60fb      	str	r3, [r7, #12]
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	60fb      	str	r3, [r7, #12]
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	60fb      	str	r3, [r7, #12]
 8005c38:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005c50:	6978      	ldr	r0, [r7, #20]
 8005c52:	f7ff ffa9 	bl	8005ba8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005c56:	e002      	b.n	8005c5e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005c58:	6978      	ldr	r0, [r7, #20]
 8005c5a:	f7fa ff49 	bl	8000af0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c5e:	3718      	adds	r7, #24
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c70:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f7ff ff8e 	bl	8005b94 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c78:	bf00      	nop
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c8c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	685a      	ldr	r2, [r3, #4]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f022 0203 	bic.w	r2, r2, #3
 8005c9c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ca2:	f043 0210 	orr.w	r2, r3, #16
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f7ff ff78 	bl	8005ba8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005cb8:	bf00      	nop
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ccc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f7ff ff64 	bl	8005ba8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ce0:	bf00      	nop
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b088      	sub	sp, #32
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	603b      	str	r3, [r7, #0]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005cf8:	f7fb fc90 	bl	800161c <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d00:	1a9b      	subs	r3, r3, r2
 8005d02:	683a      	ldr	r2, [r7, #0]
 8005d04:	4413      	add	r3, r2
 8005d06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005d08:	f7fb fc88 	bl	800161c <HAL_GetTick>
 8005d0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005d0e:	4b39      	ldr	r3, [pc, #228]	@ (8005df4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	015b      	lsls	r3, r3, #5
 8005d14:	0d1b      	lsrs	r3, r3, #20
 8005d16:	69fa      	ldr	r2, [r7, #28]
 8005d18:	fb02 f303 	mul.w	r3, r2, r3
 8005d1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d1e:	e054      	b.n	8005dca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d26:	d050      	beq.n	8005dca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d28:	f7fb fc78 	bl	800161c <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	69fa      	ldr	r2, [r7, #28]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d902      	bls.n	8005d3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d13d      	bne.n	8005dba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005d4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d56:	d111      	bne.n	8005d7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d60:	d004      	beq.n	8005d6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d6a:	d107      	bne.n	8005d7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d84:	d10f      	bne.n	8005da6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d94:	601a      	str	r2, [r3, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005da4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e017      	b.n	8005dea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	689a      	ldr	r2, [r3, #8]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	bf0c      	ite	eq
 8005dda:	2301      	moveq	r3, #1
 8005ddc:	2300      	movne	r3, #0
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	461a      	mov	r2, r3
 8005de2:	79fb      	ldrb	r3, [r7, #7]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d19b      	bne.n	8005d20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3720      	adds	r7, #32
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	2000000c 	.word	0x2000000c

08005df8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b088      	sub	sp, #32
 8005dfc:	af02      	add	r7, sp, #8
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	9300      	str	r3, [sp, #0]
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	2102      	movs	r1, #2
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f7ff ff6a 	bl	8005ce8 <SPI_WaitFlagStateUntilTimeout>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d007      	beq.n	8005e2a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e1e:	f043 0220 	orr.w	r2, r3, #32
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e032      	b.n	8005e90 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005e2a:	4b1b      	ldr	r3, [pc, #108]	@ (8005e98 <SPI_EndRxTxTransaction+0xa0>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a1b      	ldr	r2, [pc, #108]	@ (8005e9c <SPI_EndRxTxTransaction+0xa4>)
 8005e30:	fba2 2303 	umull	r2, r3, r2, r3
 8005e34:	0d5b      	lsrs	r3, r3, #21
 8005e36:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005e3a:	fb02 f303 	mul.w	r3, r2, r3
 8005e3e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e48:	d112      	bne.n	8005e70 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	2200      	movs	r2, #0
 8005e52:	2180      	movs	r1, #128	@ 0x80
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f7ff ff47 	bl	8005ce8 <SPI_WaitFlagStateUntilTimeout>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d016      	beq.n	8005e8e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e64:	f043 0220 	orr.w	r2, r3, #32
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e00f      	b.n	8005e90 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00a      	beq.n	8005e8c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e86:	2b80      	cmp	r3, #128	@ 0x80
 8005e88:	d0f2      	beq.n	8005e70 <SPI_EndRxTxTransaction+0x78>
 8005e8a:	e000      	b.n	8005e8e <SPI_EndRxTxTransaction+0x96>
        break;
 8005e8c:	bf00      	nop
  }

  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3718      	adds	r7, #24
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	2000000c 	.word	0x2000000c
 8005e9c:	165e9f81 	.word	0x165e9f81

08005ea0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d101      	bne.n	8005eb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e041      	b.n	8005f36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d106      	bne.n	8005ecc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7fb f9e2 	bl	8001290 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2202      	movs	r2, #2
 8005ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	3304      	adds	r3, #4
 8005edc:	4619      	mov	r1, r3
 8005ede:	4610      	mov	r0, r2
 8005ee0:	f000 f9b6 	bl	8006250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3708      	adds	r7, #8
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
	...

08005f40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d001      	beq.n	8005f58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e04e      	b.n	8005ff6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68da      	ldr	r2, [r3, #12]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f042 0201 	orr.w	r2, r2, #1
 8005f6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a23      	ldr	r2, [pc, #140]	@ (8006004 <HAL_TIM_Base_Start_IT+0xc4>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d022      	beq.n	8005fc0 <HAL_TIM_Base_Start_IT+0x80>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f82:	d01d      	beq.n	8005fc0 <HAL_TIM_Base_Start_IT+0x80>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a1f      	ldr	r2, [pc, #124]	@ (8006008 <HAL_TIM_Base_Start_IT+0xc8>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d018      	beq.n	8005fc0 <HAL_TIM_Base_Start_IT+0x80>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a1e      	ldr	r2, [pc, #120]	@ (800600c <HAL_TIM_Base_Start_IT+0xcc>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d013      	beq.n	8005fc0 <HAL_TIM_Base_Start_IT+0x80>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a1c      	ldr	r2, [pc, #112]	@ (8006010 <HAL_TIM_Base_Start_IT+0xd0>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d00e      	beq.n	8005fc0 <HAL_TIM_Base_Start_IT+0x80>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a1b      	ldr	r2, [pc, #108]	@ (8006014 <HAL_TIM_Base_Start_IT+0xd4>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d009      	beq.n	8005fc0 <HAL_TIM_Base_Start_IT+0x80>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a19      	ldr	r2, [pc, #100]	@ (8006018 <HAL_TIM_Base_Start_IT+0xd8>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d004      	beq.n	8005fc0 <HAL_TIM_Base_Start_IT+0x80>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a18      	ldr	r2, [pc, #96]	@ (800601c <HAL_TIM_Base_Start_IT+0xdc>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d111      	bne.n	8005fe4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f003 0307 	and.w	r3, r3, #7
 8005fca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2b06      	cmp	r3, #6
 8005fd0:	d010      	beq.n	8005ff4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f042 0201 	orr.w	r2, r2, #1
 8005fe0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fe2:	e007      	b.n	8005ff4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f042 0201 	orr.w	r2, r2, #1
 8005ff2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	40010000 	.word	0x40010000
 8006008:	40000400 	.word	0x40000400
 800600c:	40000800 	.word	0x40000800
 8006010:	40000c00 	.word	0x40000c00
 8006014:	40010400 	.word	0x40010400
 8006018:	40014000 	.word	0x40014000
 800601c:	40001800 	.word	0x40001800

08006020 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	f003 0302 	and.w	r3, r3, #2
 800603e:	2b00      	cmp	r3, #0
 8006040:	d020      	beq.n	8006084 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	2b00      	cmp	r3, #0
 800604a:	d01b      	beq.n	8006084 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f06f 0202 	mvn.w	r2, #2
 8006054:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	f003 0303 	and.w	r3, r3, #3
 8006066:	2b00      	cmp	r3, #0
 8006068:	d003      	beq.n	8006072 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 f8d2 	bl	8006214 <HAL_TIM_IC_CaptureCallback>
 8006070:	e005      	b.n	800607e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f8c4 	bl	8006200 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 f8d5 	bl	8006228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	f003 0304 	and.w	r3, r3, #4
 800608a:	2b00      	cmp	r3, #0
 800608c:	d020      	beq.n	80060d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f003 0304 	and.w	r3, r3, #4
 8006094:	2b00      	cmp	r3, #0
 8006096:	d01b      	beq.n	80060d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f06f 0204 	mvn.w	r2, #4
 80060a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2202      	movs	r2, #2
 80060a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d003      	beq.n	80060be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f8ac 	bl	8006214 <HAL_TIM_IC_CaptureCallback>
 80060bc:	e005      	b.n	80060ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f89e 	bl	8006200 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f8af 	bl	8006228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	f003 0308 	and.w	r3, r3, #8
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d020      	beq.n	800611c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f003 0308 	and.w	r3, r3, #8
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d01b      	beq.n	800611c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f06f 0208 	mvn.w	r2, #8
 80060ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2204      	movs	r2, #4
 80060f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	69db      	ldr	r3, [r3, #28]
 80060fa:	f003 0303 	and.w	r3, r3, #3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d003      	beq.n	800610a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f886 	bl	8006214 <HAL_TIM_IC_CaptureCallback>
 8006108:	e005      	b.n	8006116 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f878 	bl	8006200 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f889 	bl	8006228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	f003 0310 	and.w	r3, r3, #16
 8006122:	2b00      	cmp	r3, #0
 8006124:	d020      	beq.n	8006168 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f003 0310 	and.w	r3, r3, #16
 800612c:	2b00      	cmp	r3, #0
 800612e:	d01b      	beq.n	8006168 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f06f 0210 	mvn.w	r2, #16
 8006138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2208      	movs	r2, #8
 800613e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	69db      	ldr	r3, [r3, #28]
 8006146:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f860 	bl	8006214 <HAL_TIM_IC_CaptureCallback>
 8006154:	e005      	b.n	8006162 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f852 	bl	8006200 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f863 	bl	8006228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00c      	beq.n	800618c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	d007      	beq.n	800618c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f06f 0201 	mvn.w	r2, #1
 8006184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7fa fc28 	bl	80009dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00c      	beq.n	80061b0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800619c:	2b00      	cmp	r3, #0
 800619e:	d007      	beq.n	80061b0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80061a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f906 	bl	80063bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00c      	beq.n	80061d4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d007      	beq.n	80061d4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80061cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f834 	bl	800623c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	f003 0320 	and.w	r3, r3, #32
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00c      	beq.n	80061f8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f003 0320 	and.w	r3, r3, #32
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d007      	beq.n	80061f8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f06f 0220 	mvn.w	r2, #32
 80061f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f8d8 	bl	80063a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061f8:	bf00      	nop
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006244:	bf00      	nop
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a46      	ldr	r2, [pc, #280]	@ (800637c <TIM_Base_SetConfig+0x12c>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d013      	beq.n	8006290 <TIM_Base_SetConfig+0x40>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800626e:	d00f      	beq.n	8006290 <TIM_Base_SetConfig+0x40>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a43      	ldr	r2, [pc, #268]	@ (8006380 <TIM_Base_SetConfig+0x130>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d00b      	beq.n	8006290 <TIM_Base_SetConfig+0x40>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a42      	ldr	r2, [pc, #264]	@ (8006384 <TIM_Base_SetConfig+0x134>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d007      	beq.n	8006290 <TIM_Base_SetConfig+0x40>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a41      	ldr	r2, [pc, #260]	@ (8006388 <TIM_Base_SetConfig+0x138>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d003      	beq.n	8006290 <TIM_Base_SetConfig+0x40>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a40      	ldr	r2, [pc, #256]	@ (800638c <TIM_Base_SetConfig+0x13c>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d108      	bne.n	80062a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	4313      	orrs	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a35      	ldr	r2, [pc, #212]	@ (800637c <TIM_Base_SetConfig+0x12c>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d02b      	beq.n	8006302 <TIM_Base_SetConfig+0xb2>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062b0:	d027      	beq.n	8006302 <TIM_Base_SetConfig+0xb2>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a32      	ldr	r2, [pc, #200]	@ (8006380 <TIM_Base_SetConfig+0x130>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d023      	beq.n	8006302 <TIM_Base_SetConfig+0xb2>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a31      	ldr	r2, [pc, #196]	@ (8006384 <TIM_Base_SetConfig+0x134>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d01f      	beq.n	8006302 <TIM_Base_SetConfig+0xb2>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a30      	ldr	r2, [pc, #192]	@ (8006388 <TIM_Base_SetConfig+0x138>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d01b      	beq.n	8006302 <TIM_Base_SetConfig+0xb2>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a2f      	ldr	r2, [pc, #188]	@ (800638c <TIM_Base_SetConfig+0x13c>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d017      	beq.n	8006302 <TIM_Base_SetConfig+0xb2>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a2e      	ldr	r2, [pc, #184]	@ (8006390 <TIM_Base_SetConfig+0x140>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d013      	beq.n	8006302 <TIM_Base_SetConfig+0xb2>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a2d      	ldr	r2, [pc, #180]	@ (8006394 <TIM_Base_SetConfig+0x144>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d00f      	beq.n	8006302 <TIM_Base_SetConfig+0xb2>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a2c      	ldr	r2, [pc, #176]	@ (8006398 <TIM_Base_SetConfig+0x148>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d00b      	beq.n	8006302 <TIM_Base_SetConfig+0xb2>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a2b      	ldr	r2, [pc, #172]	@ (800639c <TIM_Base_SetConfig+0x14c>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d007      	beq.n	8006302 <TIM_Base_SetConfig+0xb2>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a2a      	ldr	r2, [pc, #168]	@ (80063a0 <TIM_Base_SetConfig+0x150>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d003      	beq.n	8006302 <TIM_Base_SetConfig+0xb2>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a29      	ldr	r2, [pc, #164]	@ (80063a4 <TIM_Base_SetConfig+0x154>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d108      	bne.n	8006314 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	4313      	orrs	r3, r2
 8006312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	4313      	orrs	r3, r2
 8006320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	689a      	ldr	r2, [r3, #8]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a10      	ldr	r2, [pc, #64]	@ (800637c <TIM_Base_SetConfig+0x12c>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d003      	beq.n	8006348 <TIM_Base_SetConfig+0xf8>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a12      	ldr	r2, [pc, #72]	@ (800638c <TIM_Base_SetConfig+0x13c>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d103      	bne.n	8006350 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	691a      	ldr	r2, [r3, #16]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b01      	cmp	r3, #1
 8006360:	d105      	bne.n	800636e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	f023 0201 	bic.w	r2, r3, #1
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	611a      	str	r2, [r3, #16]
  }
}
 800636e:	bf00      	nop
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	40010000 	.word	0x40010000
 8006380:	40000400 	.word	0x40000400
 8006384:	40000800 	.word	0x40000800
 8006388:	40000c00 	.word	0x40000c00
 800638c:	40010400 	.word	0x40010400
 8006390:	40014000 	.word	0x40014000
 8006394:	40014400 	.word	0x40014400
 8006398:	40014800 	.word	0x40014800
 800639c:	40001800 	.word	0x40001800
 80063a0:	40001c00 	.word	0x40001c00
 80063a4:	40002000 	.word	0x40002000

080063a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063c4:	bf00      	nop
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e042      	b.n	8006468 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d106      	bne.n	80063fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7fa ff72 	bl	80012e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2224      	movs	r2, #36	@ 0x24
 8006400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68da      	ldr	r2, [r3, #12]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006412:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 fd11 	bl	8006e3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	691a      	ldr	r2, [r3, #16]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006428:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	695a      	ldr	r2, [r3, #20]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006438:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68da      	ldr	r2, [r3, #12]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006448:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2220      	movs	r2, #32
 8006454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2220      	movs	r2, #32
 800645c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3708      	adds	r7, #8
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	4613      	mov	r3, r2
 800647c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b20      	cmp	r3, #32
 8006488:	d121      	bne.n	80064ce <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d002      	beq.n	8006496 <HAL_UART_Transmit_IT+0x26>
 8006490:	88fb      	ldrh	r3, [r7, #6]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e01a      	b.n	80064d0 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	88fa      	ldrh	r2, [r7, #6]
 80064a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	88fa      	ldrh	r2, [r7, #6]
 80064aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2221      	movs	r2, #33	@ 0x21
 80064b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68da      	ldr	r2, [r3, #12]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80064c8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	e000      	b.n	80064d0 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80064ce:	2302      	movs	r3, #2
  }
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3714      	adds	r7, #20
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	4613      	mov	r3, r2
 80064e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b20      	cmp	r3, #32
 80064f4:	d112      	bne.n	800651c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <HAL_UART_Receive_IT+0x26>
 80064fc:	88fb      	ldrh	r3, [r7, #6]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e00b      	b.n	800651e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800650c:	88fb      	ldrh	r3, [r7, #6]
 800650e:	461a      	mov	r2, r3
 8006510:	68b9      	ldr	r1, [r7, #8]
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f000 faba 	bl	8006a8c <UART_Start_Receive_IT>
 8006518:	4603      	mov	r3, r0
 800651a:	e000      	b.n	800651e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800651c:	2302      	movs	r3, #2
  }
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
	...

08006528 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b0ba      	sub	sp, #232	@ 0xe8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800654e:	2300      	movs	r3, #0
 8006550:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006554:	2300      	movs	r3, #0
 8006556:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800655a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800655e:	f003 030f 	and.w	r3, r3, #15
 8006562:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006566:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10f      	bne.n	800658e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800656e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006572:	f003 0320 	and.w	r3, r3, #32
 8006576:	2b00      	cmp	r3, #0
 8006578:	d009      	beq.n	800658e <HAL_UART_IRQHandler+0x66>
 800657a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800657e:	f003 0320 	and.w	r3, r3, #32
 8006582:	2b00      	cmp	r3, #0
 8006584:	d003      	beq.n	800658e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fb99 	bl	8006cbe <UART_Receive_IT>
      return;
 800658c:	e25b      	b.n	8006a46 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800658e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006592:	2b00      	cmp	r3, #0
 8006594:	f000 80de 	beq.w	8006754 <HAL_UART_IRQHandler+0x22c>
 8006598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800659c:	f003 0301 	and.w	r3, r3, #1
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d106      	bne.n	80065b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80065a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065a8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f000 80d1 	beq.w	8006754 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80065b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00b      	beq.n	80065d6 <HAL_UART_IRQHandler+0xae>
 80065be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d005      	beq.n	80065d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ce:	f043 0201 	orr.w	r2, r3, #1
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065da:	f003 0304 	and.w	r3, r3, #4
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00b      	beq.n	80065fa <HAL_UART_IRQHandler+0xd2>
 80065e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d005      	beq.n	80065fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065f2:	f043 0202 	orr.w	r2, r3, #2
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065fe:	f003 0302 	and.w	r3, r3, #2
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00b      	beq.n	800661e <HAL_UART_IRQHandler+0xf6>
 8006606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b00      	cmp	r3, #0
 8006610:	d005      	beq.n	800661e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006616:	f043 0204 	orr.w	r2, r3, #4
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800661e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006622:	f003 0308 	and.w	r3, r3, #8
 8006626:	2b00      	cmp	r3, #0
 8006628:	d011      	beq.n	800664e <HAL_UART_IRQHandler+0x126>
 800662a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800662e:	f003 0320 	and.w	r3, r3, #32
 8006632:	2b00      	cmp	r3, #0
 8006634:	d105      	bne.n	8006642 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006636:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b00      	cmp	r3, #0
 8006640:	d005      	beq.n	800664e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006646:	f043 0208 	orr.w	r2, r3, #8
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006652:	2b00      	cmp	r3, #0
 8006654:	f000 81f2 	beq.w	8006a3c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800665c:	f003 0320 	and.w	r3, r3, #32
 8006660:	2b00      	cmp	r3, #0
 8006662:	d008      	beq.n	8006676 <HAL_UART_IRQHandler+0x14e>
 8006664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006668:	f003 0320 	and.w	r3, r3, #32
 800666c:	2b00      	cmp	r3, #0
 800666e:	d002      	beq.n	8006676 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 fb24 	bl	8006cbe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	695b      	ldr	r3, [r3, #20]
 800667c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006680:	2b40      	cmp	r3, #64	@ 0x40
 8006682:	bf0c      	ite	eq
 8006684:	2301      	moveq	r3, #1
 8006686:	2300      	movne	r3, #0
 8006688:	b2db      	uxtb	r3, r3
 800668a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006692:	f003 0308 	and.w	r3, r3, #8
 8006696:	2b00      	cmp	r3, #0
 8006698:	d103      	bne.n	80066a2 <HAL_UART_IRQHandler+0x17a>
 800669a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d04f      	beq.n	8006742 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 fa2c 	bl	8006b00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066b2:	2b40      	cmp	r3, #64	@ 0x40
 80066b4:	d141      	bne.n	800673a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	3314      	adds	r3, #20
 80066bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80066c4:	e853 3f00 	ldrex	r3, [r3]
 80066c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80066cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80066d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	3314      	adds	r3, #20
 80066de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80066e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80066e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80066ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80066f2:	e841 2300 	strex	r3, r2, [r1]
 80066f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80066fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1d9      	bne.n	80066b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006706:	2b00      	cmp	r3, #0
 8006708:	d013      	beq.n	8006732 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800670e:	4a7e      	ldr	r2, [pc, #504]	@ (8006908 <HAL_UART_IRQHandler+0x3e0>)
 8006710:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006716:	4618      	mov	r0, r3
 8006718:	f7fb fa14 	bl	8001b44 <HAL_DMA_Abort_IT>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d016      	beq.n	8006750 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006726:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800672c:	4610      	mov	r0, r2
 800672e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006730:	e00e      	b.n	8006750 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f994 	bl	8006a60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006738:	e00a      	b.n	8006750 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f990 	bl	8006a60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006740:	e006      	b.n	8006750 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 f98c 	bl	8006a60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800674e:	e175      	b.n	8006a3c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006750:	bf00      	nop
    return;
 8006752:	e173      	b.n	8006a3c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006758:	2b01      	cmp	r3, #1
 800675a:	f040 814f 	bne.w	80069fc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800675e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006762:	f003 0310 	and.w	r3, r3, #16
 8006766:	2b00      	cmp	r3, #0
 8006768:	f000 8148 	beq.w	80069fc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800676c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006770:	f003 0310 	and.w	r3, r3, #16
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 8141 	beq.w	80069fc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800677a:	2300      	movs	r3, #0
 800677c:	60bb      	str	r3, [r7, #8]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	60bb      	str	r3, [r7, #8]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	60bb      	str	r3, [r7, #8]
 800678e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800679a:	2b40      	cmp	r3, #64	@ 0x40
 800679c:	f040 80b6 	bne.w	800690c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80067ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 8145 	beq.w	8006a40 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80067ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80067be:	429a      	cmp	r2, r3
 80067c0:	f080 813e 	bcs.w	8006a40 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80067ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067d6:	f000 8088 	beq.w	80068ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	330c      	adds	r3, #12
 80067e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80067e8:	e853 3f00 	ldrex	r3, [r3]
 80067ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80067f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80067f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	330c      	adds	r3, #12
 8006802:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006806:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800680a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006812:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006816:	e841 2300 	strex	r3, r2, [r1]
 800681a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800681e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1d9      	bne.n	80067da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	3314      	adds	r3, #20
 800682c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006830:	e853 3f00 	ldrex	r3, [r3]
 8006834:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006836:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006838:	f023 0301 	bic.w	r3, r3, #1
 800683c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	3314      	adds	r3, #20
 8006846:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800684a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800684e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006850:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006852:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006856:	e841 2300 	strex	r3, r2, [r1]
 800685a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800685c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1e1      	bne.n	8006826 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	3314      	adds	r3, #20
 8006868:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800686c:	e853 3f00 	ldrex	r3, [r3]
 8006870:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006872:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006874:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006878:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	3314      	adds	r3, #20
 8006882:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006886:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006888:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800688c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800688e:	e841 2300 	strex	r3, r2, [r1]
 8006892:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006894:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1e3      	bne.n	8006862 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2220      	movs	r2, #32
 800689e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	330c      	adds	r3, #12
 80068ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068b2:	e853 3f00 	ldrex	r3, [r3]
 80068b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80068b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068ba:	f023 0310 	bic.w	r3, r3, #16
 80068be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	330c      	adds	r3, #12
 80068c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80068cc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80068ce:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80068d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80068d4:	e841 2300 	strex	r3, r2, [r1]
 80068d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80068da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1e3      	bne.n	80068a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7fb f8bd 	bl	8001a64 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2202      	movs	r2, #2
 80068ee:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	4619      	mov	r1, r3
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 f8b7 	bl	8006a74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006906:	e09b      	b.n	8006a40 <HAL_UART_IRQHandler+0x518>
 8006908:	08006bc7 	.word	0x08006bc7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006914:	b29b      	uxth	r3, r3
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006920:	b29b      	uxth	r3, r3
 8006922:	2b00      	cmp	r3, #0
 8006924:	f000 808e 	beq.w	8006a44 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006928:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800692c:	2b00      	cmp	r3, #0
 800692e:	f000 8089 	beq.w	8006a44 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	330c      	adds	r3, #12
 8006938:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800693c:	e853 3f00 	ldrex	r3, [r3]
 8006940:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006944:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006948:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	330c      	adds	r3, #12
 8006952:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006956:	647a      	str	r2, [r7, #68]	@ 0x44
 8006958:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800695c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800695e:	e841 2300 	strex	r3, r2, [r1]
 8006962:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1e3      	bne.n	8006932 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	3314      	adds	r3, #20
 8006970:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006974:	e853 3f00 	ldrex	r3, [r3]
 8006978:	623b      	str	r3, [r7, #32]
   return(result);
 800697a:	6a3b      	ldr	r3, [r7, #32]
 800697c:	f023 0301 	bic.w	r3, r3, #1
 8006980:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	3314      	adds	r3, #20
 800698a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800698e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006990:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006992:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006994:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006996:	e841 2300 	strex	r3, r2, [r1]
 800699a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800699c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1e3      	bne.n	800696a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2220      	movs	r2, #32
 80069a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	330c      	adds	r3, #12
 80069b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	e853 3f00 	ldrex	r3, [r3]
 80069be:	60fb      	str	r3, [r7, #12]
   return(result);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f023 0310 	bic.w	r3, r3, #16
 80069c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	330c      	adds	r3, #12
 80069d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80069d4:	61fa      	str	r2, [r7, #28]
 80069d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d8:	69b9      	ldr	r1, [r7, #24]
 80069da:	69fa      	ldr	r2, [r7, #28]
 80069dc:	e841 2300 	strex	r3, r2, [r1]
 80069e0:	617b      	str	r3, [r7, #20]
   return(result);
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1e3      	bne.n	80069b0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2202      	movs	r2, #2
 80069ec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80069f2:	4619      	mov	r1, r3
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 f83d 	bl	8006a74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069fa:	e023      	b.n	8006a44 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80069fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d009      	beq.n	8006a1c <HAL_UART_IRQHandler+0x4f4>
 8006a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d003      	beq.n	8006a1c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 f8ea 	bl	8006bee <UART_Transmit_IT>
    return;
 8006a1a:	e014      	b.n	8006a46 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00e      	beq.n	8006a46 <HAL_UART_IRQHandler+0x51e>
 8006a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d008      	beq.n	8006a46 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 f92a 	bl	8006c8e <UART_EndTransmit_IT>
    return;
 8006a3a:	e004      	b.n	8006a46 <HAL_UART_IRQHandler+0x51e>
    return;
 8006a3c:	bf00      	nop
 8006a3e:	e002      	b.n	8006a46 <HAL_UART_IRQHandler+0x51e>
      return;
 8006a40:	bf00      	nop
 8006a42:	e000      	b.n	8006a46 <HAL_UART_IRQHandler+0x51e>
      return;
 8006a44:	bf00      	nop
  }
}
 8006a46:	37e8      	adds	r7, #232	@ 0xe8
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a80:	bf00      	nop
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	4613      	mov	r3, r2
 8006a98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	88fa      	ldrh	r2, [r7, #6]
 8006aa4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	88fa      	ldrh	r2, [r7, #6]
 8006aaa:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2222      	movs	r2, #34	@ 0x22
 8006ab6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d007      	beq.n	8006ad2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68da      	ldr	r2, [r3, #12]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ad0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	695a      	ldr	r2, [r3, #20]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f042 0201 	orr.w	r2, r2, #1
 8006ae0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68da      	ldr	r2, [r3, #12]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f042 0220 	orr.w	r2, r2, #32
 8006af0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b095      	sub	sp, #84	@ 0x54
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	330c      	adds	r3, #12
 8006b0e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b12:	e853 3f00 	ldrex	r3, [r3]
 8006b16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	330c      	adds	r3, #12
 8006b26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b28:	643a      	str	r2, [r7, #64]	@ 0x40
 8006b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b30:	e841 2300 	strex	r3, r2, [r1]
 8006b34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1e5      	bne.n	8006b08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	3314      	adds	r3, #20
 8006b42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b44:	6a3b      	ldr	r3, [r7, #32]
 8006b46:	e853 3f00 	ldrex	r3, [r3]
 8006b4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	f023 0301 	bic.w	r3, r3, #1
 8006b52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	3314      	adds	r3, #20
 8006b5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b64:	e841 2300 	strex	r3, r2, [r1]
 8006b68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1e5      	bne.n	8006b3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d119      	bne.n	8006bac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	330c      	adds	r3, #12
 8006b7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	e853 3f00 	ldrex	r3, [r3]
 8006b86:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	f023 0310 	bic.w	r3, r3, #16
 8006b8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	330c      	adds	r3, #12
 8006b96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b98:	61ba      	str	r2, [r7, #24]
 8006b9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9c:	6979      	ldr	r1, [r7, #20]
 8006b9e:	69ba      	ldr	r2, [r7, #24]
 8006ba0:	e841 2300 	strex	r3, r2, [r1]
 8006ba4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1e5      	bne.n	8006b78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2220      	movs	r2, #32
 8006bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006bba:	bf00      	nop
 8006bbc:	3754      	adds	r7, #84	@ 0x54
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr

08006bc6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b084      	sub	sp, #16
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f7ff ff3d 	bl	8006a60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006be6:	bf00      	nop
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b085      	sub	sp, #20
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b21      	cmp	r3, #33	@ 0x21
 8006c00:	d13e      	bne.n	8006c80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c0a:	d114      	bne.n	8006c36 <UART_Transmit_IT+0x48>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d110      	bne.n	8006c36 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a1b      	ldr	r3, [r3, #32]
 8006c18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	881b      	ldrh	r3, [r3, #0]
 8006c1e:	461a      	mov	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	1c9a      	adds	r2, r3, #2
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	621a      	str	r2, [r3, #32]
 8006c34:	e008      	b.n	8006c48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	1c59      	adds	r1, r3, #1
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	6211      	str	r1, [r2, #32]
 8006c40:	781a      	ldrb	r2, [r3, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	4619      	mov	r1, r3
 8006c56:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10f      	bne.n	8006c7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68da      	ldr	r2, [r3, #12]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006c6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68da      	ldr	r2, [r3, #12]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	e000      	b.n	8006c82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006c80:	2302      	movs	r3, #2
  }
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3714      	adds	r7, #20
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr

08006c8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b082      	sub	sp, #8
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68da      	ldr	r2, [r3, #12]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ca4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2220      	movs	r2, #32
 8006caa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f7ff fecc 	bl	8006a4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3708      	adds	r7, #8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b08c      	sub	sp, #48	@ 0x30
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	2b22      	cmp	r3, #34	@ 0x22
 8006cd0:	f040 80ae 	bne.w	8006e30 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cdc:	d117      	bne.n	8006d0e <UART_Receive_IT+0x50>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d113      	bne.n	8006d0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cee:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d06:	1c9a      	adds	r2, r3, #2
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	629a      	str	r2, [r3, #40]	@ 0x28
 8006d0c:	e026      	b.n	8006d5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006d14:	2300      	movs	r3, #0
 8006d16:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d20:	d007      	beq.n	8006d32 <UART_Receive_IT+0x74>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d10a      	bne.n	8006d40 <UART_Receive_IT+0x82>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d106      	bne.n	8006d40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	b2da      	uxtb	r2, r3
 8006d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d3c:	701a      	strb	r2, [r3, #0]
 8006d3e:	e008      	b.n	8006d52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d4c:	b2da      	uxtb	r2, r3
 8006d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d56:	1c5a      	adds	r2, r3, #1
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	3b01      	subs	r3, #1
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	4619      	mov	r1, r3
 8006d6a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d15d      	bne.n	8006e2c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68da      	ldr	r2, [r3, #12]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f022 0220 	bic.w	r2, r2, #32
 8006d7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68da      	ldr	r2, [r3, #12]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006d8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	695a      	ldr	r2, [r3, #20]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f022 0201 	bic.w	r2, r2, #1
 8006d9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2220      	movs	r2, #32
 8006da4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d135      	bne.n	8006e22 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	330c      	adds	r3, #12
 8006dc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	e853 3f00 	ldrex	r3, [r3]
 8006dca:	613b      	str	r3, [r7, #16]
   return(result);
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	f023 0310 	bic.w	r3, r3, #16
 8006dd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	330c      	adds	r3, #12
 8006dda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ddc:	623a      	str	r2, [r7, #32]
 8006dde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de0:	69f9      	ldr	r1, [r7, #28]
 8006de2:	6a3a      	ldr	r2, [r7, #32]
 8006de4:	e841 2300 	strex	r3, r2, [r1]
 8006de8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1e5      	bne.n	8006dbc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0310 	and.w	r3, r3, #16
 8006dfa:	2b10      	cmp	r3, #16
 8006dfc:	d10a      	bne.n	8006e14 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006dfe:	2300      	movs	r3, #0
 8006e00:	60fb      	str	r3, [r7, #12]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	60fb      	str	r3, [r7, #12]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	60fb      	str	r3, [r7, #12]
 8006e12:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006e18:	4619      	mov	r1, r3
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f7ff fe2a 	bl	8006a74 <HAL_UARTEx_RxEventCallback>
 8006e20:	e002      	b.n	8006e28 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f7f9 fe74 	bl	8000b10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	e002      	b.n	8006e32 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	e000      	b.n	8006e32 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006e30:	2302      	movs	r3, #2
  }
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3730      	adds	r7, #48	@ 0x30
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
	...

08006e3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e40:	b0c0      	sub	sp, #256	@ 0x100
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e58:	68d9      	ldr	r1, [r3, #12]
 8006e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	ea40 0301 	orr.w	r3, r0, r1
 8006e64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e6a:	689a      	ldr	r2, [r3, #8]
 8006e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	431a      	orrs	r2, r3
 8006e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	431a      	orrs	r2, r3
 8006e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006e94:	f021 010c 	bic.w	r1, r1, #12
 8006e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006ea2:	430b      	orrs	r3, r1
 8006ea4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eb6:	6999      	ldr	r1, [r3, #24]
 8006eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	ea40 0301 	orr.w	r3, r0, r1
 8006ec2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	4b8f      	ldr	r3, [pc, #572]	@ (8007108 <UART_SetConfig+0x2cc>)
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d005      	beq.n	8006edc <UART_SetConfig+0xa0>
 8006ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	4b8d      	ldr	r3, [pc, #564]	@ (800710c <UART_SetConfig+0x2d0>)
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d104      	bne.n	8006ee6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006edc:	f7fd ffce 	bl	8004e7c <HAL_RCC_GetPCLK2Freq>
 8006ee0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006ee4:	e003      	b.n	8006eee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ee6:	f7fd ffb5 	bl	8004e54 <HAL_RCC_GetPCLK1Freq>
 8006eea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ef2:	69db      	ldr	r3, [r3, #28]
 8006ef4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ef8:	f040 810c 	bne.w	8007114 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006efc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f00:	2200      	movs	r2, #0
 8006f02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006f06:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006f0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006f0e:	4622      	mov	r2, r4
 8006f10:	462b      	mov	r3, r5
 8006f12:	1891      	adds	r1, r2, r2
 8006f14:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006f16:	415b      	adcs	r3, r3
 8006f18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006f1e:	4621      	mov	r1, r4
 8006f20:	eb12 0801 	adds.w	r8, r2, r1
 8006f24:	4629      	mov	r1, r5
 8006f26:	eb43 0901 	adc.w	r9, r3, r1
 8006f2a:	f04f 0200 	mov.w	r2, #0
 8006f2e:	f04f 0300 	mov.w	r3, #0
 8006f32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f3e:	4690      	mov	r8, r2
 8006f40:	4699      	mov	r9, r3
 8006f42:	4623      	mov	r3, r4
 8006f44:	eb18 0303 	adds.w	r3, r8, r3
 8006f48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006f4c:	462b      	mov	r3, r5
 8006f4e:	eb49 0303 	adc.w	r3, r9, r3
 8006f52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006f62:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006f66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	18db      	adds	r3, r3, r3
 8006f6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f70:	4613      	mov	r3, r2
 8006f72:	eb42 0303 	adc.w	r3, r2, r3
 8006f76:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006f7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006f80:	f7f9 f99e 	bl	80002c0 <__aeabi_uldivmod>
 8006f84:	4602      	mov	r2, r0
 8006f86:	460b      	mov	r3, r1
 8006f88:	4b61      	ldr	r3, [pc, #388]	@ (8007110 <UART_SetConfig+0x2d4>)
 8006f8a:	fba3 2302 	umull	r2, r3, r3, r2
 8006f8e:	095b      	lsrs	r3, r3, #5
 8006f90:	011c      	lsls	r4, r3, #4
 8006f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f96:	2200      	movs	r2, #0
 8006f98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f9c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006fa0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006fa4:	4642      	mov	r2, r8
 8006fa6:	464b      	mov	r3, r9
 8006fa8:	1891      	adds	r1, r2, r2
 8006faa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006fac:	415b      	adcs	r3, r3
 8006fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006fb4:	4641      	mov	r1, r8
 8006fb6:	eb12 0a01 	adds.w	sl, r2, r1
 8006fba:	4649      	mov	r1, r9
 8006fbc:	eb43 0b01 	adc.w	fp, r3, r1
 8006fc0:	f04f 0200 	mov.w	r2, #0
 8006fc4:	f04f 0300 	mov.w	r3, #0
 8006fc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006fcc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006fd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fd4:	4692      	mov	sl, r2
 8006fd6:	469b      	mov	fp, r3
 8006fd8:	4643      	mov	r3, r8
 8006fda:	eb1a 0303 	adds.w	r3, sl, r3
 8006fde:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006fe2:	464b      	mov	r3, r9
 8006fe4:	eb4b 0303 	adc.w	r3, fp, r3
 8006fe8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ff8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006ffc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007000:	460b      	mov	r3, r1
 8007002:	18db      	adds	r3, r3, r3
 8007004:	643b      	str	r3, [r7, #64]	@ 0x40
 8007006:	4613      	mov	r3, r2
 8007008:	eb42 0303 	adc.w	r3, r2, r3
 800700c:	647b      	str	r3, [r7, #68]	@ 0x44
 800700e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007012:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007016:	f7f9 f953 	bl	80002c0 <__aeabi_uldivmod>
 800701a:	4602      	mov	r2, r0
 800701c:	460b      	mov	r3, r1
 800701e:	4611      	mov	r1, r2
 8007020:	4b3b      	ldr	r3, [pc, #236]	@ (8007110 <UART_SetConfig+0x2d4>)
 8007022:	fba3 2301 	umull	r2, r3, r3, r1
 8007026:	095b      	lsrs	r3, r3, #5
 8007028:	2264      	movs	r2, #100	@ 0x64
 800702a:	fb02 f303 	mul.w	r3, r2, r3
 800702e:	1acb      	subs	r3, r1, r3
 8007030:	00db      	lsls	r3, r3, #3
 8007032:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007036:	4b36      	ldr	r3, [pc, #216]	@ (8007110 <UART_SetConfig+0x2d4>)
 8007038:	fba3 2302 	umull	r2, r3, r3, r2
 800703c:	095b      	lsrs	r3, r3, #5
 800703e:	005b      	lsls	r3, r3, #1
 8007040:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007044:	441c      	add	r4, r3
 8007046:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800704a:	2200      	movs	r2, #0
 800704c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007050:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007054:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007058:	4642      	mov	r2, r8
 800705a:	464b      	mov	r3, r9
 800705c:	1891      	adds	r1, r2, r2
 800705e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007060:	415b      	adcs	r3, r3
 8007062:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007064:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007068:	4641      	mov	r1, r8
 800706a:	1851      	adds	r1, r2, r1
 800706c:	6339      	str	r1, [r7, #48]	@ 0x30
 800706e:	4649      	mov	r1, r9
 8007070:	414b      	adcs	r3, r1
 8007072:	637b      	str	r3, [r7, #52]	@ 0x34
 8007074:	f04f 0200 	mov.w	r2, #0
 8007078:	f04f 0300 	mov.w	r3, #0
 800707c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007080:	4659      	mov	r1, fp
 8007082:	00cb      	lsls	r3, r1, #3
 8007084:	4651      	mov	r1, sl
 8007086:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800708a:	4651      	mov	r1, sl
 800708c:	00ca      	lsls	r2, r1, #3
 800708e:	4610      	mov	r0, r2
 8007090:	4619      	mov	r1, r3
 8007092:	4603      	mov	r3, r0
 8007094:	4642      	mov	r2, r8
 8007096:	189b      	adds	r3, r3, r2
 8007098:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800709c:	464b      	mov	r3, r9
 800709e:	460a      	mov	r2, r1
 80070a0:	eb42 0303 	adc.w	r3, r2, r3
 80070a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80070a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80070b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80070b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80070bc:	460b      	mov	r3, r1
 80070be:	18db      	adds	r3, r3, r3
 80070c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070c2:	4613      	mov	r3, r2
 80070c4:	eb42 0303 	adc.w	r3, r2, r3
 80070c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80070ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80070d2:	f7f9 f8f5 	bl	80002c0 <__aeabi_uldivmod>
 80070d6:	4602      	mov	r2, r0
 80070d8:	460b      	mov	r3, r1
 80070da:	4b0d      	ldr	r3, [pc, #52]	@ (8007110 <UART_SetConfig+0x2d4>)
 80070dc:	fba3 1302 	umull	r1, r3, r3, r2
 80070e0:	095b      	lsrs	r3, r3, #5
 80070e2:	2164      	movs	r1, #100	@ 0x64
 80070e4:	fb01 f303 	mul.w	r3, r1, r3
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	00db      	lsls	r3, r3, #3
 80070ec:	3332      	adds	r3, #50	@ 0x32
 80070ee:	4a08      	ldr	r2, [pc, #32]	@ (8007110 <UART_SetConfig+0x2d4>)
 80070f0:	fba2 2303 	umull	r2, r3, r2, r3
 80070f4:	095b      	lsrs	r3, r3, #5
 80070f6:	f003 0207 	and.w	r2, r3, #7
 80070fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4422      	add	r2, r4
 8007102:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007104:	e106      	b.n	8007314 <UART_SetConfig+0x4d8>
 8007106:	bf00      	nop
 8007108:	40011000 	.word	0x40011000
 800710c:	40011400 	.word	0x40011400
 8007110:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007114:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007118:	2200      	movs	r2, #0
 800711a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800711e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007122:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007126:	4642      	mov	r2, r8
 8007128:	464b      	mov	r3, r9
 800712a:	1891      	adds	r1, r2, r2
 800712c:	6239      	str	r1, [r7, #32]
 800712e:	415b      	adcs	r3, r3
 8007130:	627b      	str	r3, [r7, #36]	@ 0x24
 8007132:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007136:	4641      	mov	r1, r8
 8007138:	1854      	adds	r4, r2, r1
 800713a:	4649      	mov	r1, r9
 800713c:	eb43 0501 	adc.w	r5, r3, r1
 8007140:	f04f 0200 	mov.w	r2, #0
 8007144:	f04f 0300 	mov.w	r3, #0
 8007148:	00eb      	lsls	r3, r5, #3
 800714a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800714e:	00e2      	lsls	r2, r4, #3
 8007150:	4614      	mov	r4, r2
 8007152:	461d      	mov	r5, r3
 8007154:	4643      	mov	r3, r8
 8007156:	18e3      	adds	r3, r4, r3
 8007158:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800715c:	464b      	mov	r3, r9
 800715e:	eb45 0303 	adc.w	r3, r5, r3
 8007162:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007172:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007176:	f04f 0200 	mov.w	r2, #0
 800717a:	f04f 0300 	mov.w	r3, #0
 800717e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007182:	4629      	mov	r1, r5
 8007184:	008b      	lsls	r3, r1, #2
 8007186:	4621      	mov	r1, r4
 8007188:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800718c:	4621      	mov	r1, r4
 800718e:	008a      	lsls	r2, r1, #2
 8007190:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007194:	f7f9 f894 	bl	80002c0 <__aeabi_uldivmod>
 8007198:	4602      	mov	r2, r0
 800719a:	460b      	mov	r3, r1
 800719c:	4b60      	ldr	r3, [pc, #384]	@ (8007320 <UART_SetConfig+0x4e4>)
 800719e:	fba3 2302 	umull	r2, r3, r3, r2
 80071a2:	095b      	lsrs	r3, r3, #5
 80071a4:	011c      	lsls	r4, r3, #4
 80071a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071aa:	2200      	movs	r2, #0
 80071ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80071b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80071b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80071b8:	4642      	mov	r2, r8
 80071ba:	464b      	mov	r3, r9
 80071bc:	1891      	adds	r1, r2, r2
 80071be:	61b9      	str	r1, [r7, #24]
 80071c0:	415b      	adcs	r3, r3
 80071c2:	61fb      	str	r3, [r7, #28]
 80071c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071c8:	4641      	mov	r1, r8
 80071ca:	1851      	adds	r1, r2, r1
 80071cc:	6139      	str	r1, [r7, #16]
 80071ce:	4649      	mov	r1, r9
 80071d0:	414b      	adcs	r3, r1
 80071d2:	617b      	str	r3, [r7, #20]
 80071d4:	f04f 0200 	mov.w	r2, #0
 80071d8:	f04f 0300 	mov.w	r3, #0
 80071dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80071e0:	4659      	mov	r1, fp
 80071e2:	00cb      	lsls	r3, r1, #3
 80071e4:	4651      	mov	r1, sl
 80071e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071ea:	4651      	mov	r1, sl
 80071ec:	00ca      	lsls	r2, r1, #3
 80071ee:	4610      	mov	r0, r2
 80071f0:	4619      	mov	r1, r3
 80071f2:	4603      	mov	r3, r0
 80071f4:	4642      	mov	r2, r8
 80071f6:	189b      	adds	r3, r3, r2
 80071f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80071fc:	464b      	mov	r3, r9
 80071fe:	460a      	mov	r2, r1
 8007200:	eb42 0303 	adc.w	r3, r2, r3
 8007204:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007212:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007214:	f04f 0200 	mov.w	r2, #0
 8007218:	f04f 0300 	mov.w	r3, #0
 800721c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007220:	4649      	mov	r1, r9
 8007222:	008b      	lsls	r3, r1, #2
 8007224:	4641      	mov	r1, r8
 8007226:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800722a:	4641      	mov	r1, r8
 800722c:	008a      	lsls	r2, r1, #2
 800722e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007232:	f7f9 f845 	bl	80002c0 <__aeabi_uldivmod>
 8007236:	4602      	mov	r2, r0
 8007238:	460b      	mov	r3, r1
 800723a:	4611      	mov	r1, r2
 800723c:	4b38      	ldr	r3, [pc, #224]	@ (8007320 <UART_SetConfig+0x4e4>)
 800723e:	fba3 2301 	umull	r2, r3, r3, r1
 8007242:	095b      	lsrs	r3, r3, #5
 8007244:	2264      	movs	r2, #100	@ 0x64
 8007246:	fb02 f303 	mul.w	r3, r2, r3
 800724a:	1acb      	subs	r3, r1, r3
 800724c:	011b      	lsls	r3, r3, #4
 800724e:	3332      	adds	r3, #50	@ 0x32
 8007250:	4a33      	ldr	r2, [pc, #204]	@ (8007320 <UART_SetConfig+0x4e4>)
 8007252:	fba2 2303 	umull	r2, r3, r2, r3
 8007256:	095b      	lsrs	r3, r3, #5
 8007258:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800725c:	441c      	add	r4, r3
 800725e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007262:	2200      	movs	r2, #0
 8007264:	673b      	str	r3, [r7, #112]	@ 0x70
 8007266:	677a      	str	r2, [r7, #116]	@ 0x74
 8007268:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800726c:	4642      	mov	r2, r8
 800726e:	464b      	mov	r3, r9
 8007270:	1891      	adds	r1, r2, r2
 8007272:	60b9      	str	r1, [r7, #8]
 8007274:	415b      	adcs	r3, r3
 8007276:	60fb      	str	r3, [r7, #12]
 8007278:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800727c:	4641      	mov	r1, r8
 800727e:	1851      	adds	r1, r2, r1
 8007280:	6039      	str	r1, [r7, #0]
 8007282:	4649      	mov	r1, r9
 8007284:	414b      	adcs	r3, r1
 8007286:	607b      	str	r3, [r7, #4]
 8007288:	f04f 0200 	mov.w	r2, #0
 800728c:	f04f 0300 	mov.w	r3, #0
 8007290:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007294:	4659      	mov	r1, fp
 8007296:	00cb      	lsls	r3, r1, #3
 8007298:	4651      	mov	r1, sl
 800729a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800729e:	4651      	mov	r1, sl
 80072a0:	00ca      	lsls	r2, r1, #3
 80072a2:	4610      	mov	r0, r2
 80072a4:	4619      	mov	r1, r3
 80072a6:	4603      	mov	r3, r0
 80072a8:	4642      	mov	r2, r8
 80072aa:	189b      	adds	r3, r3, r2
 80072ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80072ae:	464b      	mov	r3, r9
 80072b0:	460a      	mov	r2, r1
 80072b2:	eb42 0303 	adc.w	r3, r2, r3
 80072b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80072b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80072c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80072c4:	f04f 0200 	mov.w	r2, #0
 80072c8:	f04f 0300 	mov.w	r3, #0
 80072cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80072d0:	4649      	mov	r1, r9
 80072d2:	008b      	lsls	r3, r1, #2
 80072d4:	4641      	mov	r1, r8
 80072d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072da:	4641      	mov	r1, r8
 80072dc:	008a      	lsls	r2, r1, #2
 80072de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80072e2:	f7f8 ffed 	bl	80002c0 <__aeabi_uldivmod>
 80072e6:	4602      	mov	r2, r0
 80072e8:	460b      	mov	r3, r1
 80072ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007320 <UART_SetConfig+0x4e4>)
 80072ec:	fba3 1302 	umull	r1, r3, r3, r2
 80072f0:	095b      	lsrs	r3, r3, #5
 80072f2:	2164      	movs	r1, #100	@ 0x64
 80072f4:	fb01 f303 	mul.w	r3, r1, r3
 80072f8:	1ad3      	subs	r3, r2, r3
 80072fa:	011b      	lsls	r3, r3, #4
 80072fc:	3332      	adds	r3, #50	@ 0x32
 80072fe:	4a08      	ldr	r2, [pc, #32]	@ (8007320 <UART_SetConfig+0x4e4>)
 8007300:	fba2 2303 	umull	r2, r3, r2, r3
 8007304:	095b      	lsrs	r3, r3, #5
 8007306:	f003 020f 	and.w	r2, r3, #15
 800730a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4422      	add	r2, r4
 8007312:	609a      	str	r2, [r3, #8]
}
 8007314:	bf00      	nop
 8007316:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800731a:	46bd      	mov	sp, r7
 800731c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007320:	51eb851f 	.word	0x51eb851f

08007324 <atoi>:
 8007324:	220a      	movs	r2, #10
 8007326:	2100      	movs	r1, #0
 8007328:	f000 b89a 	b.w	8007460 <strtol>

0800732c <siprintf>:
 800732c:	b40e      	push	{r1, r2, r3}
 800732e:	b500      	push	{lr}
 8007330:	b09c      	sub	sp, #112	@ 0x70
 8007332:	ab1d      	add	r3, sp, #116	@ 0x74
 8007334:	9002      	str	r0, [sp, #8]
 8007336:	9006      	str	r0, [sp, #24]
 8007338:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800733c:	4809      	ldr	r0, [pc, #36]	@ (8007364 <siprintf+0x38>)
 800733e:	9107      	str	r1, [sp, #28]
 8007340:	9104      	str	r1, [sp, #16]
 8007342:	4909      	ldr	r1, [pc, #36]	@ (8007368 <siprintf+0x3c>)
 8007344:	f853 2b04 	ldr.w	r2, [r3], #4
 8007348:	9105      	str	r1, [sp, #20]
 800734a:	6800      	ldr	r0, [r0, #0]
 800734c:	9301      	str	r3, [sp, #4]
 800734e:	a902      	add	r1, sp, #8
 8007350:	f000 f920 	bl	8007594 <_svfiprintf_r>
 8007354:	9b02      	ldr	r3, [sp, #8]
 8007356:	2200      	movs	r2, #0
 8007358:	701a      	strb	r2, [r3, #0]
 800735a:	b01c      	add	sp, #112	@ 0x70
 800735c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007360:	b003      	add	sp, #12
 8007362:	4770      	bx	lr
 8007364:	20000018 	.word	0x20000018
 8007368:	ffff0208 	.word	0xffff0208

0800736c <_strtol_l.constprop.0>:
 800736c:	2b24      	cmp	r3, #36	@ 0x24
 800736e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007372:	4686      	mov	lr, r0
 8007374:	4690      	mov	r8, r2
 8007376:	d801      	bhi.n	800737c <_strtol_l.constprop.0+0x10>
 8007378:	2b01      	cmp	r3, #1
 800737a:	d106      	bne.n	800738a <_strtol_l.constprop.0+0x1e>
 800737c:	f000 f882 	bl	8007484 <__errno>
 8007380:	2316      	movs	r3, #22
 8007382:	6003      	str	r3, [r0, #0]
 8007384:	2000      	movs	r0, #0
 8007386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800738a:	4834      	ldr	r0, [pc, #208]	@ (800745c <_strtol_l.constprop.0+0xf0>)
 800738c:	460d      	mov	r5, r1
 800738e:	462a      	mov	r2, r5
 8007390:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007394:	5d06      	ldrb	r6, [r0, r4]
 8007396:	f016 0608 	ands.w	r6, r6, #8
 800739a:	d1f8      	bne.n	800738e <_strtol_l.constprop.0+0x22>
 800739c:	2c2d      	cmp	r4, #45	@ 0x2d
 800739e:	d12d      	bne.n	80073fc <_strtol_l.constprop.0+0x90>
 80073a0:	782c      	ldrb	r4, [r5, #0]
 80073a2:	2601      	movs	r6, #1
 80073a4:	1c95      	adds	r5, r2, #2
 80073a6:	f033 0210 	bics.w	r2, r3, #16
 80073aa:	d109      	bne.n	80073c0 <_strtol_l.constprop.0+0x54>
 80073ac:	2c30      	cmp	r4, #48	@ 0x30
 80073ae:	d12a      	bne.n	8007406 <_strtol_l.constprop.0+0x9a>
 80073b0:	782a      	ldrb	r2, [r5, #0]
 80073b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80073b6:	2a58      	cmp	r2, #88	@ 0x58
 80073b8:	d125      	bne.n	8007406 <_strtol_l.constprop.0+0x9a>
 80073ba:	786c      	ldrb	r4, [r5, #1]
 80073bc:	2310      	movs	r3, #16
 80073be:	3502      	adds	r5, #2
 80073c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80073c4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80073c8:	2200      	movs	r2, #0
 80073ca:	fbbc f9f3 	udiv	r9, ip, r3
 80073ce:	4610      	mov	r0, r2
 80073d0:	fb03 ca19 	mls	sl, r3, r9, ip
 80073d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80073d8:	2f09      	cmp	r7, #9
 80073da:	d81b      	bhi.n	8007414 <_strtol_l.constprop.0+0xa8>
 80073dc:	463c      	mov	r4, r7
 80073de:	42a3      	cmp	r3, r4
 80073e0:	dd27      	ble.n	8007432 <_strtol_l.constprop.0+0xc6>
 80073e2:	1c57      	adds	r7, r2, #1
 80073e4:	d007      	beq.n	80073f6 <_strtol_l.constprop.0+0x8a>
 80073e6:	4581      	cmp	r9, r0
 80073e8:	d320      	bcc.n	800742c <_strtol_l.constprop.0+0xc0>
 80073ea:	d101      	bne.n	80073f0 <_strtol_l.constprop.0+0x84>
 80073ec:	45a2      	cmp	sl, r4
 80073ee:	db1d      	blt.n	800742c <_strtol_l.constprop.0+0xc0>
 80073f0:	fb00 4003 	mla	r0, r0, r3, r4
 80073f4:	2201      	movs	r2, #1
 80073f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80073fa:	e7eb      	b.n	80073d4 <_strtol_l.constprop.0+0x68>
 80073fc:	2c2b      	cmp	r4, #43	@ 0x2b
 80073fe:	bf04      	itt	eq
 8007400:	782c      	ldrbeq	r4, [r5, #0]
 8007402:	1c95      	addeq	r5, r2, #2
 8007404:	e7cf      	b.n	80073a6 <_strtol_l.constprop.0+0x3a>
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1da      	bne.n	80073c0 <_strtol_l.constprop.0+0x54>
 800740a:	2c30      	cmp	r4, #48	@ 0x30
 800740c:	bf0c      	ite	eq
 800740e:	2308      	moveq	r3, #8
 8007410:	230a      	movne	r3, #10
 8007412:	e7d5      	b.n	80073c0 <_strtol_l.constprop.0+0x54>
 8007414:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007418:	2f19      	cmp	r7, #25
 800741a:	d801      	bhi.n	8007420 <_strtol_l.constprop.0+0xb4>
 800741c:	3c37      	subs	r4, #55	@ 0x37
 800741e:	e7de      	b.n	80073de <_strtol_l.constprop.0+0x72>
 8007420:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007424:	2f19      	cmp	r7, #25
 8007426:	d804      	bhi.n	8007432 <_strtol_l.constprop.0+0xc6>
 8007428:	3c57      	subs	r4, #87	@ 0x57
 800742a:	e7d8      	b.n	80073de <_strtol_l.constprop.0+0x72>
 800742c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007430:	e7e1      	b.n	80073f6 <_strtol_l.constprop.0+0x8a>
 8007432:	1c53      	adds	r3, r2, #1
 8007434:	d108      	bne.n	8007448 <_strtol_l.constprop.0+0xdc>
 8007436:	2322      	movs	r3, #34	@ 0x22
 8007438:	f8ce 3000 	str.w	r3, [lr]
 800743c:	4660      	mov	r0, ip
 800743e:	f1b8 0f00 	cmp.w	r8, #0
 8007442:	d0a0      	beq.n	8007386 <_strtol_l.constprop.0+0x1a>
 8007444:	1e69      	subs	r1, r5, #1
 8007446:	e006      	b.n	8007456 <_strtol_l.constprop.0+0xea>
 8007448:	b106      	cbz	r6, 800744c <_strtol_l.constprop.0+0xe0>
 800744a:	4240      	negs	r0, r0
 800744c:	f1b8 0f00 	cmp.w	r8, #0
 8007450:	d099      	beq.n	8007386 <_strtol_l.constprop.0+0x1a>
 8007452:	2a00      	cmp	r2, #0
 8007454:	d1f6      	bne.n	8007444 <_strtol_l.constprop.0+0xd8>
 8007456:	f8c8 1000 	str.w	r1, [r8]
 800745a:	e794      	b.n	8007386 <_strtol_l.constprop.0+0x1a>
 800745c:	08007e25 	.word	0x08007e25

08007460 <strtol>:
 8007460:	4613      	mov	r3, r2
 8007462:	460a      	mov	r2, r1
 8007464:	4601      	mov	r1, r0
 8007466:	4802      	ldr	r0, [pc, #8]	@ (8007470 <strtol+0x10>)
 8007468:	6800      	ldr	r0, [r0, #0]
 800746a:	f7ff bf7f 	b.w	800736c <_strtol_l.constprop.0>
 800746e:	bf00      	nop
 8007470:	20000018 	.word	0x20000018

08007474 <memset>:
 8007474:	4402      	add	r2, r0
 8007476:	4603      	mov	r3, r0
 8007478:	4293      	cmp	r3, r2
 800747a:	d100      	bne.n	800747e <memset+0xa>
 800747c:	4770      	bx	lr
 800747e:	f803 1b01 	strb.w	r1, [r3], #1
 8007482:	e7f9      	b.n	8007478 <memset+0x4>

08007484 <__errno>:
 8007484:	4b01      	ldr	r3, [pc, #4]	@ (800748c <__errno+0x8>)
 8007486:	6818      	ldr	r0, [r3, #0]
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	20000018 	.word	0x20000018

08007490 <__libc_init_array>:
 8007490:	b570      	push	{r4, r5, r6, lr}
 8007492:	4d0d      	ldr	r5, [pc, #52]	@ (80074c8 <__libc_init_array+0x38>)
 8007494:	4c0d      	ldr	r4, [pc, #52]	@ (80074cc <__libc_init_array+0x3c>)
 8007496:	1b64      	subs	r4, r4, r5
 8007498:	10a4      	asrs	r4, r4, #2
 800749a:	2600      	movs	r6, #0
 800749c:	42a6      	cmp	r6, r4
 800749e:	d109      	bne.n	80074b4 <__libc_init_array+0x24>
 80074a0:	4d0b      	ldr	r5, [pc, #44]	@ (80074d0 <__libc_init_array+0x40>)
 80074a2:	4c0c      	ldr	r4, [pc, #48]	@ (80074d4 <__libc_init_array+0x44>)
 80074a4:	f000 fc66 	bl	8007d74 <_init>
 80074a8:	1b64      	subs	r4, r4, r5
 80074aa:	10a4      	asrs	r4, r4, #2
 80074ac:	2600      	movs	r6, #0
 80074ae:	42a6      	cmp	r6, r4
 80074b0:	d105      	bne.n	80074be <__libc_init_array+0x2e>
 80074b2:	bd70      	pop	{r4, r5, r6, pc}
 80074b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80074b8:	4798      	blx	r3
 80074ba:	3601      	adds	r6, #1
 80074bc:	e7ee      	b.n	800749c <__libc_init_array+0xc>
 80074be:	f855 3b04 	ldr.w	r3, [r5], #4
 80074c2:	4798      	blx	r3
 80074c4:	3601      	adds	r6, #1
 80074c6:	e7f2      	b.n	80074ae <__libc_init_array+0x1e>
 80074c8:	08007f60 	.word	0x08007f60
 80074cc:	08007f60 	.word	0x08007f60
 80074d0:	08007f60 	.word	0x08007f60
 80074d4:	08007f64 	.word	0x08007f64

080074d8 <__retarget_lock_acquire_recursive>:
 80074d8:	4770      	bx	lr

080074da <__retarget_lock_release_recursive>:
 80074da:	4770      	bx	lr

080074dc <__ssputs_r>:
 80074dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074e0:	688e      	ldr	r6, [r1, #8]
 80074e2:	461f      	mov	r7, r3
 80074e4:	42be      	cmp	r6, r7
 80074e6:	680b      	ldr	r3, [r1, #0]
 80074e8:	4682      	mov	sl, r0
 80074ea:	460c      	mov	r4, r1
 80074ec:	4690      	mov	r8, r2
 80074ee:	d82d      	bhi.n	800754c <__ssputs_r+0x70>
 80074f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80074f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80074f8:	d026      	beq.n	8007548 <__ssputs_r+0x6c>
 80074fa:	6965      	ldr	r5, [r4, #20]
 80074fc:	6909      	ldr	r1, [r1, #16]
 80074fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007502:	eba3 0901 	sub.w	r9, r3, r1
 8007506:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800750a:	1c7b      	adds	r3, r7, #1
 800750c:	444b      	add	r3, r9
 800750e:	106d      	asrs	r5, r5, #1
 8007510:	429d      	cmp	r5, r3
 8007512:	bf38      	it	cc
 8007514:	461d      	movcc	r5, r3
 8007516:	0553      	lsls	r3, r2, #21
 8007518:	d527      	bpl.n	800756a <__ssputs_r+0x8e>
 800751a:	4629      	mov	r1, r5
 800751c:	f000 f958 	bl	80077d0 <_malloc_r>
 8007520:	4606      	mov	r6, r0
 8007522:	b360      	cbz	r0, 800757e <__ssputs_r+0xa2>
 8007524:	6921      	ldr	r1, [r4, #16]
 8007526:	464a      	mov	r2, r9
 8007528:	f000 fbc4 	bl	8007cb4 <memcpy>
 800752c:	89a3      	ldrh	r3, [r4, #12]
 800752e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007536:	81a3      	strh	r3, [r4, #12]
 8007538:	6126      	str	r6, [r4, #16]
 800753a:	6165      	str	r5, [r4, #20]
 800753c:	444e      	add	r6, r9
 800753e:	eba5 0509 	sub.w	r5, r5, r9
 8007542:	6026      	str	r6, [r4, #0]
 8007544:	60a5      	str	r5, [r4, #8]
 8007546:	463e      	mov	r6, r7
 8007548:	42be      	cmp	r6, r7
 800754a:	d900      	bls.n	800754e <__ssputs_r+0x72>
 800754c:	463e      	mov	r6, r7
 800754e:	6820      	ldr	r0, [r4, #0]
 8007550:	4632      	mov	r2, r6
 8007552:	4641      	mov	r1, r8
 8007554:	f000 fb84 	bl	8007c60 <memmove>
 8007558:	68a3      	ldr	r3, [r4, #8]
 800755a:	1b9b      	subs	r3, r3, r6
 800755c:	60a3      	str	r3, [r4, #8]
 800755e:	6823      	ldr	r3, [r4, #0]
 8007560:	4433      	add	r3, r6
 8007562:	6023      	str	r3, [r4, #0]
 8007564:	2000      	movs	r0, #0
 8007566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800756a:	462a      	mov	r2, r5
 800756c:	f000 fb4a 	bl	8007c04 <_realloc_r>
 8007570:	4606      	mov	r6, r0
 8007572:	2800      	cmp	r0, #0
 8007574:	d1e0      	bne.n	8007538 <__ssputs_r+0x5c>
 8007576:	6921      	ldr	r1, [r4, #16]
 8007578:	4650      	mov	r0, sl
 800757a:	f000 fba9 	bl	8007cd0 <_free_r>
 800757e:	230c      	movs	r3, #12
 8007580:	f8ca 3000 	str.w	r3, [sl]
 8007584:	89a3      	ldrh	r3, [r4, #12]
 8007586:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800758a:	81a3      	strh	r3, [r4, #12]
 800758c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007590:	e7e9      	b.n	8007566 <__ssputs_r+0x8a>
	...

08007594 <_svfiprintf_r>:
 8007594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007598:	4698      	mov	r8, r3
 800759a:	898b      	ldrh	r3, [r1, #12]
 800759c:	061b      	lsls	r3, r3, #24
 800759e:	b09d      	sub	sp, #116	@ 0x74
 80075a0:	4607      	mov	r7, r0
 80075a2:	460d      	mov	r5, r1
 80075a4:	4614      	mov	r4, r2
 80075a6:	d510      	bpl.n	80075ca <_svfiprintf_r+0x36>
 80075a8:	690b      	ldr	r3, [r1, #16]
 80075aa:	b973      	cbnz	r3, 80075ca <_svfiprintf_r+0x36>
 80075ac:	2140      	movs	r1, #64	@ 0x40
 80075ae:	f000 f90f 	bl	80077d0 <_malloc_r>
 80075b2:	6028      	str	r0, [r5, #0]
 80075b4:	6128      	str	r0, [r5, #16]
 80075b6:	b930      	cbnz	r0, 80075c6 <_svfiprintf_r+0x32>
 80075b8:	230c      	movs	r3, #12
 80075ba:	603b      	str	r3, [r7, #0]
 80075bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80075c0:	b01d      	add	sp, #116	@ 0x74
 80075c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075c6:	2340      	movs	r3, #64	@ 0x40
 80075c8:	616b      	str	r3, [r5, #20]
 80075ca:	2300      	movs	r3, #0
 80075cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80075ce:	2320      	movs	r3, #32
 80075d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80075d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80075d8:	2330      	movs	r3, #48	@ 0x30
 80075da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007778 <_svfiprintf_r+0x1e4>
 80075de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80075e2:	f04f 0901 	mov.w	r9, #1
 80075e6:	4623      	mov	r3, r4
 80075e8:	469a      	mov	sl, r3
 80075ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075ee:	b10a      	cbz	r2, 80075f4 <_svfiprintf_r+0x60>
 80075f0:	2a25      	cmp	r2, #37	@ 0x25
 80075f2:	d1f9      	bne.n	80075e8 <_svfiprintf_r+0x54>
 80075f4:	ebba 0b04 	subs.w	fp, sl, r4
 80075f8:	d00b      	beq.n	8007612 <_svfiprintf_r+0x7e>
 80075fa:	465b      	mov	r3, fp
 80075fc:	4622      	mov	r2, r4
 80075fe:	4629      	mov	r1, r5
 8007600:	4638      	mov	r0, r7
 8007602:	f7ff ff6b 	bl	80074dc <__ssputs_r>
 8007606:	3001      	adds	r0, #1
 8007608:	f000 80a7 	beq.w	800775a <_svfiprintf_r+0x1c6>
 800760c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800760e:	445a      	add	r2, fp
 8007610:	9209      	str	r2, [sp, #36]	@ 0x24
 8007612:	f89a 3000 	ldrb.w	r3, [sl]
 8007616:	2b00      	cmp	r3, #0
 8007618:	f000 809f 	beq.w	800775a <_svfiprintf_r+0x1c6>
 800761c:	2300      	movs	r3, #0
 800761e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007622:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007626:	f10a 0a01 	add.w	sl, sl, #1
 800762a:	9304      	str	r3, [sp, #16]
 800762c:	9307      	str	r3, [sp, #28]
 800762e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007632:	931a      	str	r3, [sp, #104]	@ 0x68
 8007634:	4654      	mov	r4, sl
 8007636:	2205      	movs	r2, #5
 8007638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800763c:	484e      	ldr	r0, [pc, #312]	@ (8007778 <_svfiprintf_r+0x1e4>)
 800763e:	f7f8 fdef 	bl	8000220 <memchr>
 8007642:	9a04      	ldr	r2, [sp, #16]
 8007644:	b9d8      	cbnz	r0, 800767e <_svfiprintf_r+0xea>
 8007646:	06d0      	lsls	r0, r2, #27
 8007648:	bf44      	itt	mi
 800764a:	2320      	movmi	r3, #32
 800764c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007650:	0711      	lsls	r1, r2, #28
 8007652:	bf44      	itt	mi
 8007654:	232b      	movmi	r3, #43	@ 0x2b
 8007656:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800765a:	f89a 3000 	ldrb.w	r3, [sl]
 800765e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007660:	d015      	beq.n	800768e <_svfiprintf_r+0xfa>
 8007662:	9a07      	ldr	r2, [sp, #28]
 8007664:	4654      	mov	r4, sl
 8007666:	2000      	movs	r0, #0
 8007668:	f04f 0c0a 	mov.w	ip, #10
 800766c:	4621      	mov	r1, r4
 800766e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007672:	3b30      	subs	r3, #48	@ 0x30
 8007674:	2b09      	cmp	r3, #9
 8007676:	d94b      	bls.n	8007710 <_svfiprintf_r+0x17c>
 8007678:	b1b0      	cbz	r0, 80076a8 <_svfiprintf_r+0x114>
 800767a:	9207      	str	r2, [sp, #28]
 800767c:	e014      	b.n	80076a8 <_svfiprintf_r+0x114>
 800767e:	eba0 0308 	sub.w	r3, r0, r8
 8007682:	fa09 f303 	lsl.w	r3, r9, r3
 8007686:	4313      	orrs	r3, r2
 8007688:	9304      	str	r3, [sp, #16]
 800768a:	46a2      	mov	sl, r4
 800768c:	e7d2      	b.n	8007634 <_svfiprintf_r+0xa0>
 800768e:	9b03      	ldr	r3, [sp, #12]
 8007690:	1d19      	adds	r1, r3, #4
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	9103      	str	r1, [sp, #12]
 8007696:	2b00      	cmp	r3, #0
 8007698:	bfbb      	ittet	lt
 800769a:	425b      	neglt	r3, r3
 800769c:	f042 0202 	orrlt.w	r2, r2, #2
 80076a0:	9307      	strge	r3, [sp, #28]
 80076a2:	9307      	strlt	r3, [sp, #28]
 80076a4:	bfb8      	it	lt
 80076a6:	9204      	strlt	r2, [sp, #16]
 80076a8:	7823      	ldrb	r3, [r4, #0]
 80076aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80076ac:	d10a      	bne.n	80076c4 <_svfiprintf_r+0x130>
 80076ae:	7863      	ldrb	r3, [r4, #1]
 80076b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80076b2:	d132      	bne.n	800771a <_svfiprintf_r+0x186>
 80076b4:	9b03      	ldr	r3, [sp, #12]
 80076b6:	1d1a      	adds	r2, r3, #4
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	9203      	str	r2, [sp, #12]
 80076bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80076c0:	3402      	adds	r4, #2
 80076c2:	9305      	str	r3, [sp, #20]
 80076c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007788 <_svfiprintf_r+0x1f4>
 80076c8:	7821      	ldrb	r1, [r4, #0]
 80076ca:	2203      	movs	r2, #3
 80076cc:	4650      	mov	r0, sl
 80076ce:	f7f8 fda7 	bl	8000220 <memchr>
 80076d2:	b138      	cbz	r0, 80076e4 <_svfiprintf_r+0x150>
 80076d4:	9b04      	ldr	r3, [sp, #16]
 80076d6:	eba0 000a 	sub.w	r0, r0, sl
 80076da:	2240      	movs	r2, #64	@ 0x40
 80076dc:	4082      	lsls	r2, r0
 80076de:	4313      	orrs	r3, r2
 80076e0:	3401      	adds	r4, #1
 80076e2:	9304      	str	r3, [sp, #16]
 80076e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076e8:	4824      	ldr	r0, [pc, #144]	@ (800777c <_svfiprintf_r+0x1e8>)
 80076ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80076ee:	2206      	movs	r2, #6
 80076f0:	f7f8 fd96 	bl	8000220 <memchr>
 80076f4:	2800      	cmp	r0, #0
 80076f6:	d036      	beq.n	8007766 <_svfiprintf_r+0x1d2>
 80076f8:	4b21      	ldr	r3, [pc, #132]	@ (8007780 <_svfiprintf_r+0x1ec>)
 80076fa:	bb1b      	cbnz	r3, 8007744 <_svfiprintf_r+0x1b0>
 80076fc:	9b03      	ldr	r3, [sp, #12]
 80076fe:	3307      	adds	r3, #7
 8007700:	f023 0307 	bic.w	r3, r3, #7
 8007704:	3308      	adds	r3, #8
 8007706:	9303      	str	r3, [sp, #12]
 8007708:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800770a:	4433      	add	r3, r6
 800770c:	9309      	str	r3, [sp, #36]	@ 0x24
 800770e:	e76a      	b.n	80075e6 <_svfiprintf_r+0x52>
 8007710:	fb0c 3202 	mla	r2, ip, r2, r3
 8007714:	460c      	mov	r4, r1
 8007716:	2001      	movs	r0, #1
 8007718:	e7a8      	b.n	800766c <_svfiprintf_r+0xd8>
 800771a:	2300      	movs	r3, #0
 800771c:	3401      	adds	r4, #1
 800771e:	9305      	str	r3, [sp, #20]
 8007720:	4619      	mov	r1, r3
 8007722:	f04f 0c0a 	mov.w	ip, #10
 8007726:	4620      	mov	r0, r4
 8007728:	f810 2b01 	ldrb.w	r2, [r0], #1
 800772c:	3a30      	subs	r2, #48	@ 0x30
 800772e:	2a09      	cmp	r2, #9
 8007730:	d903      	bls.n	800773a <_svfiprintf_r+0x1a6>
 8007732:	2b00      	cmp	r3, #0
 8007734:	d0c6      	beq.n	80076c4 <_svfiprintf_r+0x130>
 8007736:	9105      	str	r1, [sp, #20]
 8007738:	e7c4      	b.n	80076c4 <_svfiprintf_r+0x130>
 800773a:	fb0c 2101 	mla	r1, ip, r1, r2
 800773e:	4604      	mov	r4, r0
 8007740:	2301      	movs	r3, #1
 8007742:	e7f0      	b.n	8007726 <_svfiprintf_r+0x192>
 8007744:	ab03      	add	r3, sp, #12
 8007746:	9300      	str	r3, [sp, #0]
 8007748:	462a      	mov	r2, r5
 800774a:	4b0e      	ldr	r3, [pc, #56]	@ (8007784 <_svfiprintf_r+0x1f0>)
 800774c:	a904      	add	r1, sp, #16
 800774e:	4638      	mov	r0, r7
 8007750:	f3af 8000 	nop.w
 8007754:	1c42      	adds	r2, r0, #1
 8007756:	4606      	mov	r6, r0
 8007758:	d1d6      	bne.n	8007708 <_svfiprintf_r+0x174>
 800775a:	89ab      	ldrh	r3, [r5, #12]
 800775c:	065b      	lsls	r3, r3, #25
 800775e:	f53f af2d 	bmi.w	80075bc <_svfiprintf_r+0x28>
 8007762:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007764:	e72c      	b.n	80075c0 <_svfiprintf_r+0x2c>
 8007766:	ab03      	add	r3, sp, #12
 8007768:	9300      	str	r3, [sp, #0]
 800776a:	462a      	mov	r2, r5
 800776c:	4b05      	ldr	r3, [pc, #20]	@ (8007784 <_svfiprintf_r+0x1f0>)
 800776e:	a904      	add	r1, sp, #16
 8007770:	4638      	mov	r0, r7
 8007772:	f000 f91b 	bl	80079ac <_printf_i>
 8007776:	e7ed      	b.n	8007754 <_svfiprintf_r+0x1c0>
 8007778:	08007f25 	.word	0x08007f25
 800777c:	08007f2f 	.word	0x08007f2f
 8007780:	00000000 	.word	0x00000000
 8007784:	080074dd 	.word	0x080074dd
 8007788:	08007f2b 	.word	0x08007f2b

0800778c <sbrk_aligned>:
 800778c:	b570      	push	{r4, r5, r6, lr}
 800778e:	4e0f      	ldr	r6, [pc, #60]	@ (80077cc <sbrk_aligned+0x40>)
 8007790:	460c      	mov	r4, r1
 8007792:	6831      	ldr	r1, [r6, #0]
 8007794:	4605      	mov	r5, r0
 8007796:	b911      	cbnz	r1, 800779e <sbrk_aligned+0x12>
 8007798:	f000 fa7c 	bl	8007c94 <_sbrk_r>
 800779c:	6030      	str	r0, [r6, #0]
 800779e:	4621      	mov	r1, r4
 80077a0:	4628      	mov	r0, r5
 80077a2:	f000 fa77 	bl	8007c94 <_sbrk_r>
 80077a6:	1c43      	adds	r3, r0, #1
 80077a8:	d103      	bne.n	80077b2 <sbrk_aligned+0x26>
 80077aa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80077ae:	4620      	mov	r0, r4
 80077b0:	bd70      	pop	{r4, r5, r6, pc}
 80077b2:	1cc4      	adds	r4, r0, #3
 80077b4:	f024 0403 	bic.w	r4, r4, #3
 80077b8:	42a0      	cmp	r0, r4
 80077ba:	d0f8      	beq.n	80077ae <sbrk_aligned+0x22>
 80077bc:	1a21      	subs	r1, r4, r0
 80077be:	4628      	mov	r0, r5
 80077c0:	f000 fa68 	bl	8007c94 <_sbrk_r>
 80077c4:	3001      	adds	r0, #1
 80077c6:	d1f2      	bne.n	80077ae <sbrk_aligned+0x22>
 80077c8:	e7ef      	b.n	80077aa <sbrk_aligned+0x1e>
 80077ca:	bf00      	nop
 80077cc:	200004c0 	.word	0x200004c0

080077d0 <_malloc_r>:
 80077d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077d4:	1ccd      	adds	r5, r1, #3
 80077d6:	f025 0503 	bic.w	r5, r5, #3
 80077da:	3508      	adds	r5, #8
 80077dc:	2d0c      	cmp	r5, #12
 80077de:	bf38      	it	cc
 80077e0:	250c      	movcc	r5, #12
 80077e2:	2d00      	cmp	r5, #0
 80077e4:	4606      	mov	r6, r0
 80077e6:	db01      	blt.n	80077ec <_malloc_r+0x1c>
 80077e8:	42a9      	cmp	r1, r5
 80077ea:	d904      	bls.n	80077f6 <_malloc_r+0x26>
 80077ec:	230c      	movs	r3, #12
 80077ee:	6033      	str	r3, [r6, #0]
 80077f0:	2000      	movs	r0, #0
 80077f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80078cc <_malloc_r+0xfc>
 80077fa:	f000 f9f7 	bl	8007bec <__malloc_lock>
 80077fe:	f8d8 3000 	ldr.w	r3, [r8]
 8007802:	461c      	mov	r4, r3
 8007804:	bb44      	cbnz	r4, 8007858 <_malloc_r+0x88>
 8007806:	4629      	mov	r1, r5
 8007808:	4630      	mov	r0, r6
 800780a:	f7ff ffbf 	bl	800778c <sbrk_aligned>
 800780e:	1c43      	adds	r3, r0, #1
 8007810:	4604      	mov	r4, r0
 8007812:	d158      	bne.n	80078c6 <_malloc_r+0xf6>
 8007814:	f8d8 4000 	ldr.w	r4, [r8]
 8007818:	4627      	mov	r7, r4
 800781a:	2f00      	cmp	r7, #0
 800781c:	d143      	bne.n	80078a6 <_malloc_r+0xd6>
 800781e:	2c00      	cmp	r4, #0
 8007820:	d04b      	beq.n	80078ba <_malloc_r+0xea>
 8007822:	6823      	ldr	r3, [r4, #0]
 8007824:	4639      	mov	r1, r7
 8007826:	4630      	mov	r0, r6
 8007828:	eb04 0903 	add.w	r9, r4, r3
 800782c:	f000 fa32 	bl	8007c94 <_sbrk_r>
 8007830:	4581      	cmp	r9, r0
 8007832:	d142      	bne.n	80078ba <_malloc_r+0xea>
 8007834:	6821      	ldr	r1, [r4, #0]
 8007836:	1a6d      	subs	r5, r5, r1
 8007838:	4629      	mov	r1, r5
 800783a:	4630      	mov	r0, r6
 800783c:	f7ff ffa6 	bl	800778c <sbrk_aligned>
 8007840:	3001      	adds	r0, #1
 8007842:	d03a      	beq.n	80078ba <_malloc_r+0xea>
 8007844:	6823      	ldr	r3, [r4, #0]
 8007846:	442b      	add	r3, r5
 8007848:	6023      	str	r3, [r4, #0]
 800784a:	f8d8 3000 	ldr.w	r3, [r8]
 800784e:	685a      	ldr	r2, [r3, #4]
 8007850:	bb62      	cbnz	r2, 80078ac <_malloc_r+0xdc>
 8007852:	f8c8 7000 	str.w	r7, [r8]
 8007856:	e00f      	b.n	8007878 <_malloc_r+0xa8>
 8007858:	6822      	ldr	r2, [r4, #0]
 800785a:	1b52      	subs	r2, r2, r5
 800785c:	d420      	bmi.n	80078a0 <_malloc_r+0xd0>
 800785e:	2a0b      	cmp	r2, #11
 8007860:	d917      	bls.n	8007892 <_malloc_r+0xc2>
 8007862:	1961      	adds	r1, r4, r5
 8007864:	42a3      	cmp	r3, r4
 8007866:	6025      	str	r5, [r4, #0]
 8007868:	bf18      	it	ne
 800786a:	6059      	strne	r1, [r3, #4]
 800786c:	6863      	ldr	r3, [r4, #4]
 800786e:	bf08      	it	eq
 8007870:	f8c8 1000 	streq.w	r1, [r8]
 8007874:	5162      	str	r2, [r4, r5]
 8007876:	604b      	str	r3, [r1, #4]
 8007878:	4630      	mov	r0, r6
 800787a:	f000 f9bd 	bl	8007bf8 <__malloc_unlock>
 800787e:	f104 000b 	add.w	r0, r4, #11
 8007882:	1d23      	adds	r3, r4, #4
 8007884:	f020 0007 	bic.w	r0, r0, #7
 8007888:	1ac2      	subs	r2, r0, r3
 800788a:	bf1c      	itt	ne
 800788c:	1a1b      	subne	r3, r3, r0
 800788e:	50a3      	strne	r3, [r4, r2]
 8007890:	e7af      	b.n	80077f2 <_malloc_r+0x22>
 8007892:	6862      	ldr	r2, [r4, #4]
 8007894:	42a3      	cmp	r3, r4
 8007896:	bf0c      	ite	eq
 8007898:	f8c8 2000 	streq.w	r2, [r8]
 800789c:	605a      	strne	r2, [r3, #4]
 800789e:	e7eb      	b.n	8007878 <_malloc_r+0xa8>
 80078a0:	4623      	mov	r3, r4
 80078a2:	6864      	ldr	r4, [r4, #4]
 80078a4:	e7ae      	b.n	8007804 <_malloc_r+0x34>
 80078a6:	463c      	mov	r4, r7
 80078a8:	687f      	ldr	r7, [r7, #4]
 80078aa:	e7b6      	b.n	800781a <_malloc_r+0x4a>
 80078ac:	461a      	mov	r2, r3
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	42a3      	cmp	r3, r4
 80078b2:	d1fb      	bne.n	80078ac <_malloc_r+0xdc>
 80078b4:	2300      	movs	r3, #0
 80078b6:	6053      	str	r3, [r2, #4]
 80078b8:	e7de      	b.n	8007878 <_malloc_r+0xa8>
 80078ba:	230c      	movs	r3, #12
 80078bc:	6033      	str	r3, [r6, #0]
 80078be:	4630      	mov	r0, r6
 80078c0:	f000 f99a 	bl	8007bf8 <__malloc_unlock>
 80078c4:	e794      	b.n	80077f0 <_malloc_r+0x20>
 80078c6:	6005      	str	r5, [r0, #0]
 80078c8:	e7d6      	b.n	8007878 <_malloc_r+0xa8>
 80078ca:	bf00      	nop
 80078cc:	200004c4 	.word	0x200004c4

080078d0 <_printf_common>:
 80078d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078d4:	4616      	mov	r6, r2
 80078d6:	4698      	mov	r8, r3
 80078d8:	688a      	ldr	r2, [r1, #8]
 80078da:	690b      	ldr	r3, [r1, #16]
 80078dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80078e0:	4293      	cmp	r3, r2
 80078e2:	bfb8      	it	lt
 80078e4:	4613      	movlt	r3, r2
 80078e6:	6033      	str	r3, [r6, #0]
 80078e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80078ec:	4607      	mov	r7, r0
 80078ee:	460c      	mov	r4, r1
 80078f0:	b10a      	cbz	r2, 80078f6 <_printf_common+0x26>
 80078f2:	3301      	adds	r3, #1
 80078f4:	6033      	str	r3, [r6, #0]
 80078f6:	6823      	ldr	r3, [r4, #0]
 80078f8:	0699      	lsls	r1, r3, #26
 80078fa:	bf42      	ittt	mi
 80078fc:	6833      	ldrmi	r3, [r6, #0]
 80078fe:	3302      	addmi	r3, #2
 8007900:	6033      	strmi	r3, [r6, #0]
 8007902:	6825      	ldr	r5, [r4, #0]
 8007904:	f015 0506 	ands.w	r5, r5, #6
 8007908:	d106      	bne.n	8007918 <_printf_common+0x48>
 800790a:	f104 0a19 	add.w	sl, r4, #25
 800790e:	68e3      	ldr	r3, [r4, #12]
 8007910:	6832      	ldr	r2, [r6, #0]
 8007912:	1a9b      	subs	r3, r3, r2
 8007914:	42ab      	cmp	r3, r5
 8007916:	dc26      	bgt.n	8007966 <_printf_common+0x96>
 8007918:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800791c:	6822      	ldr	r2, [r4, #0]
 800791e:	3b00      	subs	r3, #0
 8007920:	bf18      	it	ne
 8007922:	2301      	movne	r3, #1
 8007924:	0692      	lsls	r2, r2, #26
 8007926:	d42b      	bmi.n	8007980 <_printf_common+0xb0>
 8007928:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800792c:	4641      	mov	r1, r8
 800792e:	4638      	mov	r0, r7
 8007930:	47c8      	blx	r9
 8007932:	3001      	adds	r0, #1
 8007934:	d01e      	beq.n	8007974 <_printf_common+0xa4>
 8007936:	6823      	ldr	r3, [r4, #0]
 8007938:	6922      	ldr	r2, [r4, #16]
 800793a:	f003 0306 	and.w	r3, r3, #6
 800793e:	2b04      	cmp	r3, #4
 8007940:	bf02      	ittt	eq
 8007942:	68e5      	ldreq	r5, [r4, #12]
 8007944:	6833      	ldreq	r3, [r6, #0]
 8007946:	1aed      	subeq	r5, r5, r3
 8007948:	68a3      	ldr	r3, [r4, #8]
 800794a:	bf0c      	ite	eq
 800794c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007950:	2500      	movne	r5, #0
 8007952:	4293      	cmp	r3, r2
 8007954:	bfc4      	itt	gt
 8007956:	1a9b      	subgt	r3, r3, r2
 8007958:	18ed      	addgt	r5, r5, r3
 800795a:	2600      	movs	r6, #0
 800795c:	341a      	adds	r4, #26
 800795e:	42b5      	cmp	r5, r6
 8007960:	d11a      	bne.n	8007998 <_printf_common+0xc8>
 8007962:	2000      	movs	r0, #0
 8007964:	e008      	b.n	8007978 <_printf_common+0xa8>
 8007966:	2301      	movs	r3, #1
 8007968:	4652      	mov	r2, sl
 800796a:	4641      	mov	r1, r8
 800796c:	4638      	mov	r0, r7
 800796e:	47c8      	blx	r9
 8007970:	3001      	adds	r0, #1
 8007972:	d103      	bne.n	800797c <_printf_common+0xac>
 8007974:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800797c:	3501      	adds	r5, #1
 800797e:	e7c6      	b.n	800790e <_printf_common+0x3e>
 8007980:	18e1      	adds	r1, r4, r3
 8007982:	1c5a      	adds	r2, r3, #1
 8007984:	2030      	movs	r0, #48	@ 0x30
 8007986:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800798a:	4422      	add	r2, r4
 800798c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007990:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007994:	3302      	adds	r3, #2
 8007996:	e7c7      	b.n	8007928 <_printf_common+0x58>
 8007998:	2301      	movs	r3, #1
 800799a:	4622      	mov	r2, r4
 800799c:	4641      	mov	r1, r8
 800799e:	4638      	mov	r0, r7
 80079a0:	47c8      	blx	r9
 80079a2:	3001      	adds	r0, #1
 80079a4:	d0e6      	beq.n	8007974 <_printf_common+0xa4>
 80079a6:	3601      	adds	r6, #1
 80079a8:	e7d9      	b.n	800795e <_printf_common+0x8e>
	...

080079ac <_printf_i>:
 80079ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079b0:	7e0f      	ldrb	r7, [r1, #24]
 80079b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80079b4:	2f78      	cmp	r7, #120	@ 0x78
 80079b6:	4691      	mov	r9, r2
 80079b8:	4680      	mov	r8, r0
 80079ba:	460c      	mov	r4, r1
 80079bc:	469a      	mov	sl, r3
 80079be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80079c2:	d807      	bhi.n	80079d4 <_printf_i+0x28>
 80079c4:	2f62      	cmp	r7, #98	@ 0x62
 80079c6:	d80a      	bhi.n	80079de <_printf_i+0x32>
 80079c8:	2f00      	cmp	r7, #0
 80079ca:	f000 80d2 	beq.w	8007b72 <_printf_i+0x1c6>
 80079ce:	2f58      	cmp	r7, #88	@ 0x58
 80079d0:	f000 80b9 	beq.w	8007b46 <_printf_i+0x19a>
 80079d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80079dc:	e03a      	b.n	8007a54 <_printf_i+0xa8>
 80079de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80079e2:	2b15      	cmp	r3, #21
 80079e4:	d8f6      	bhi.n	80079d4 <_printf_i+0x28>
 80079e6:	a101      	add	r1, pc, #4	@ (adr r1, 80079ec <_printf_i+0x40>)
 80079e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079ec:	08007a45 	.word	0x08007a45
 80079f0:	08007a59 	.word	0x08007a59
 80079f4:	080079d5 	.word	0x080079d5
 80079f8:	080079d5 	.word	0x080079d5
 80079fc:	080079d5 	.word	0x080079d5
 8007a00:	080079d5 	.word	0x080079d5
 8007a04:	08007a59 	.word	0x08007a59
 8007a08:	080079d5 	.word	0x080079d5
 8007a0c:	080079d5 	.word	0x080079d5
 8007a10:	080079d5 	.word	0x080079d5
 8007a14:	080079d5 	.word	0x080079d5
 8007a18:	08007b59 	.word	0x08007b59
 8007a1c:	08007a83 	.word	0x08007a83
 8007a20:	08007b13 	.word	0x08007b13
 8007a24:	080079d5 	.word	0x080079d5
 8007a28:	080079d5 	.word	0x080079d5
 8007a2c:	08007b7b 	.word	0x08007b7b
 8007a30:	080079d5 	.word	0x080079d5
 8007a34:	08007a83 	.word	0x08007a83
 8007a38:	080079d5 	.word	0x080079d5
 8007a3c:	080079d5 	.word	0x080079d5
 8007a40:	08007b1b 	.word	0x08007b1b
 8007a44:	6833      	ldr	r3, [r6, #0]
 8007a46:	1d1a      	adds	r2, r3, #4
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	6032      	str	r2, [r6, #0]
 8007a4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007a54:	2301      	movs	r3, #1
 8007a56:	e09d      	b.n	8007b94 <_printf_i+0x1e8>
 8007a58:	6833      	ldr	r3, [r6, #0]
 8007a5a:	6820      	ldr	r0, [r4, #0]
 8007a5c:	1d19      	adds	r1, r3, #4
 8007a5e:	6031      	str	r1, [r6, #0]
 8007a60:	0606      	lsls	r6, r0, #24
 8007a62:	d501      	bpl.n	8007a68 <_printf_i+0xbc>
 8007a64:	681d      	ldr	r5, [r3, #0]
 8007a66:	e003      	b.n	8007a70 <_printf_i+0xc4>
 8007a68:	0645      	lsls	r5, r0, #25
 8007a6a:	d5fb      	bpl.n	8007a64 <_printf_i+0xb8>
 8007a6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007a70:	2d00      	cmp	r5, #0
 8007a72:	da03      	bge.n	8007a7c <_printf_i+0xd0>
 8007a74:	232d      	movs	r3, #45	@ 0x2d
 8007a76:	426d      	negs	r5, r5
 8007a78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a7c:	4859      	ldr	r0, [pc, #356]	@ (8007be4 <_printf_i+0x238>)
 8007a7e:	230a      	movs	r3, #10
 8007a80:	e011      	b.n	8007aa6 <_printf_i+0xfa>
 8007a82:	6821      	ldr	r1, [r4, #0]
 8007a84:	6833      	ldr	r3, [r6, #0]
 8007a86:	0608      	lsls	r0, r1, #24
 8007a88:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a8c:	d402      	bmi.n	8007a94 <_printf_i+0xe8>
 8007a8e:	0649      	lsls	r1, r1, #25
 8007a90:	bf48      	it	mi
 8007a92:	b2ad      	uxthmi	r5, r5
 8007a94:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a96:	4853      	ldr	r0, [pc, #332]	@ (8007be4 <_printf_i+0x238>)
 8007a98:	6033      	str	r3, [r6, #0]
 8007a9a:	bf14      	ite	ne
 8007a9c:	230a      	movne	r3, #10
 8007a9e:	2308      	moveq	r3, #8
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007aa6:	6866      	ldr	r6, [r4, #4]
 8007aa8:	60a6      	str	r6, [r4, #8]
 8007aaa:	2e00      	cmp	r6, #0
 8007aac:	bfa2      	ittt	ge
 8007aae:	6821      	ldrge	r1, [r4, #0]
 8007ab0:	f021 0104 	bicge.w	r1, r1, #4
 8007ab4:	6021      	strge	r1, [r4, #0]
 8007ab6:	b90d      	cbnz	r5, 8007abc <_printf_i+0x110>
 8007ab8:	2e00      	cmp	r6, #0
 8007aba:	d04b      	beq.n	8007b54 <_printf_i+0x1a8>
 8007abc:	4616      	mov	r6, r2
 8007abe:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ac2:	fb03 5711 	mls	r7, r3, r1, r5
 8007ac6:	5dc7      	ldrb	r7, [r0, r7]
 8007ac8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007acc:	462f      	mov	r7, r5
 8007ace:	42bb      	cmp	r3, r7
 8007ad0:	460d      	mov	r5, r1
 8007ad2:	d9f4      	bls.n	8007abe <_printf_i+0x112>
 8007ad4:	2b08      	cmp	r3, #8
 8007ad6:	d10b      	bne.n	8007af0 <_printf_i+0x144>
 8007ad8:	6823      	ldr	r3, [r4, #0]
 8007ada:	07df      	lsls	r7, r3, #31
 8007adc:	d508      	bpl.n	8007af0 <_printf_i+0x144>
 8007ade:	6923      	ldr	r3, [r4, #16]
 8007ae0:	6861      	ldr	r1, [r4, #4]
 8007ae2:	4299      	cmp	r1, r3
 8007ae4:	bfde      	ittt	le
 8007ae6:	2330      	movle	r3, #48	@ 0x30
 8007ae8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007aec:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007af0:	1b92      	subs	r2, r2, r6
 8007af2:	6122      	str	r2, [r4, #16]
 8007af4:	f8cd a000 	str.w	sl, [sp]
 8007af8:	464b      	mov	r3, r9
 8007afa:	aa03      	add	r2, sp, #12
 8007afc:	4621      	mov	r1, r4
 8007afe:	4640      	mov	r0, r8
 8007b00:	f7ff fee6 	bl	80078d0 <_printf_common>
 8007b04:	3001      	adds	r0, #1
 8007b06:	d14a      	bne.n	8007b9e <_printf_i+0x1f2>
 8007b08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b0c:	b004      	add	sp, #16
 8007b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b12:	6823      	ldr	r3, [r4, #0]
 8007b14:	f043 0320 	orr.w	r3, r3, #32
 8007b18:	6023      	str	r3, [r4, #0]
 8007b1a:	4833      	ldr	r0, [pc, #204]	@ (8007be8 <_printf_i+0x23c>)
 8007b1c:	2778      	movs	r7, #120	@ 0x78
 8007b1e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007b22:	6823      	ldr	r3, [r4, #0]
 8007b24:	6831      	ldr	r1, [r6, #0]
 8007b26:	061f      	lsls	r7, r3, #24
 8007b28:	f851 5b04 	ldr.w	r5, [r1], #4
 8007b2c:	d402      	bmi.n	8007b34 <_printf_i+0x188>
 8007b2e:	065f      	lsls	r7, r3, #25
 8007b30:	bf48      	it	mi
 8007b32:	b2ad      	uxthmi	r5, r5
 8007b34:	6031      	str	r1, [r6, #0]
 8007b36:	07d9      	lsls	r1, r3, #31
 8007b38:	bf44      	itt	mi
 8007b3a:	f043 0320 	orrmi.w	r3, r3, #32
 8007b3e:	6023      	strmi	r3, [r4, #0]
 8007b40:	b11d      	cbz	r5, 8007b4a <_printf_i+0x19e>
 8007b42:	2310      	movs	r3, #16
 8007b44:	e7ac      	b.n	8007aa0 <_printf_i+0xf4>
 8007b46:	4827      	ldr	r0, [pc, #156]	@ (8007be4 <_printf_i+0x238>)
 8007b48:	e7e9      	b.n	8007b1e <_printf_i+0x172>
 8007b4a:	6823      	ldr	r3, [r4, #0]
 8007b4c:	f023 0320 	bic.w	r3, r3, #32
 8007b50:	6023      	str	r3, [r4, #0]
 8007b52:	e7f6      	b.n	8007b42 <_printf_i+0x196>
 8007b54:	4616      	mov	r6, r2
 8007b56:	e7bd      	b.n	8007ad4 <_printf_i+0x128>
 8007b58:	6833      	ldr	r3, [r6, #0]
 8007b5a:	6825      	ldr	r5, [r4, #0]
 8007b5c:	6961      	ldr	r1, [r4, #20]
 8007b5e:	1d18      	adds	r0, r3, #4
 8007b60:	6030      	str	r0, [r6, #0]
 8007b62:	062e      	lsls	r6, r5, #24
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	d501      	bpl.n	8007b6c <_printf_i+0x1c0>
 8007b68:	6019      	str	r1, [r3, #0]
 8007b6a:	e002      	b.n	8007b72 <_printf_i+0x1c6>
 8007b6c:	0668      	lsls	r0, r5, #25
 8007b6e:	d5fb      	bpl.n	8007b68 <_printf_i+0x1bc>
 8007b70:	8019      	strh	r1, [r3, #0]
 8007b72:	2300      	movs	r3, #0
 8007b74:	6123      	str	r3, [r4, #16]
 8007b76:	4616      	mov	r6, r2
 8007b78:	e7bc      	b.n	8007af4 <_printf_i+0x148>
 8007b7a:	6833      	ldr	r3, [r6, #0]
 8007b7c:	1d1a      	adds	r2, r3, #4
 8007b7e:	6032      	str	r2, [r6, #0]
 8007b80:	681e      	ldr	r6, [r3, #0]
 8007b82:	6862      	ldr	r2, [r4, #4]
 8007b84:	2100      	movs	r1, #0
 8007b86:	4630      	mov	r0, r6
 8007b88:	f7f8 fb4a 	bl	8000220 <memchr>
 8007b8c:	b108      	cbz	r0, 8007b92 <_printf_i+0x1e6>
 8007b8e:	1b80      	subs	r0, r0, r6
 8007b90:	6060      	str	r0, [r4, #4]
 8007b92:	6863      	ldr	r3, [r4, #4]
 8007b94:	6123      	str	r3, [r4, #16]
 8007b96:	2300      	movs	r3, #0
 8007b98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b9c:	e7aa      	b.n	8007af4 <_printf_i+0x148>
 8007b9e:	6923      	ldr	r3, [r4, #16]
 8007ba0:	4632      	mov	r2, r6
 8007ba2:	4649      	mov	r1, r9
 8007ba4:	4640      	mov	r0, r8
 8007ba6:	47d0      	blx	sl
 8007ba8:	3001      	adds	r0, #1
 8007baa:	d0ad      	beq.n	8007b08 <_printf_i+0x15c>
 8007bac:	6823      	ldr	r3, [r4, #0]
 8007bae:	079b      	lsls	r3, r3, #30
 8007bb0:	d413      	bmi.n	8007bda <_printf_i+0x22e>
 8007bb2:	68e0      	ldr	r0, [r4, #12]
 8007bb4:	9b03      	ldr	r3, [sp, #12]
 8007bb6:	4298      	cmp	r0, r3
 8007bb8:	bfb8      	it	lt
 8007bba:	4618      	movlt	r0, r3
 8007bbc:	e7a6      	b.n	8007b0c <_printf_i+0x160>
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	4632      	mov	r2, r6
 8007bc2:	4649      	mov	r1, r9
 8007bc4:	4640      	mov	r0, r8
 8007bc6:	47d0      	blx	sl
 8007bc8:	3001      	adds	r0, #1
 8007bca:	d09d      	beq.n	8007b08 <_printf_i+0x15c>
 8007bcc:	3501      	adds	r5, #1
 8007bce:	68e3      	ldr	r3, [r4, #12]
 8007bd0:	9903      	ldr	r1, [sp, #12]
 8007bd2:	1a5b      	subs	r3, r3, r1
 8007bd4:	42ab      	cmp	r3, r5
 8007bd6:	dcf2      	bgt.n	8007bbe <_printf_i+0x212>
 8007bd8:	e7eb      	b.n	8007bb2 <_printf_i+0x206>
 8007bda:	2500      	movs	r5, #0
 8007bdc:	f104 0619 	add.w	r6, r4, #25
 8007be0:	e7f5      	b.n	8007bce <_printf_i+0x222>
 8007be2:	bf00      	nop
 8007be4:	08007f36 	.word	0x08007f36
 8007be8:	08007f47 	.word	0x08007f47

08007bec <__malloc_lock>:
 8007bec:	4801      	ldr	r0, [pc, #4]	@ (8007bf4 <__malloc_lock+0x8>)
 8007bee:	f7ff bc73 	b.w	80074d8 <__retarget_lock_acquire_recursive>
 8007bf2:	bf00      	nop
 8007bf4:	200004bc 	.word	0x200004bc

08007bf8 <__malloc_unlock>:
 8007bf8:	4801      	ldr	r0, [pc, #4]	@ (8007c00 <__malloc_unlock+0x8>)
 8007bfa:	f7ff bc6e 	b.w	80074da <__retarget_lock_release_recursive>
 8007bfe:	bf00      	nop
 8007c00:	200004bc 	.word	0x200004bc

08007c04 <_realloc_r>:
 8007c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c08:	4680      	mov	r8, r0
 8007c0a:	4615      	mov	r5, r2
 8007c0c:	460c      	mov	r4, r1
 8007c0e:	b921      	cbnz	r1, 8007c1a <_realloc_r+0x16>
 8007c10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c14:	4611      	mov	r1, r2
 8007c16:	f7ff bddb 	b.w	80077d0 <_malloc_r>
 8007c1a:	b92a      	cbnz	r2, 8007c28 <_realloc_r+0x24>
 8007c1c:	f000 f858 	bl	8007cd0 <_free_r>
 8007c20:	2400      	movs	r4, #0
 8007c22:	4620      	mov	r0, r4
 8007c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c28:	f000 f89c 	bl	8007d64 <_malloc_usable_size_r>
 8007c2c:	4285      	cmp	r5, r0
 8007c2e:	4606      	mov	r6, r0
 8007c30:	d802      	bhi.n	8007c38 <_realloc_r+0x34>
 8007c32:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007c36:	d8f4      	bhi.n	8007c22 <_realloc_r+0x1e>
 8007c38:	4629      	mov	r1, r5
 8007c3a:	4640      	mov	r0, r8
 8007c3c:	f7ff fdc8 	bl	80077d0 <_malloc_r>
 8007c40:	4607      	mov	r7, r0
 8007c42:	2800      	cmp	r0, #0
 8007c44:	d0ec      	beq.n	8007c20 <_realloc_r+0x1c>
 8007c46:	42b5      	cmp	r5, r6
 8007c48:	462a      	mov	r2, r5
 8007c4a:	4621      	mov	r1, r4
 8007c4c:	bf28      	it	cs
 8007c4e:	4632      	movcs	r2, r6
 8007c50:	f000 f830 	bl	8007cb4 <memcpy>
 8007c54:	4621      	mov	r1, r4
 8007c56:	4640      	mov	r0, r8
 8007c58:	f000 f83a 	bl	8007cd0 <_free_r>
 8007c5c:	463c      	mov	r4, r7
 8007c5e:	e7e0      	b.n	8007c22 <_realloc_r+0x1e>

08007c60 <memmove>:
 8007c60:	4288      	cmp	r0, r1
 8007c62:	b510      	push	{r4, lr}
 8007c64:	eb01 0402 	add.w	r4, r1, r2
 8007c68:	d902      	bls.n	8007c70 <memmove+0x10>
 8007c6a:	4284      	cmp	r4, r0
 8007c6c:	4623      	mov	r3, r4
 8007c6e:	d807      	bhi.n	8007c80 <memmove+0x20>
 8007c70:	1e43      	subs	r3, r0, #1
 8007c72:	42a1      	cmp	r1, r4
 8007c74:	d008      	beq.n	8007c88 <memmove+0x28>
 8007c76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c7e:	e7f8      	b.n	8007c72 <memmove+0x12>
 8007c80:	4402      	add	r2, r0
 8007c82:	4601      	mov	r1, r0
 8007c84:	428a      	cmp	r2, r1
 8007c86:	d100      	bne.n	8007c8a <memmove+0x2a>
 8007c88:	bd10      	pop	{r4, pc}
 8007c8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c92:	e7f7      	b.n	8007c84 <memmove+0x24>

08007c94 <_sbrk_r>:
 8007c94:	b538      	push	{r3, r4, r5, lr}
 8007c96:	4d06      	ldr	r5, [pc, #24]	@ (8007cb0 <_sbrk_r+0x1c>)
 8007c98:	2300      	movs	r3, #0
 8007c9a:	4604      	mov	r4, r0
 8007c9c:	4608      	mov	r0, r1
 8007c9e:	602b      	str	r3, [r5, #0]
 8007ca0:	f7f9 fbe4 	bl	800146c <_sbrk>
 8007ca4:	1c43      	adds	r3, r0, #1
 8007ca6:	d102      	bne.n	8007cae <_sbrk_r+0x1a>
 8007ca8:	682b      	ldr	r3, [r5, #0]
 8007caa:	b103      	cbz	r3, 8007cae <_sbrk_r+0x1a>
 8007cac:	6023      	str	r3, [r4, #0]
 8007cae:	bd38      	pop	{r3, r4, r5, pc}
 8007cb0:	200004c8 	.word	0x200004c8

08007cb4 <memcpy>:
 8007cb4:	440a      	add	r2, r1
 8007cb6:	4291      	cmp	r1, r2
 8007cb8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007cbc:	d100      	bne.n	8007cc0 <memcpy+0xc>
 8007cbe:	4770      	bx	lr
 8007cc0:	b510      	push	{r4, lr}
 8007cc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cca:	4291      	cmp	r1, r2
 8007ccc:	d1f9      	bne.n	8007cc2 <memcpy+0xe>
 8007cce:	bd10      	pop	{r4, pc}

08007cd0 <_free_r>:
 8007cd0:	b538      	push	{r3, r4, r5, lr}
 8007cd2:	4605      	mov	r5, r0
 8007cd4:	2900      	cmp	r1, #0
 8007cd6:	d041      	beq.n	8007d5c <_free_r+0x8c>
 8007cd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cdc:	1f0c      	subs	r4, r1, #4
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	bfb8      	it	lt
 8007ce2:	18e4      	addlt	r4, r4, r3
 8007ce4:	f7ff ff82 	bl	8007bec <__malloc_lock>
 8007ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8007d60 <_free_r+0x90>)
 8007cea:	6813      	ldr	r3, [r2, #0]
 8007cec:	b933      	cbnz	r3, 8007cfc <_free_r+0x2c>
 8007cee:	6063      	str	r3, [r4, #4]
 8007cf0:	6014      	str	r4, [r2, #0]
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cf8:	f7ff bf7e 	b.w	8007bf8 <__malloc_unlock>
 8007cfc:	42a3      	cmp	r3, r4
 8007cfe:	d908      	bls.n	8007d12 <_free_r+0x42>
 8007d00:	6820      	ldr	r0, [r4, #0]
 8007d02:	1821      	adds	r1, r4, r0
 8007d04:	428b      	cmp	r3, r1
 8007d06:	bf01      	itttt	eq
 8007d08:	6819      	ldreq	r1, [r3, #0]
 8007d0a:	685b      	ldreq	r3, [r3, #4]
 8007d0c:	1809      	addeq	r1, r1, r0
 8007d0e:	6021      	streq	r1, [r4, #0]
 8007d10:	e7ed      	b.n	8007cee <_free_r+0x1e>
 8007d12:	461a      	mov	r2, r3
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	b10b      	cbz	r3, 8007d1c <_free_r+0x4c>
 8007d18:	42a3      	cmp	r3, r4
 8007d1a:	d9fa      	bls.n	8007d12 <_free_r+0x42>
 8007d1c:	6811      	ldr	r1, [r2, #0]
 8007d1e:	1850      	adds	r0, r2, r1
 8007d20:	42a0      	cmp	r0, r4
 8007d22:	d10b      	bne.n	8007d3c <_free_r+0x6c>
 8007d24:	6820      	ldr	r0, [r4, #0]
 8007d26:	4401      	add	r1, r0
 8007d28:	1850      	adds	r0, r2, r1
 8007d2a:	4283      	cmp	r3, r0
 8007d2c:	6011      	str	r1, [r2, #0]
 8007d2e:	d1e0      	bne.n	8007cf2 <_free_r+0x22>
 8007d30:	6818      	ldr	r0, [r3, #0]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	6053      	str	r3, [r2, #4]
 8007d36:	4408      	add	r0, r1
 8007d38:	6010      	str	r0, [r2, #0]
 8007d3a:	e7da      	b.n	8007cf2 <_free_r+0x22>
 8007d3c:	d902      	bls.n	8007d44 <_free_r+0x74>
 8007d3e:	230c      	movs	r3, #12
 8007d40:	602b      	str	r3, [r5, #0]
 8007d42:	e7d6      	b.n	8007cf2 <_free_r+0x22>
 8007d44:	6820      	ldr	r0, [r4, #0]
 8007d46:	1821      	adds	r1, r4, r0
 8007d48:	428b      	cmp	r3, r1
 8007d4a:	bf04      	itt	eq
 8007d4c:	6819      	ldreq	r1, [r3, #0]
 8007d4e:	685b      	ldreq	r3, [r3, #4]
 8007d50:	6063      	str	r3, [r4, #4]
 8007d52:	bf04      	itt	eq
 8007d54:	1809      	addeq	r1, r1, r0
 8007d56:	6021      	streq	r1, [r4, #0]
 8007d58:	6054      	str	r4, [r2, #4]
 8007d5a:	e7ca      	b.n	8007cf2 <_free_r+0x22>
 8007d5c:	bd38      	pop	{r3, r4, r5, pc}
 8007d5e:	bf00      	nop
 8007d60:	200004c4 	.word	0x200004c4

08007d64 <_malloc_usable_size_r>:
 8007d64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d68:	1f18      	subs	r0, r3, #4
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	bfbc      	itt	lt
 8007d6e:	580b      	ldrlt	r3, [r1, r0]
 8007d70:	18c0      	addlt	r0, r0, r3
 8007d72:	4770      	bx	lr

08007d74 <_init>:
 8007d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d76:	bf00      	nop
 8007d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d7a:	bc08      	pop	{r3}
 8007d7c:	469e      	mov	lr, r3
 8007d7e:	4770      	bx	lr

08007d80 <_fini>:
 8007d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d82:	bf00      	nop
 8007d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d86:	bc08      	pop	{r3}
 8007d88:	469e      	mov	lr, r3
 8007d8a:	4770      	bx	lr
