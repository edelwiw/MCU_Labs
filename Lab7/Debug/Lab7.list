
Lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c74  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08004e44  08004e44  00005e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fbc  08004fbc  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004fbc  08004fbc  00005fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fc4  08004fc4  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fc4  08004fc4  00005fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004fc8  08004fc8  00005fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004fcc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  20000068  08005034  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08005034  00006338  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa3e  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021f2  00000000  00000000  00015ad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  00017cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ba0  00000000  00000000  00018b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021917  00000000  00000000  00019738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000110fd  00000000  00000000  0003b04f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d101c  00000000  00000000  0004c14c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d168  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004490  00000000  00000000  0011d1ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0012163c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004e2c 	.word	0x08004e2c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08004e2c 	.word	0x08004e2c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f000 fc84 	bl	8000ec0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f828 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f938 	bl	8000830 <MX_GPIO_Init>
  MX_DMA_Init();
 80005c0:	f000 f916 	bl	80007f0 <MX_DMA_Init>
  MX_SPI2_Init();
 80005c4:	f000 f88e 	bl	80006e4 <MX_SPI2_Init>
  MX_TIM10_Init();
 80005c8:	f000 f8c4 	bl	8000754 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 80005cc:	f000 f8e6 	bl	800079c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim10); 
 80005d0:	480a      	ldr	r0, [pc, #40]	@ (80005fc <main+0x4c>)
 80005d2:	f002 fd11 	bl	8002ff8 <HAL_TIM_Base_Start_IT>
  // 
  display(0);
 80005d6:	2000      	movs	r0, #0
 80005d8:	f000 fa06 	bl	80009e8 <display>


  HAL_UART_Receive_IT(&huart2, (uint8_t *)&read_buffer[read_index++], 1);
 80005dc:	4b08      	ldr	r3, [pc, #32]	@ (8000600 <main+0x50>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	1c5a      	adds	r2, r3, #1
 80005e2:	b2d1      	uxtb	r1, r2
 80005e4:	4a06      	ldr	r2, [pc, #24]	@ (8000600 <main+0x50>)
 80005e6:	7011      	strb	r1, [r2, #0]
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <main+0x54>)
 80005ec:	4413      	add	r3, r2
 80005ee:	2201      	movs	r2, #1
 80005f0:	4619      	mov	r1, r3
 80005f2:	4805      	ldr	r0, [pc, #20]	@ (8000608 <main+0x58>)
 80005f4:	f002 ffce 	bl	8003594 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <main+0x48>
 80005fc:	2000013c 	.word	0x2000013c
 8000600:	200001e7 	.word	0x200001e7
 8000604:	200001dc 	.word	0x200001dc
 8000608:	20000184 	.word	0x20000184

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	@ 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 031c 	add.w	r3, r7, #28
 8000616:	2234      	movs	r2, #52	@ 0x34
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f003 ff86 	bl	800452c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 0308 	add.w	r3, r7, #8
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	4b29      	ldr	r3, [pc, #164]	@ (80006dc <SystemClock_Config+0xd0>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000638:	4a28      	ldr	r2, [pc, #160]	@ (80006dc <SystemClock_Config+0xd0>)
 800063a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800063e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000640:	4b26      	ldr	r3, [pc, #152]	@ (80006dc <SystemClock_Config+0xd0>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000644:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800064c:	2300      	movs	r3, #0
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	4b23      	ldr	r3, [pc, #140]	@ (80006e0 <SystemClock_Config+0xd4>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000658:	4a21      	ldr	r2, [pc, #132]	@ (80006e0 <SystemClock_Config+0xd4>)
 800065a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b1f      	ldr	r3, [pc, #124]	@ (80006e0 <SystemClock_Config+0xd4>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800066c:	2302      	movs	r3, #2
 800066e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000670:	2301      	movs	r3, #1
 8000672:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000674:	2310      	movs	r3, #16
 8000676:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000678:	2302      	movs	r3, #2
 800067a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800067c:	2300      	movs	r3, #0
 800067e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000680:	2308      	movs	r3, #8
 8000682:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000684:	2350      	movs	r3, #80	@ 0x50
 8000686:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800068c:	2302      	movs	r3, #2
 800068e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000690:	2302      	movs	r3, #2
 8000692:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 031c 	add.w	r3, r7, #28
 8000698:	4618      	mov	r0, r3
 800069a:	f001 fe09 	bl	80022b0 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006a4:	f000 fa1a 	bl	8000adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ac:	2302      	movs	r3, #2
 80006ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006be:	f107 0308 	add.w	r3, r7, #8
 80006c2:	2102      	movs	r1, #2
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 fb2f 	bl	8001d28 <HAL_RCC_ClockConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006d0:	f000 fa04 	bl	8000adc <Error_Handler>
  }
}
 80006d4:	bf00      	nop
 80006d6:	3750      	adds	r7, #80	@ 0x50
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006e8:	4b18      	ldr	r3, [pc, #96]	@ (800074c <MX_SPI2_Init+0x68>)
 80006ea:	4a19      	ldr	r2, [pc, #100]	@ (8000750 <MX_SPI2_Init+0x6c>)
 80006ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006ee:	4b17      	ldr	r3, [pc, #92]	@ (800074c <MX_SPI2_Init+0x68>)
 80006f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80006f6:	4b15      	ldr	r3, [pc, #84]	@ (800074c <MX_SPI2_Init+0x68>)
 80006f8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80006fc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006fe:	4b13      	ldr	r3, [pc, #76]	@ (800074c <MX_SPI2_Init+0x68>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000704:	4b11      	ldr	r3, [pc, #68]	@ (800074c <MX_SPI2_Init+0x68>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800070a:	4b10      	ldr	r3, [pc, #64]	@ (800074c <MX_SPI2_Init+0x68>)
 800070c:	2200      	movs	r2, #0
 800070e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000710:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <MX_SPI2_Init+0x68>)
 8000712:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000716:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000718:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_SPI2_Init+0x68>)
 800071a:	2210      	movs	r2, #16
 800071c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800071e:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <MX_SPI2_Init+0x68>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000724:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_SPI2_Init+0x68>)
 8000726:	2200      	movs	r2, #0
 8000728:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800072a:	4b08      	ldr	r3, [pc, #32]	@ (800074c <MX_SPI2_Init+0x68>)
 800072c:	2200      	movs	r2, #0
 800072e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_SPI2_Init+0x68>)
 8000732:	220a      	movs	r2, #10
 8000734:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	@ (800074c <MX_SPI2_Init+0x68>)
 8000738:	f002 f858 	bl	80027ec <HAL_SPI_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8000742:	f000 f9cb 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000084 	.word	0x20000084
 8000750:	40003800 	.word	0x40003800

08000754 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000758:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <MX_TIM10_Init+0x40>)
 800075a:	4a0f      	ldr	r2, [pc, #60]	@ (8000798 <MX_TIM10_Init+0x44>)
 800075c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 79;
 800075e:	4b0d      	ldr	r3, [pc, #52]	@ (8000794 <MX_TIM10_Init+0x40>)
 8000760:	224f      	movs	r2, #79	@ 0x4f
 8000762:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000764:	4b0b      	ldr	r3, [pc, #44]	@ (8000794 <MX_TIM10_Init+0x40>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 800076a:	4b0a      	ldr	r3, [pc, #40]	@ (8000794 <MX_TIM10_Init+0x40>)
 800076c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000770:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000772:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <MX_TIM10_Init+0x40>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000778:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <MX_TIM10_Init+0x40>)
 800077a:	2200      	movs	r2, #0
 800077c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_TIM10_Init+0x40>)
 8000780:	f002 fbea 	bl	8002f58 <HAL_TIM_Base_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800078a:	f000 f9a7 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	2000013c 	.word	0x2000013c
 8000798:	40014400 	.word	0x40014400

0800079c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a0:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007a2:	4a12      	ldr	r2, [pc, #72]	@ (80007ec <MX_USART2_UART_Init+0x50>)
 80007a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007a6:	4b10      	ldr	r3, [pc, #64]	@ (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007a8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80007ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	@ (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c0:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007c2:	220c      	movs	r2, #12
 80007c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007cc:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	@ (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007d4:	f002 fe58 	bl	8003488 <HAL_UART_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007de:	f000 f97d 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000184 	.word	0x20000184
 80007ec:	40004400 	.word	0x40004400

080007f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <MX_DMA_Init+0x3c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a0b      	ldr	r2, [pc, #44]	@ (800082c <MX_DMA_Init+0x3c>)
 8000800:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b09      	ldr	r3, [pc, #36]	@ (800082c <MX_DMA_Init+0x3c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	2100      	movs	r1, #0
 8000816:	200f      	movs	r0, #15
 8000818:	f000 fc9f 	bl	800115a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800081c:	200f      	movs	r0, #15
 800081e:	f000 fcb8 	bl	8001192 <HAL_NVIC_EnableIRQ>

}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	4b19      	ldr	r3, [pc, #100]	@ (80008b0 <MX_GPIO_Init+0x80>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a18      	ldr	r2, [pc, #96]	@ (80008b0 <MX_GPIO_Init+0x80>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <MX_GPIO_Init+0x80>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <MX_GPIO_Init+0x80>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a11      	ldr	r2, [pc, #68]	@ (80008b0 <MX_GPIO_Init+0x80>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <MX_GPIO_Init+0x80>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|SPI2_SS_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8000884:	480b      	ldr	r0, [pc, #44]	@ (80008b4 <MX_GPIO_Init+0x84>)
 8000886:	f001 fa35 	bl	8001cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin SPI2_SS_Pin */
  GPIO_InitStruct.Pin = LED_Pin|SPI2_SS_Pin;
 800088a:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 800088e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	4619      	mov	r1, r3
 80008a2:	4804      	ldr	r0, [pc, #16]	@ (80008b4 <MX_GPIO_Init+0x84>)
 80008a4:	f001 f892 	bl	80019cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008a8:	bf00      	nop
 80008aa:	3720      	adds	r7, #32
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40020000 	.word	0x40020000

080008b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// timer 10 interrupt handler
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM10)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a19      	ldr	r2, [pc, #100]	@ (800092c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d12b      	bne.n	8000922 <HAL_TIM_PeriodElapsedCallback+0x6a>
  {
    // update display
    HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008d0:	4817      	ldr	r0, [pc, #92]	@ (8000930 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80008d2:	f001 fa0f 	bl	8001cf4 <HAL_GPIO_WritePin>
    uint8_t data = display_buffer[current_digit];
 80008d6:	4b17      	ldr	r3, [pc, #92]	@ (8000934 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	461a      	mov	r2, r3
 80008dc:	4b16      	ldr	r3, [pc, #88]	@ (8000938 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80008de:	5c9b      	ldrb	r3, [r3, r2]
 80008e0:	73fb      	strb	r3, [r7, #15]
    uint8_t digit = ~(1 << current_digit);
 80008e2:	4b14      	ldr	r3, [pc, #80]	@ (8000934 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	461a      	mov	r2, r3
 80008e8:	2301      	movs	r3, #1
 80008ea:	4093      	lsls	r3, r2
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	43db      	mvns	r3, r3
 80008f0:	73bb      	strb	r3, [r7, #14]
    send_buffer[0] = data;
 80008f2:	4a12      	ldr	r2, [pc, #72]	@ (800093c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
 80008f6:	7013      	strb	r3, [r2, #0]
    send_buffer[1] = digit;
 80008f8:	4a10      	ldr	r2, [pc, #64]	@ (800093c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80008fa:	7bbb      	ldrb	r3, [r7, #14]
 80008fc:	7053      	strb	r3, [r2, #1]
    HAL_SPI_Transmit_DMA(&hspi2, send_buffer, 2);
 80008fe:	2202      	movs	r2, #2
 8000900:	490e      	ldr	r1, [pc, #56]	@ (800093c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000902:	480f      	ldr	r0, [pc, #60]	@ (8000940 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000904:	f001 fffc 	bl	8002900 <HAL_SPI_Transmit_DMA>
    current_digit = (current_digit + 1) % NUM_INDICATORS;
 8000908:	4b0a      	ldr	r3, [pc, #40]	@ (8000934 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	3301      	adds	r3, #1
 800090e:	425a      	negs	r2, r3
 8000910:	f003 0307 	and.w	r3, r3, #7
 8000914:	f002 0207 	and.w	r2, r2, #7
 8000918:	bf58      	it	pl
 800091a:	4253      	negpl	r3, r2
 800091c:	b2da      	uxtb	r2, r3
 800091e:	4b05      	ldr	r3, [pc, #20]	@ (8000934 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000920:	701a      	strb	r2, [r3, #0]
  }
}
 8000922:	bf00      	nop
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40014400 	.word	0x40014400
 8000930:	40020000 	.word	0x40020000
 8000934:	200001d4 	.word	0x200001d4
 8000938:	200001cc 	.word	0x200001cc
 800093c:	200001d8 	.word	0x200001d8
 8000940:	20000084 	.word	0x20000084

08000944 <HAL_SPI_TxCpltCallback>:

// spi 2 interrupt handler
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 800094c:	2201      	movs	r2, #1
 800094e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000952:	4803      	ldr	r0, [pc, #12]	@ (8000960 <HAL_SPI_TxCpltCallback+0x1c>)
 8000954:	f001 f9ce 	bl	8001cf4 <HAL_GPIO_WritePin>
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40020000 	.word	0x40020000

08000964 <HAL_UART_RxCpltCallback>:


// uart 2 interrupt handler
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a19      	ldr	r2, [pc, #100]	@ (80009d8 <HAL_UART_RxCpltCallback+0x74>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d12b      	bne.n	80009ce <HAL_UART_RxCpltCallback+0x6a>
  {
    if(read_buffer[read_index - 1] == '\n' || read_buffer[read_index - 1] == '\r') {
 8000976:	4b19      	ldr	r3, [pc, #100]	@ (80009dc <HAL_UART_RxCpltCallback+0x78>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	3b01      	subs	r3, #1
 800097c:	4a18      	ldr	r2, [pc, #96]	@ (80009e0 <HAL_UART_RxCpltCallback+0x7c>)
 800097e:	5cd3      	ldrb	r3, [r2, r3]
 8000980:	2b0a      	cmp	r3, #10
 8000982:	d006      	beq.n	8000992 <HAL_UART_RxCpltCallback+0x2e>
 8000984:	4b15      	ldr	r3, [pc, #84]	@ (80009dc <HAL_UART_RxCpltCallback+0x78>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	3b01      	subs	r3, #1
 800098a:	4a15      	ldr	r2, [pc, #84]	@ (80009e0 <HAL_UART_RxCpltCallback+0x7c>)
 800098c:	5cd3      	ldrb	r3, [r2, r3]
 800098e:	2b0d      	cmp	r3, #13
 8000990:	d10f      	bne.n	80009b2 <HAL_UART_RxCpltCallback+0x4e>
      read_buffer[read_index - 1] = '\0';
 8000992:	4b12      	ldr	r3, [pc, #72]	@ (80009dc <HAL_UART_RxCpltCallback+0x78>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	3b01      	subs	r3, #1
 8000998:	4a11      	ldr	r2, [pc, #68]	@ (80009e0 <HAL_UART_RxCpltCallback+0x7c>)
 800099a:	2100      	movs	r1, #0
 800099c:	54d1      	strb	r1, [r2, r3]

    display(atol(read_buffer));
 800099e:	4810      	ldr	r0, [pc, #64]	@ (80009e0 <HAL_UART_RxCpltCallback+0x7c>)
 80009a0:	f003 fd1c 	bl	80043dc <atol>
 80009a4:	4603      	mov	r3, r0
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 f81e 	bl	80009e8 <display>
    read_index = 0;
 80009ac:	4b0b      	ldr	r3, [pc, #44]	@ (80009dc <HAL_UART_RxCpltCallback+0x78>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart2, (uint8_t *)&read_buffer[read_index++], 1);
 80009b2:	4b0a      	ldr	r3, [pc, #40]	@ (80009dc <HAL_UART_RxCpltCallback+0x78>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	1c5a      	adds	r2, r3, #1
 80009b8:	b2d1      	uxtb	r1, r2
 80009ba:	4a08      	ldr	r2, [pc, #32]	@ (80009dc <HAL_UART_RxCpltCallback+0x78>)
 80009bc:	7011      	strb	r1, [r2, #0]
 80009be:	461a      	mov	r2, r3
 80009c0:	4b07      	ldr	r3, [pc, #28]	@ (80009e0 <HAL_UART_RxCpltCallback+0x7c>)
 80009c2:	4413      	add	r3, r2
 80009c4:	2201      	movs	r2, #1
 80009c6:	4619      	mov	r1, r3
 80009c8:	4806      	ldr	r0, [pc, #24]	@ (80009e4 <HAL_UART_RxCpltCallback+0x80>)
 80009ca:	f002 fde3 	bl	8003594 <HAL_UART_Receive_IT>
  }
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40004400 	.word	0x40004400
 80009dc:	200001e7 	.word	0x200001e7
 80009e0:	200001dc 	.word	0x200001dc
 80009e4:	20000184 	.word	0x20000184

080009e8 <display>:

void display(uint32_t number)
{
 80009e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ea:	b0a7      	sub	sp, #156	@ 0x9c
 80009ec:	af06      	add	r7, sp, #24
 80009ee:	6078      	str	r0, [r7, #4]
  char dig[NUM_INDICATORS + 1]; 
  sprintf(dig, "%d", number);
 80009f0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	4934      	ldr	r1, [pc, #208]	@ (8000ac8 <display+0xe0>)
 80009f8:	4618      	mov	r0, r3
 80009fa:	f003 fcf3 	bl	80043e4 <siprintf>

  uint8_t num_digits = strlen(dig);
 80009fe:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fc04 	bl	8000210 <strlen>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  for (int i = 0; i < num_digits; i++) {
 8000a0e:	2300      	movs	r3, #0
 8000a10:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000a12:	e00f      	b.n	8000a34 <display+0x4c>
        display_buffer[i] = digits[dig[i] - '0'];
 8000a14:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8000a18:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000a1a:	4413      	add	r3, r2
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	3b30      	subs	r3, #48	@ 0x30
 8000a20:	4a2a      	ldr	r2, [pc, #168]	@ (8000acc <display+0xe4>)
 8000a22:	5cd1      	ldrb	r1, [r2, r3]
 8000a24:	4a2a      	ldr	r2, [pc, #168]	@ (8000ad0 <display+0xe8>)
 8000a26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000a28:	4413      	add	r3, r2
 8000a2a:	460a      	mov	r2, r1
 8000a2c:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < num_digits; i++) {
 8000a2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000a30:	3301      	adds	r3, #1
 8000a32:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000a34:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000a38:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	dbea      	blt.n	8000a14 <display+0x2c>
      }
      for (int i = num_digits ; i < NUM_INDICATORS; i++) {
 8000a3e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000a42:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000a44:	e007      	b.n	8000a56 <display+0x6e>
        display_buffer[i] = DIGIT_N;
 8000a46:	4a22      	ldr	r2, [pc, #136]	@ (8000ad0 <display+0xe8>)
 8000a48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000a4a:	4413      	add	r3, r2
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]
      for (int i = num_digits ; i < NUM_INDICATORS; i++) {
 8000a50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000a52:	3301      	adds	r3, #1
 8000a54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000a56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000a58:	2b07      	cmp	r3, #7
 8000a5a:	ddf4      	ble.n	8000a46 <display+0x5e>
      }

  char buffer[100];
  sprintf(buffer, "disp: %d %d %d %d %d %d %d %d\n", display_buffer[0], display_buffer[1], display_buffer[2], display_buffer[3], display_buffer[4], display_buffer[5], display_buffer[6], display_buffer[7]);
 8000a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad0 <display+0xe8>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	469c      	mov	ip, r3
 8000a62:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad0 <display+0xe8>)
 8000a64:	785b      	ldrb	r3, [r3, #1]
 8000a66:	469e      	mov	lr, r3
 8000a68:	4b19      	ldr	r3, [pc, #100]	@ (8000ad0 <display+0xe8>)
 8000a6a:	789b      	ldrb	r3, [r3, #2]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	4b18      	ldr	r3, [pc, #96]	@ (8000ad0 <display+0xe8>)
 8000a70:	78db      	ldrb	r3, [r3, #3]
 8000a72:	4619      	mov	r1, r3
 8000a74:	4b16      	ldr	r3, [pc, #88]	@ (8000ad0 <display+0xe8>)
 8000a76:	791b      	ldrb	r3, [r3, #4]
 8000a78:	461c      	mov	r4, r3
 8000a7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ad0 <display+0xe8>)
 8000a7c:	795b      	ldrb	r3, [r3, #5]
 8000a7e:	461d      	mov	r5, r3
 8000a80:	4b13      	ldr	r3, [pc, #76]	@ (8000ad0 <display+0xe8>)
 8000a82:	799b      	ldrb	r3, [r3, #6]
 8000a84:	461e      	mov	r6, r3
 8000a86:	4b12      	ldr	r3, [pc, #72]	@ (8000ad0 <display+0xe8>)
 8000a88:	79db      	ldrb	r3, [r3, #7]
 8000a8a:	f107 0008 	add.w	r0, r7, #8
 8000a8e:	9305      	str	r3, [sp, #20]
 8000a90:	9604      	str	r6, [sp, #16]
 8000a92:	9503      	str	r5, [sp, #12]
 8000a94:	9402      	str	r4, [sp, #8]
 8000a96:	9101      	str	r1, [sp, #4]
 8000a98:	9200      	str	r2, [sp, #0]
 8000a9a:	4673      	mov	r3, lr
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	490d      	ldr	r1, [pc, #52]	@ (8000ad4 <display+0xec>)
 8000aa0:	f003 fca0 	bl	80043e4 <siprintf>
  HAL_UART_Transmit_IT(&huart2, (uint8_t *)buffer, strlen(buffer));
 8000aa4:	f107 0308 	add.w	r3, r7, #8
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fbb1 	bl	8000210 <strlen>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	f107 0308 	add.w	r3, r7, #8
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4807      	ldr	r0, [pc, #28]	@ (8000ad8 <display+0xf0>)
 8000aba:	f002 fd35 	bl	8003528 <HAL_UART_Transmit_IT>
}
 8000abe:	bf00      	nop
 8000ac0:	3784      	adds	r7, #132	@ 0x84
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	08004e44 	.word	0x08004e44
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	200001cc 	.word	0x200001cc
 8000ad4:	08004e48 	.word	0x08004e48
 8000ad8:	20000184 	.word	0x20000184

08000adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae0:	b672      	cpsid	i
}
 8000ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <Error_Handler+0x8>

08000ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b10      	ldr	r3, [pc, #64]	@ (8000b34 <HAL_MspInit+0x4c>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af6:	4a0f      	ldr	r2, [pc, #60]	@ (8000b34 <HAL_MspInit+0x4c>)
 8000af8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000afc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000afe:	4b0d      	ldr	r3, [pc, #52]	@ (8000b34 <HAL_MspInit+0x4c>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <HAL_MspInit+0x4c>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	4a08      	ldr	r2, [pc, #32]	@ (8000b34 <HAL_MspInit+0x4c>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1a:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <HAL_MspInit+0x4c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800

08000b38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	@ 0x28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a34      	ldr	r2, [pc, #208]	@ (8000c28 <HAL_SPI_MspInit+0xf0>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d161      	bne.n	8000c1e <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	4b33      	ldr	r3, [pc, #204]	@ (8000c2c <HAL_SPI_MspInit+0xf4>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b62:	4a32      	ldr	r2, [pc, #200]	@ (8000c2c <HAL_SPI_MspInit+0xf4>)
 8000b64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b6a:	4b30      	ldr	r3, [pc, #192]	@ (8000c2c <HAL_SPI_MspInit+0xf4>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	4b2c      	ldr	r3, [pc, #176]	@ (8000c2c <HAL_SPI_MspInit+0xf4>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	4a2b      	ldr	r2, [pc, #172]	@ (8000c2c <HAL_SPI_MspInit+0xf4>)
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b86:	4b29      	ldr	r3, [pc, #164]	@ (8000c2c <HAL_SPI_MspInit+0xf4>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000b92:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ba4:	2305      	movs	r3, #5
 8000ba6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	4619      	mov	r1, r3
 8000bae:	4820      	ldr	r0, [pc, #128]	@ (8000c30 <HAL_SPI_MspInit+0xf8>)
 8000bb0:	f000 ff0c 	bl	80019cc <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c34 <HAL_SPI_MspInit+0xfc>)
 8000bb6:	4a20      	ldr	r2, [pc, #128]	@ (8000c38 <HAL_SPI_MspInit+0x100>)
 8000bb8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000bba:	4b1e      	ldr	r3, [pc, #120]	@ (8000c34 <HAL_SPI_MspInit+0xfc>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c34 <HAL_SPI_MspInit+0xfc>)
 8000bc2:	2240      	movs	r2, #64	@ 0x40
 8000bc4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc6:	4b1b      	ldr	r3, [pc, #108]	@ (8000c34 <HAL_SPI_MspInit+0xfc>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bcc:	4b19      	ldr	r3, [pc, #100]	@ (8000c34 <HAL_SPI_MspInit+0xfc>)
 8000bce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bd2:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bd4:	4b17      	ldr	r3, [pc, #92]	@ (8000c34 <HAL_SPI_MspInit+0xfc>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bda:	4b16      	ldr	r3, [pc, #88]	@ (8000c34 <HAL_SPI_MspInit+0xfc>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000be0:	4b14      	ldr	r3, [pc, #80]	@ (8000c34 <HAL_SPI_MspInit+0xfc>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000be6:	4b13      	ldr	r3, [pc, #76]	@ (8000c34 <HAL_SPI_MspInit+0xfc>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bec:	4b11      	ldr	r3, [pc, #68]	@ (8000c34 <HAL_SPI_MspInit+0xfc>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000bf2:	4810      	ldr	r0, [pc, #64]	@ (8000c34 <HAL_SPI_MspInit+0xfc>)
 8000bf4:	f000 fae8 	bl	80011c8 <HAL_DMA_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8000bfe:	f7ff ff6d 	bl	8000adc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4a0b      	ldr	r2, [pc, #44]	@ (8000c34 <HAL_SPI_MspInit+0xfc>)
 8000c06:	649a      	str	r2, [r3, #72]	@ 0x48
 8000c08:	4a0a      	ldr	r2, [pc, #40]	@ (8000c34 <HAL_SPI_MspInit+0xfc>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	2024      	movs	r0, #36	@ 0x24
 8000c14:	f000 faa1 	bl	800115a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000c18:	2024      	movs	r0, #36	@ 0x24
 8000c1a:	f000 faba 	bl	8001192 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000c1e:	bf00      	nop
 8000c20:	3728      	adds	r7, #40	@ 0x28
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40003800 	.word	0x40003800
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020400 	.word	0x40020400
 8000c34:	200000dc 	.word	0x200000dc
 8000c38:	40026070 	.word	0x40026070

08000c3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0e      	ldr	r2, [pc, #56]	@ (8000c84 <HAL_TIM_Base_MspInit+0x48>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d115      	bne.n	8000c7a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b0d      	ldr	r3, [pc, #52]	@ (8000c88 <HAL_TIM_Base_MspInit+0x4c>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c56:	4a0c      	ldr	r2, [pc, #48]	@ (8000c88 <HAL_TIM_Base_MspInit+0x4c>)
 8000c58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c88 <HAL_TIM_Base_MspInit+0x4c>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2019      	movs	r0, #25
 8000c70:	f000 fa73 	bl	800115a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c74:	2019      	movs	r0, #25
 8000c76:	f000 fa8c 	bl	8001192 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM10_MspInit 1 */

  }

}
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40014400 	.word	0x40014400
 8000c88:	40023800 	.word	0x40023800

08000c8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	@ 0x28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a1d      	ldr	r2, [pc, #116]	@ (8000d20 <HAL_UART_MspInit+0x94>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d133      	bne.n	8000d16 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d24 <HAL_UART_MspInit+0x98>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb6:	4a1b      	ldr	r2, [pc, #108]	@ (8000d24 <HAL_UART_MspInit+0x98>)
 8000cb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cbe:	4b19      	ldr	r3, [pc, #100]	@ (8000d24 <HAL_UART_MspInit+0x98>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	4b15      	ldr	r3, [pc, #84]	@ (8000d24 <HAL_UART_MspInit+0x98>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	4a14      	ldr	r2, [pc, #80]	@ (8000d24 <HAL_UART_MspInit+0x98>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cda:	4b12      	ldr	r3, [pc, #72]	@ (8000d24 <HAL_UART_MspInit+0x98>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ce6:	230c      	movs	r3, #12
 8000ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cf6:	2307      	movs	r3, #7
 8000cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4809      	ldr	r0, [pc, #36]	@ (8000d28 <HAL_UART_MspInit+0x9c>)
 8000d02:	f000 fe63 	bl	80019cc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2100      	movs	r1, #0
 8000d0a:	2026      	movs	r0, #38	@ 0x26
 8000d0c:	f000 fa25 	bl	800115a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d10:	2026      	movs	r0, #38	@ 0x26
 8000d12:	f000 fa3e 	bl	8001192 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d16:	bf00      	nop
 8000d18:	3728      	adds	r7, #40	@ 0x28
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40004400 	.word	0x40004400
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40020000 	.word	0x40020000

08000d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <NMI_Handler+0x4>

08000d34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <HardFault_Handler+0x4>

08000d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <MemManage_Handler+0x4>

08000d44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <BusFault_Handler+0x4>

08000d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <UsageFault_Handler+0x4>

08000d54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d82:	f000 f8ef 	bl	8000f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000d90:	4802      	ldr	r0, [pc, #8]	@ (8000d9c <DMA1_Stream4_IRQHandler+0x10>)
 8000d92:	f000 fbb1 	bl	80014f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200000dc 	.word	0x200000dc

08000da0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000da4:	4802      	ldr	r0, [pc, #8]	@ (8000db0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000da6:	f002 f997 	bl	80030d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	2000013c 	.word	0x2000013c

08000db4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000db8:	4802      	ldr	r0, [pc, #8]	@ (8000dc4 <SPI2_IRQHandler+0x10>)
 8000dba:	f001 fe53 	bl	8002a64 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000084 	.word	0x20000084

08000dc8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000dcc:	4802      	ldr	r0, [pc, #8]	@ (8000dd8 <USART2_IRQHandler+0x10>)
 8000dce:	f002 fc07 	bl	80035e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000184 	.word	0x20000184

08000ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de4:	4a14      	ldr	r2, [pc, #80]	@ (8000e38 <_sbrk+0x5c>)
 8000de6:	4b15      	ldr	r3, [pc, #84]	@ (8000e3c <_sbrk+0x60>)
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df0:	4b13      	ldr	r3, [pc, #76]	@ (8000e40 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d102      	bne.n	8000dfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df8:	4b11      	ldr	r3, [pc, #68]	@ (8000e40 <_sbrk+0x64>)
 8000dfa:	4a12      	ldr	r2, [pc, #72]	@ (8000e44 <_sbrk+0x68>)
 8000dfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dfe:	4b10      	ldr	r3, [pc, #64]	@ (8000e40 <_sbrk+0x64>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d207      	bcs.n	8000e1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e0c:	f003 fb96 	bl	800453c <__errno>
 8000e10:	4603      	mov	r3, r0
 8000e12:	220c      	movs	r2, #12
 8000e14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e1a:	e009      	b.n	8000e30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e1c:	4b08      	ldr	r3, [pc, #32]	@ (8000e40 <_sbrk+0x64>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e22:	4b07      	ldr	r3, [pc, #28]	@ (8000e40 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	4a05      	ldr	r2, [pc, #20]	@ (8000e40 <_sbrk+0x64>)
 8000e2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20020000 	.word	0x20020000
 8000e3c:	00000400 	.word	0x00000400
 8000e40:	200001e8 	.word	0x200001e8
 8000e44:	20000338 	.word	0x20000338

08000e48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e4c:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <SystemInit+0x20>)
 8000e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e52:	4a05      	ldr	r2, [pc, #20]	@ (8000e68 <SystemInit+0x20>)
 8000e54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ea4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e70:	f7ff ffea 	bl	8000e48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e74:	480c      	ldr	r0, [pc, #48]	@ (8000ea8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e76:	490d      	ldr	r1, [pc, #52]	@ (8000eac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e78:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e7c:	e002      	b.n	8000e84 <LoopCopyDataInit>

08000e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e82:	3304      	adds	r3, #4

08000e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e88:	d3f9      	bcc.n	8000e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e8c:	4c0a      	ldr	r4, [pc, #40]	@ (8000eb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e90:	e001      	b.n	8000e96 <LoopFillZerobss>

08000e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e94:	3204      	adds	r2, #4

08000e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e98:	d3fb      	bcc.n	8000e92 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e9a:	f003 fb55 	bl	8004548 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e9e:	f7ff fb87 	bl	80005b0 <main>
  bx  lr    
 8000ea2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ea4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eac:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000eb0:	08004fcc 	.word	0x08004fcc
  ldr r2, =_sbss
 8000eb4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000eb8:	20000338 	.word	0x20000338

08000ebc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ebc:	e7fe      	b.n	8000ebc <ADC_IRQHandler>
	...

08000ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f00 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f00 <HAL_Init+0x40>)
 8000eca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f00 <HAL_Init+0x40>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0a      	ldr	r2, [pc, #40]	@ (8000f00 <HAL_Init+0x40>)
 8000ed6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000eda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000edc:	4b08      	ldr	r3, [pc, #32]	@ (8000f00 <HAL_Init+0x40>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a07      	ldr	r2, [pc, #28]	@ (8000f00 <HAL_Init+0x40>)
 8000ee2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ee6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee8:	2003      	movs	r0, #3
 8000eea:	f000 f92b 	bl	8001144 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eee:	200f      	movs	r0, #15
 8000ef0:	f000 f808 	bl	8000f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef4:	f7ff fdf8 	bl	8000ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40023c00 	.word	0x40023c00

08000f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f0c:	4b12      	ldr	r3, [pc, #72]	@ (8000f58 <HAL_InitTick+0x54>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b12      	ldr	r3, [pc, #72]	@ (8000f5c <HAL_InitTick+0x58>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 f943 	bl	80011ae <HAL_SYSTICK_Config>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00e      	b.n	8000f50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b0f      	cmp	r3, #15
 8000f36:	d80a      	bhi.n	8000f4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f40:	f000 f90b 	bl	800115a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f44:	4a06      	ldr	r2, [pc, #24]	@ (8000f60 <HAL_InitTick+0x5c>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	e000      	b.n	8000f50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	2000000c 	.word	0x2000000c
 8000f5c:	20000014 	.word	0x20000014
 8000f60:	20000010 	.word	0x20000010

08000f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f68:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <HAL_IncTick+0x20>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <HAL_IncTick+0x24>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	4a04      	ldr	r2, [pc, #16]	@ (8000f88 <HAL_IncTick+0x24>)
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000014 	.word	0x20000014
 8000f88:	200001ec 	.word	0x200001ec

08000f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f90:	4b03      	ldr	r3, [pc, #12]	@ (8000fa0 <HAL_GetTick+0x14>)
 8000f92:	681b      	ldr	r3, [r3, #0]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	200001ec 	.word	0x200001ec

08000fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd6:	4a04      	ldr	r2, [pc, #16]	@ (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	60d3      	str	r3, [r2, #12]
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff0:	4b04      	ldr	r3, [pc, #16]	@ (8001004 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	f003 0307 	and.w	r3, r3, #7
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	2b00      	cmp	r3, #0
 8001018:	db0b      	blt.n	8001032 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	f003 021f 	and.w	r2, r3, #31
 8001020:	4907      	ldr	r1, [pc, #28]	@ (8001040 <__NVIC_EnableIRQ+0x38>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	095b      	lsrs	r3, r3, #5
 8001028:	2001      	movs	r0, #1
 800102a:	fa00 f202 	lsl.w	r2, r0, r2
 800102e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000e100 	.word	0xe000e100

08001044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001054:	2b00      	cmp	r3, #0
 8001056:	db0a      	blt.n	800106e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	b2da      	uxtb	r2, r3
 800105c:	490c      	ldr	r1, [pc, #48]	@ (8001090 <__NVIC_SetPriority+0x4c>)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	0112      	lsls	r2, r2, #4
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	440b      	add	r3, r1
 8001068:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800106c:	e00a      	b.n	8001084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4908      	ldr	r1, [pc, #32]	@ (8001094 <__NVIC_SetPriority+0x50>)
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	3b04      	subs	r3, #4
 800107c:	0112      	lsls	r2, r2, #4
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	440b      	add	r3, r1
 8001082:	761a      	strb	r2, [r3, #24]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000e100 	.word	0xe000e100
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001098:	b480      	push	{r7}
 800109a:	b089      	sub	sp, #36	@ 0x24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f1c3 0307 	rsb	r3, r3, #7
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	bf28      	it	cs
 80010b6:	2304      	movcs	r3, #4
 80010b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3304      	adds	r3, #4
 80010be:	2b06      	cmp	r3, #6
 80010c0:	d902      	bls.n	80010c8 <NVIC_EncodePriority+0x30>
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3b03      	subs	r3, #3
 80010c6:	e000      	b.n	80010ca <NVIC_EncodePriority+0x32>
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43da      	mvns	r2, r3
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	401a      	ands	r2, r3
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ea:	43d9      	mvns	r1, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	4313      	orrs	r3, r2
         );
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3724      	adds	r7, #36	@ 0x24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3b01      	subs	r3, #1
 800110c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001110:	d301      	bcc.n	8001116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001112:	2301      	movs	r3, #1
 8001114:	e00f      	b.n	8001136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001116:	4a0a      	ldr	r2, [pc, #40]	@ (8001140 <SysTick_Config+0x40>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111e:	210f      	movs	r1, #15
 8001120:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001124:	f7ff ff8e 	bl	8001044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001128:	4b05      	ldr	r3, [pc, #20]	@ (8001140 <SysTick_Config+0x40>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112e:	4b04      	ldr	r3, [pc, #16]	@ (8001140 <SysTick_Config+0x40>)
 8001130:	2207      	movs	r2, #7
 8001132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	e000e010 	.word	0xe000e010

08001144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ff29 	bl	8000fa4 <__NVIC_SetPriorityGrouping>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800115a:	b580      	push	{r7, lr}
 800115c:	b086      	sub	sp, #24
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800116c:	f7ff ff3e 	bl	8000fec <__NVIC_GetPriorityGrouping>
 8001170:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	68b9      	ldr	r1, [r7, #8]
 8001176:	6978      	ldr	r0, [r7, #20]
 8001178:	f7ff ff8e 	bl	8001098 <NVIC_EncodePriority>
 800117c:	4602      	mov	r2, r0
 800117e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001182:	4611      	mov	r1, r2
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff5d 	bl	8001044 <__NVIC_SetPriority>
}
 800118a:	bf00      	nop
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800119c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff31 	bl	8001008 <__NVIC_EnableIRQ>
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff ffa2 	bl	8001100 <SysTick_Config>
 80011bc:	4603      	mov	r3, r0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80011d4:	f7ff feda 	bl	8000f8c <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d101      	bne.n	80011e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e099      	b.n	8001318 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2202      	movs	r2, #2
 80011e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 0201 	bic.w	r2, r2, #1
 8001202:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001204:	e00f      	b.n	8001226 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001206:	f7ff fec1 	bl	8000f8c <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b05      	cmp	r3, #5
 8001212:	d908      	bls.n	8001226 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2220      	movs	r2, #32
 8001218:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2203      	movs	r2, #3
 800121e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e078      	b.n	8001318 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	2b00      	cmp	r3, #0
 8001232:	d1e8      	bne.n	8001206 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	4b38      	ldr	r3, [pc, #224]	@ (8001320 <HAL_DMA_Init+0x158>)
 8001240:	4013      	ands	r3, r2
 8001242:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001252:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800125e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800126a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6a1b      	ldr	r3, [r3, #32]
 8001270:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	4313      	orrs	r3, r2
 8001276:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800127c:	2b04      	cmp	r3, #4
 800127e:	d107      	bne.n	8001290 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001288:	4313      	orrs	r3, r2
 800128a:	697a      	ldr	r2, [r7, #20]
 800128c:	4313      	orrs	r3, r2
 800128e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	697a      	ldr	r2, [r7, #20]
 8001296:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	f023 0307 	bic.w	r3, r3, #7
 80012a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ac:	697a      	ldr	r2, [r7, #20]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	d117      	bne.n	80012ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d00e      	beq.n	80012ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f000 fb01 	bl	80018d4 <DMA_CheckFifoParam>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d008      	beq.n	80012ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2240      	movs	r2, #64	@ 0x40
 80012dc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2201      	movs	r2, #1
 80012e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80012e6:	2301      	movs	r3, #1
 80012e8:	e016      	b.n	8001318 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f000 fab8 	bl	8001868 <DMA_CalcBaseAndBitshift>
 80012f8:	4603      	mov	r3, r0
 80012fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001300:	223f      	movs	r2, #63	@ 0x3f
 8001302:	409a      	lsls	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2201      	movs	r2, #1
 8001312:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	f010803f 	.word	0xf010803f

08001324 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
 8001330:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800133a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001342:	2b01      	cmp	r3, #1
 8001344:	d101      	bne.n	800134a <HAL_DMA_Start_IT+0x26>
 8001346:	2302      	movs	r3, #2
 8001348:	e040      	b.n	80013cc <HAL_DMA_Start_IT+0xa8>
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2201      	movs	r2, #1
 800134e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b01      	cmp	r3, #1
 800135c:	d12f      	bne.n	80013be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2202      	movs	r2, #2
 8001362:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2200      	movs	r2, #0
 800136a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	68b9      	ldr	r1, [r7, #8]
 8001372:	68f8      	ldr	r0, [r7, #12]
 8001374:	f000 fa4a 	bl	800180c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800137c:	223f      	movs	r2, #63	@ 0x3f
 800137e:	409a      	lsls	r2, r3
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f042 0216 	orr.w	r2, r2, #22
 8001392:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001398:	2b00      	cmp	r3, #0
 800139a:	d007      	beq.n	80013ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f042 0208 	orr.w	r2, r2, #8
 80013aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f042 0201 	orr.w	r2, r2, #1
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	e005      	b.n	80013ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80013c6:	2302      	movs	r3, #2
 80013c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80013ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013e2:	f7ff fdd3 	bl	8000f8c <HAL_GetTick>
 80013e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d008      	beq.n	8001406 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2280      	movs	r2, #128	@ 0x80
 80013f8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e052      	b.n	80014ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 0216 	bic.w	r2, r2, #22
 8001414:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	695a      	ldr	r2, [r3, #20]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001424:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142a:	2b00      	cmp	r3, #0
 800142c:	d103      	bne.n	8001436 <HAL_DMA_Abort+0x62>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001432:	2b00      	cmp	r3, #0
 8001434:	d007      	beq.n	8001446 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 0208 	bic.w	r2, r2, #8
 8001444:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f022 0201 	bic.w	r2, r2, #1
 8001454:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001456:	e013      	b.n	8001480 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001458:	f7ff fd98 	bl	8000f8c <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b05      	cmp	r3, #5
 8001464:	d90c      	bls.n	8001480 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2220      	movs	r2, #32
 800146a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2203      	movs	r2, #3
 8001470:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e015      	b.n	80014ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1e4      	bne.n	8001458 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001492:	223f      	movs	r2, #63	@ 0x3f
 8001494:	409a      	lsls	r2, r3
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2201      	movs	r2, #1
 800149e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d004      	beq.n	80014d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2280      	movs	r2, #128	@ 0x80
 80014cc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e00c      	b.n	80014ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2205      	movs	r2, #5
 80014d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 0201 	bic.w	r2, r2, #1
 80014e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001500:	2300      	movs	r3, #0
 8001502:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001504:	4b8e      	ldr	r3, [pc, #568]	@ (8001740 <HAL_DMA_IRQHandler+0x248>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a8e      	ldr	r2, [pc, #568]	@ (8001744 <HAL_DMA_IRQHandler+0x24c>)
 800150a:	fba2 2303 	umull	r2, r3, r2, r3
 800150e:	0a9b      	lsrs	r3, r3, #10
 8001510:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001516:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001522:	2208      	movs	r2, #8
 8001524:	409a      	lsls	r2, r3
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4013      	ands	r3, r2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d01a      	beq.n	8001564 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	2b00      	cmp	r3, #0
 800153a:	d013      	beq.n	8001564 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0204 	bic.w	r2, r2, #4
 800154a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001550:	2208      	movs	r2, #8
 8001552:	409a      	lsls	r2, r3
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800155c:	f043 0201 	orr.w	r2, r3, #1
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001568:	2201      	movs	r2, #1
 800156a:	409a      	lsls	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4013      	ands	r3, r2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d012      	beq.n	800159a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00b      	beq.n	800159a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001586:	2201      	movs	r2, #1
 8001588:	409a      	lsls	r2, r3
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001592:	f043 0202 	orr.w	r2, r3, #2
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800159e:	2204      	movs	r2, #4
 80015a0:	409a      	lsls	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4013      	ands	r3, r2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d012      	beq.n	80015d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d00b      	beq.n	80015d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015bc:	2204      	movs	r2, #4
 80015be:	409a      	lsls	r2, r3
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015c8:	f043 0204 	orr.w	r2, r3, #4
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015d4:	2210      	movs	r2, #16
 80015d6:	409a      	lsls	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4013      	ands	r3, r2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d043      	beq.n	8001668 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d03c      	beq.n	8001668 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015f2:	2210      	movs	r2, #16
 80015f4:	409a      	lsls	r2, r3
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d018      	beq.n	800163a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d108      	bne.n	8001628 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161a:	2b00      	cmp	r3, #0
 800161c:	d024      	beq.n	8001668 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	4798      	blx	r3
 8001626:	e01f      	b.n	8001668 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800162c:	2b00      	cmp	r3, #0
 800162e:	d01b      	beq.n	8001668 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	4798      	blx	r3
 8001638:	e016      	b.n	8001668 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001644:	2b00      	cmp	r3, #0
 8001646:	d107      	bne.n	8001658 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0208 	bic.w	r2, r2, #8
 8001656:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800166c:	2220      	movs	r2, #32
 800166e:	409a      	lsls	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4013      	ands	r3, r2
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 808f 	beq.w	8001798 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0310 	and.w	r3, r3, #16
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 8087 	beq.w	8001798 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800168e:	2220      	movs	r2, #32
 8001690:	409a      	lsls	r2, r3
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b05      	cmp	r3, #5
 80016a0:	d136      	bne.n	8001710 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f022 0216 	bic.w	r2, r2, #22
 80016b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	695a      	ldr	r2, [r3, #20]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d103      	bne.n	80016d2 <HAL_DMA_IRQHandler+0x1da>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d007      	beq.n	80016e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 0208 	bic.w	r2, r2, #8
 80016e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016e6:	223f      	movs	r2, #63	@ 0x3f
 80016e8:	409a      	lsls	r2, r3
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001702:	2b00      	cmp	r3, #0
 8001704:	d07e      	beq.n	8001804 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	4798      	blx	r3
        }
        return;
 800170e:	e079      	b.n	8001804 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d01d      	beq.n	800175a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d10d      	bne.n	8001748 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001730:	2b00      	cmp	r3, #0
 8001732:	d031      	beq.n	8001798 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	4798      	blx	r3
 800173c:	e02c      	b.n	8001798 <HAL_DMA_IRQHandler+0x2a0>
 800173e:	bf00      	nop
 8001740:	2000000c 	.word	0x2000000c
 8001744:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800174c:	2b00      	cmp	r3, #0
 800174e:	d023      	beq.n	8001798 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	4798      	blx	r3
 8001758:	e01e      	b.n	8001798 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001764:	2b00      	cmp	r3, #0
 8001766:	d10f      	bne.n	8001788 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0210 	bic.w	r2, r2, #16
 8001776:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800179c:	2b00      	cmp	r3, #0
 800179e:	d032      	beq.n	8001806 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d022      	beq.n	80017f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2205      	movs	r2, #5
 80017b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 0201 	bic.w	r2, r2, #1
 80017c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	3301      	adds	r3, #1
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d307      	bcc.n	80017e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f2      	bne.n	80017c4 <HAL_DMA_IRQHandler+0x2cc>
 80017de:	e000      	b.n	80017e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80017e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d005      	beq.n	8001806 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	4798      	blx	r3
 8001802:	e000      	b.n	8001806 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001804:	bf00      	nop
    }
  }
}
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
 8001818:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001828:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	2b40      	cmp	r3, #64	@ 0x40
 8001838:	d108      	bne.n	800184c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800184a:	e007      	b.n	800185c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68ba      	ldr	r2, [r7, #8]
 8001852:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	60da      	str	r2, [r3, #12]
}
 800185c:	bf00      	nop
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	3b10      	subs	r3, #16
 8001878:	4a14      	ldr	r2, [pc, #80]	@ (80018cc <DMA_CalcBaseAndBitshift+0x64>)
 800187a:	fba2 2303 	umull	r2, r3, r2, r3
 800187e:	091b      	lsrs	r3, r3, #4
 8001880:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001882:	4a13      	ldr	r2, [pc, #76]	@ (80018d0 <DMA_CalcBaseAndBitshift+0x68>)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4413      	add	r3, r2
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	461a      	mov	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2b03      	cmp	r3, #3
 8001894:	d909      	bls.n	80018aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800189e:	f023 0303 	bic.w	r3, r3, #3
 80018a2:	1d1a      	adds	r2, r3, #4
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	659a      	str	r2, [r3, #88]	@ 0x58
 80018a8:	e007      	b.n	80018ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80018b2:	f023 0303 	bic.w	r3, r3, #3
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	aaaaaaab 	.word	0xaaaaaaab
 80018d0:	08004e80 	.word	0x08004e80

080018d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018dc:	2300      	movs	r3, #0
 80018de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d11f      	bne.n	800192e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	d856      	bhi.n	80019a2 <DMA_CheckFifoParam+0xce>
 80018f4:	a201      	add	r2, pc, #4	@ (adr r2, 80018fc <DMA_CheckFifoParam+0x28>)
 80018f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018fa:	bf00      	nop
 80018fc:	0800190d 	.word	0x0800190d
 8001900:	0800191f 	.word	0x0800191f
 8001904:	0800190d 	.word	0x0800190d
 8001908:	080019a3 	.word	0x080019a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001910:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d046      	beq.n	80019a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800191c:	e043      	b.n	80019a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001922:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001926:	d140      	bne.n	80019aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800192c:	e03d      	b.n	80019aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001936:	d121      	bne.n	800197c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	2b03      	cmp	r3, #3
 800193c:	d837      	bhi.n	80019ae <DMA_CheckFifoParam+0xda>
 800193e:	a201      	add	r2, pc, #4	@ (adr r2, 8001944 <DMA_CheckFifoParam+0x70>)
 8001940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001944:	08001955 	.word	0x08001955
 8001948:	0800195b 	.word	0x0800195b
 800194c:	08001955 	.word	0x08001955
 8001950:	0800196d 	.word	0x0800196d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	73fb      	strb	r3, [r7, #15]
      break;
 8001958:	e030      	b.n	80019bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800195e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d025      	beq.n	80019b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800196a:	e022      	b.n	80019b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001970:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001974:	d11f      	bne.n	80019b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800197a:	e01c      	b.n	80019b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	2b02      	cmp	r3, #2
 8001980:	d903      	bls.n	800198a <DMA_CheckFifoParam+0xb6>
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	2b03      	cmp	r3, #3
 8001986:	d003      	beq.n	8001990 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001988:	e018      	b.n	80019bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	73fb      	strb	r3, [r7, #15]
      break;
 800198e:	e015      	b.n	80019bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001994:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00e      	beq.n	80019ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	73fb      	strb	r3, [r7, #15]
      break;
 80019a0:	e00b      	b.n	80019ba <DMA_CheckFifoParam+0xe6>
      break;
 80019a2:	bf00      	nop
 80019a4:	e00a      	b.n	80019bc <DMA_CheckFifoParam+0xe8>
      break;
 80019a6:	bf00      	nop
 80019a8:	e008      	b.n	80019bc <DMA_CheckFifoParam+0xe8>
      break;
 80019aa:	bf00      	nop
 80019ac:	e006      	b.n	80019bc <DMA_CheckFifoParam+0xe8>
      break;
 80019ae:	bf00      	nop
 80019b0:	e004      	b.n	80019bc <DMA_CheckFifoParam+0xe8>
      break;
 80019b2:	bf00      	nop
 80019b4:	e002      	b.n	80019bc <DMA_CheckFifoParam+0xe8>
      break;   
 80019b6:	bf00      	nop
 80019b8:	e000      	b.n	80019bc <DMA_CheckFifoParam+0xe8>
      break;
 80019ba:	bf00      	nop
    }
  } 
  
  return status; 
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop

080019cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b089      	sub	sp, #36	@ 0x24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019de:	2300      	movs	r3, #0
 80019e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
 80019e6:	e165      	b.n	8001cb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019e8:	2201      	movs	r2, #1
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	f040 8154 	bne.w	8001cae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 0303 	and.w	r3, r3, #3
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d005      	beq.n	8001a1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d130      	bne.n	8001a80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	2203      	movs	r2, #3
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a54:	2201      	movs	r2, #1
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	091b      	lsrs	r3, r3, #4
 8001a6a:	f003 0201 	and.w	r2, r3, #1
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	2b03      	cmp	r3, #3
 8001a8a:	d017      	beq.n	8001abc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	2203      	movs	r2, #3
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 0303 	and.w	r3, r3, #3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d123      	bne.n	8001b10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	08da      	lsrs	r2, r3, #3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3208      	adds	r2, #8
 8001ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	220f      	movs	r2, #15
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	691a      	ldr	r2, [r3, #16]
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	08da      	lsrs	r2, r3, #3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3208      	adds	r2, #8
 8001b0a:	69b9      	ldr	r1, [r7, #24]
 8001b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 0203 	and.w	r2, r3, #3
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f000 80ae 	beq.w	8001cae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	4b5d      	ldr	r3, [pc, #372]	@ (8001ccc <HAL_GPIO_Init+0x300>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5a:	4a5c      	ldr	r2, [pc, #368]	@ (8001ccc <HAL_GPIO_Init+0x300>)
 8001b5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b60:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b62:	4b5a      	ldr	r3, [pc, #360]	@ (8001ccc <HAL_GPIO_Init+0x300>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b6e:	4a58      	ldr	r2, [pc, #352]	@ (8001cd0 <HAL_GPIO_Init+0x304>)
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	089b      	lsrs	r3, r3, #2
 8001b74:	3302      	adds	r3, #2
 8001b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	220f      	movs	r2, #15
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a4f      	ldr	r2, [pc, #316]	@ (8001cd4 <HAL_GPIO_Init+0x308>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d025      	beq.n	8001be6 <HAL_GPIO_Init+0x21a>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a4e      	ldr	r2, [pc, #312]	@ (8001cd8 <HAL_GPIO_Init+0x30c>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d01f      	beq.n	8001be2 <HAL_GPIO_Init+0x216>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a4d      	ldr	r2, [pc, #308]	@ (8001cdc <HAL_GPIO_Init+0x310>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d019      	beq.n	8001bde <HAL_GPIO_Init+0x212>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a4c      	ldr	r2, [pc, #304]	@ (8001ce0 <HAL_GPIO_Init+0x314>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d013      	beq.n	8001bda <HAL_GPIO_Init+0x20e>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a4b      	ldr	r2, [pc, #300]	@ (8001ce4 <HAL_GPIO_Init+0x318>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d00d      	beq.n	8001bd6 <HAL_GPIO_Init+0x20a>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a4a      	ldr	r2, [pc, #296]	@ (8001ce8 <HAL_GPIO_Init+0x31c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d007      	beq.n	8001bd2 <HAL_GPIO_Init+0x206>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a49      	ldr	r2, [pc, #292]	@ (8001cec <HAL_GPIO_Init+0x320>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d101      	bne.n	8001bce <HAL_GPIO_Init+0x202>
 8001bca:	2306      	movs	r3, #6
 8001bcc:	e00c      	b.n	8001be8 <HAL_GPIO_Init+0x21c>
 8001bce:	2307      	movs	r3, #7
 8001bd0:	e00a      	b.n	8001be8 <HAL_GPIO_Init+0x21c>
 8001bd2:	2305      	movs	r3, #5
 8001bd4:	e008      	b.n	8001be8 <HAL_GPIO_Init+0x21c>
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	e006      	b.n	8001be8 <HAL_GPIO_Init+0x21c>
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e004      	b.n	8001be8 <HAL_GPIO_Init+0x21c>
 8001bde:	2302      	movs	r3, #2
 8001be0:	e002      	b.n	8001be8 <HAL_GPIO_Init+0x21c>
 8001be2:	2301      	movs	r3, #1
 8001be4:	e000      	b.n	8001be8 <HAL_GPIO_Init+0x21c>
 8001be6:	2300      	movs	r3, #0
 8001be8:	69fa      	ldr	r2, [r7, #28]
 8001bea:	f002 0203 	and.w	r2, r2, #3
 8001bee:	0092      	lsls	r2, r2, #2
 8001bf0:	4093      	lsls	r3, r2
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bf8:	4935      	ldr	r1, [pc, #212]	@ (8001cd0 <HAL_GPIO_Init+0x304>)
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	089b      	lsrs	r3, r3, #2
 8001bfe:	3302      	adds	r3, #2
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c06:	4b3a      	ldr	r3, [pc, #232]	@ (8001cf0 <HAL_GPIO_Init+0x324>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c2a:	4a31      	ldr	r2, [pc, #196]	@ (8001cf0 <HAL_GPIO_Init+0x324>)
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c30:	4b2f      	ldr	r3, [pc, #188]	@ (8001cf0 <HAL_GPIO_Init+0x324>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c54:	4a26      	ldr	r2, [pc, #152]	@ (8001cf0 <HAL_GPIO_Init+0x324>)
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c5a:	4b25      	ldr	r3, [pc, #148]	@ (8001cf0 <HAL_GPIO_Init+0x324>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	43db      	mvns	r3, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c7e:	4a1c      	ldr	r2, [pc, #112]	@ (8001cf0 <HAL_GPIO_Init+0x324>)
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c84:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf0 <HAL_GPIO_Init+0x324>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ca8:	4a11      	ldr	r2, [pc, #68]	@ (8001cf0 <HAL_GPIO_Init+0x324>)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	61fb      	str	r3, [r7, #28]
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	2b0f      	cmp	r3, #15
 8001cb8:	f67f ae96 	bls.w	80019e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	bf00      	nop
 8001cc0:	3724      	adds	r7, #36	@ 0x24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40013800 	.word	0x40013800
 8001cd4:	40020000 	.word	0x40020000
 8001cd8:	40020400 	.word	0x40020400
 8001cdc:	40020800 	.word	0x40020800
 8001ce0:	40020c00 	.word	0x40020c00
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40021400 	.word	0x40021400
 8001cec:	40021800 	.word	0x40021800
 8001cf0:	40013c00 	.word	0x40013c00

08001cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	807b      	strh	r3, [r7, #2]
 8001d00:	4613      	mov	r3, r2
 8001d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d04:	787b      	ldrb	r3, [r7, #1]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d0a:	887a      	ldrh	r2, [r7, #2]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d10:	e003      	b.n	8001d1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d12:	887b      	ldrh	r3, [r7, #2]
 8001d14:	041a      	lsls	r2, r3, #16
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	619a      	str	r2, [r3, #24]
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
	...

08001d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0cc      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d3c:	4b68      	ldr	r3, [pc, #416]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 030f 	and.w	r3, r3, #15
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d90c      	bls.n	8001d64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4a:	4b65      	ldr	r3, [pc, #404]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d52:	4b63      	ldr	r3, [pc, #396]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d001      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0b8      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d020      	beq.n	8001db2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d7c:	4b59      	ldr	r3, [pc, #356]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	4a58      	ldr	r2, [pc, #352]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d82:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d86:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0308 	and.w	r3, r3, #8
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d005      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d94:	4b53      	ldr	r3, [pc, #332]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	4a52      	ldr	r2, [pc, #328]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da0:	4b50      	ldr	r3, [pc, #320]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	494d      	ldr	r1, [pc, #308]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d044      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d107      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc6:	4b47      	ldr	r3, [pc, #284]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d119      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e07f      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d003      	beq.n	8001de6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d107      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d109      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e06f      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e067      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e06:	4b37      	ldr	r3, [pc, #220]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f023 0203 	bic.w	r2, r3, #3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	4934      	ldr	r1, [pc, #208]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e18:	f7ff f8b8 	bl	8000f8c <HAL_GetTick>
 8001e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1e:	e00a      	b.n	8001e36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e20:	f7ff f8b4 	bl	8000f8c <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e04f      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e36:	4b2b      	ldr	r3, [pc, #172]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 020c 	and.w	r2, r3, #12
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d1eb      	bne.n	8001e20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e48:	4b25      	ldr	r3, [pc, #148]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 030f 	and.w	r3, r3, #15
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d20c      	bcs.n	8001e70 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e56:	4b22      	ldr	r3, [pc, #136]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5e:	4b20      	ldr	r3, [pc, #128]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d001      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e032      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d008      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e7c:	4b19      	ldr	r3, [pc, #100]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	4916      	ldr	r1, [pc, #88]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d009      	beq.n	8001eae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e9a:	4b12      	ldr	r3, [pc, #72]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	490e      	ldr	r1, [pc, #56]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001eae:	f000 f855 	bl	8001f5c <HAL_RCC_GetSysClockFreq>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	091b      	lsrs	r3, r3, #4
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	490a      	ldr	r1, [pc, #40]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec0:	5ccb      	ldrb	r3, [r1, r3]
 8001ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec6:	4a09      	ldr	r2, [pc, #36]	@ (8001eec <HAL_RCC_ClockConfig+0x1c4>)
 8001ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001eca:	4b09      	ldr	r3, [pc, #36]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff f818 	bl	8000f04 <HAL_InitTick>

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40023c00 	.word	0x40023c00
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	08004e68 	.word	0x08004e68
 8001eec:	2000000c 	.word	0x2000000c
 8001ef0:	20000010 	.word	0x20000010

08001ef4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ef8:	4b03      	ldr	r3, [pc, #12]	@ (8001f08 <HAL_RCC_GetHCLKFreq+0x14>)
 8001efa:	681b      	ldr	r3, [r3, #0]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	2000000c 	.word	0x2000000c

08001f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f10:	f7ff fff0 	bl	8001ef4 <HAL_RCC_GetHCLKFreq>
 8001f14:	4602      	mov	r2, r0
 8001f16:	4b05      	ldr	r3, [pc, #20]	@ (8001f2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	0a9b      	lsrs	r3, r3, #10
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	4903      	ldr	r1, [pc, #12]	@ (8001f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f22:	5ccb      	ldrb	r3, [r1, r3]
 8001f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	08004e78 	.word	0x08004e78

08001f34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f38:	f7ff ffdc 	bl	8001ef4 <HAL_RCC_GetHCLKFreq>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	4b05      	ldr	r3, [pc, #20]	@ (8001f54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	0b5b      	lsrs	r3, r3, #13
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	4903      	ldr	r1, [pc, #12]	@ (8001f58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f4a:	5ccb      	ldrb	r3, [r1, r3]
 8001f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40023800 	.word	0x40023800
 8001f58:	08004e78 	.word	0x08004e78

08001f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f60:	b0a6      	sub	sp, #152	@ 0x98
 8001f62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f82:	4bc8      	ldr	r3, [pc, #800]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 030c 	and.w	r3, r3, #12
 8001f8a:	2b0c      	cmp	r3, #12
 8001f8c:	f200 817e 	bhi.w	800228c <HAL_RCC_GetSysClockFreq+0x330>
 8001f90:	a201      	add	r2, pc, #4	@ (adr r2, 8001f98 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f96:	bf00      	nop
 8001f98:	08001fcd 	.word	0x08001fcd
 8001f9c:	0800228d 	.word	0x0800228d
 8001fa0:	0800228d 	.word	0x0800228d
 8001fa4:	0800228d 	.word	0x0800228d
 8001fa8:	08001fd5 	.word	0x08001fd5
 8001fac:	0800228d 	.word	0x0800228d
 8001fb0:	0800228d 	.word	0x0800228d
 8001fb4:	0800228d 	.word	0x0800228d
 8001fb8:	08001fdd 	.word	0x08001fdd
 8001fbc:	0800228d 	.word	0x0800228d
 8001fc0:	0800228d 	.word	0x0800228d
 8001fc4:	0800228d 	.word	0x0800228d
 8001fc8:	08002147 	.word	0x08002147
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fcc:	4bb6      	ldr	r3, [pc, #728]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001fce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001fd2:	e15f      	b.n	8002294 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fd4:	4bb5      	ldr	r3, [pc, #724]	@ (80022ac <HAL_RCC_GetSysClockFreq+0x350>)
 8001fd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001fda:	e15b      	b.n	8002294 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fdc:	4bb1      	ldr	r3, [pc, #708]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fe4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fe8:	4bae      	ldr	r3, [pc, #696]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d031      	beq.n	8002058 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ff4:	4bab      	ldr	r3, [pc, #684]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	099b      	lsrs	r3, r3, #6
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001ffe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002000:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002006:	663b      	str	r3, [r7, #96]	@ 0x60
 8002008:	2300      	movs	r3, #0
 800200a:	667b      	str	r3, [r7, #100]	@ 0x64
 800200c:	4ba7      	ldr	r3, [pc, #668]	@ (80022ac <HAL_RCC_GetSysClockFreq+0x350>)
 800200e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002012:	462a      	mov	r2, r5
 8002014:	fb03 f202 	mul.w	r2, r3, r2
 8002018:	2300      	movs	r3, #0
 800201a:	4621      	mov	r1, r4
 800201c:	fb01 f303 	mul.w	r3, r1, r3
 8002020:	4413      	add	r3, r2
 8002022:	4aa2      	ldr	r2, [pc, #648]	@ (80022ac <HAL_RCC_GetSysClockFreq+0x350>)
 8002024:	4621      	mov	r1, r4
 8002026:	fba1 1202 	umull	r1, r2, r1, r2
 800202a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800202c:	460a      	mov	r2, r1
 800202e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002030:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002032:	4413      	add	r3, r2
 8002034:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002036:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800203a:	2200      	movs	r2, #0
 800203c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800203e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002040:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002044:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002048:	f7fe f93a 	bl	80002c0 <__aeabi_uldivmod>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4613      	mov	r3, r2
 8002052:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002056:	e064      	b.n	8002122 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002058:	4b92      	ldr	r3, [pc, #584]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0x348>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	099b      	lsrs	r3, r3, #6
 800205e:	2200      	movs	r2, #0
 8002060:	653b      	str	r3, [r7, #80]	@ 0x50
 8002062:	657a      	str	r2, [r7, #84]	@ 0x54
 8002064:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800206a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800206c:	2300      	movs	r3, #0
 800206e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002070:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002074:	4622      	mov	r2, r4
 8002076:	462b      	mov	r3, r5
 8002078:	f04f 0000 	mov.w	r0, #0
 800207c:	f04f 0100 	mov.w	r1, #0
 8002080:	0159      	lsls	r1, r3, #5
 8002082:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002086:	0150      	lsls	r0, r2, #5
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4621      	mov	r1, r4
 800208e:	1a51      	subs	r1, r2, r1
 8002090:	6139      	str	r1, [r7, #16]
 8002092:	4629      	mov	r1, r5
 8002094:	eb63 0301 	sbc.w	r3, r3, r1
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	f04f 0300 	mov.w	r3, #0
 80020a2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020a6:	4659      	mov	r1, fp
 80020a8:	018b      	lsls	r3, r1, #6
 80020aa:	4651      	mov	r1, sl
 80020ac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020b0:	4651      	mov	r1, sl
 80020b2:	018a      	lsls	r2, r1, #6
 80020b4:	4651      	mov	r1, sl
 80020b6:	ebb2 0801 	subs.w	r8, r2, r1
 80020ba:	4659      	mov	r1, fp
 80020bc:	eb63 0901 	sbc.w	r9, r3, r1
 80020c0:	f04f 0200 	mov.w	r2, #0
 80020c4:	f04f 0300 	mov.w	r3, #0
 80020c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020d4:	4690      	mov	r8, r2
 80020d6:	4699      	mov	r9, r3
 80020d8:	4623      	mov	r3, r4
 80020da:	eb18 0303 	adds.w	r3, r8, r3
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	462b      	mov	r3, r5
 80020e2:	eb49 0303 	adc.w	r3, r9, r3
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	f04f 0300 	mov.w	r3, #0
 80020f0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80020f4:	4629      	mov	r1, r5
 80020f6:	028b      	lsls	r3, r1, #10
 80020f8:	4621      	mov	r1, r4
 80020fa:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020fe:	4621      	mov	r1, r4
 8002100:	028a      	lsls	r2, r1, #10
 8002102:	4610      	mov	r0, r2
 8002104:	4619      	mov	r1, r3
 8002106:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800210a:	2200      	movs	r2, #0
 800210c:	643b      	str	r3, [r7, #64]	@ 0x40
 800210e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002110:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002114:	f7fe f8d4 	bl	80002c0 <__aeabi_uldivmod>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4613      	mov	r3, r2
 800211e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002122:	4b60      	ldr	r3, [pc, #384]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	0c1b      	lsrs	r3, r3, #16
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	3301      	adds	r3, #1
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8002134:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002138:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800213c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002140:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002144:	e0a6      	b.n	8002294 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002146:	4b57      	ldr	r3, [pc, #348]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800214e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002152:	4b54      	ldr	r3, [pc, #336]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d02a      	beq.n	80021b4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800215e:	4b51      	ldr	r3, [pc, #324]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	099b      	lsrs	r3, r3, #6
 8002164:	2200      	movs	r2, #0
 8002166:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002168:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800216a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800216c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002170:	2100      	movs	r1, #0
 8002172:	4b4e      	ldr	r3, [pc, #312]	@ (80022ac <HAL_RCC_GetSysClockFreq+0x350>)
 8002174:	fb03 f201 	mul.w	r2, r3, r1
 8002178:	2300      	movs	r3, #0
 800217a:	fb00 f303 	mul.w	r3, r0, r3
 800217e:	4413      	add	r3, r2
 8002180:	4a4a      	ldr	r2, [pc, #296]	@ (80022ac <HAL_RCC_GetSysClockFreq+0x350>)
 8002182:	fba0 1202 	umull	r1, r2, r0, r2
 8002186:	677a      	str	r2, [r7, #116]	@ 0x74
 8002188:	460a      	mov	r2, r1
 800218a:	673a      	str	r2, [r7, #112]	@ 0x70
 800218c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800218e:	4413      	add	r3, r2
 8002190:	677b      	str	r3, [r7, #116]	@ 0x74
 8002192:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002196:	2200      	movs	r2, #0
 8002198:	633b      	str	r3, [r7, #48]	@ 0x30
 800219a:	637a      	str	r2, [r7, #52]	@ 0x34
 800219c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80021a0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80021a4:	f7fe f88c 	bl	80002c0 <__aeabi_uldivmod>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4613      	mov	r3, r2
 80021ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80021b2:	e05b      	b.n	800226c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021b4:	4b3b      	ldr	r3, [pc, #236]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0x348>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	099b      	lsrs	r3, r3, #6
 80021ba:	2200      	movs	r2, #0
 80021bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80021c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021c6:	623b      	str	r3, [r7, #32]
 80021c8:	2300      	movs	r3, #0
 80021ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80021cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80021d0:	4642      	mov	r2, r8
 80021d2:	464b      	mov	r3, r9
 80021d4:	f04f 0000 	mov.w	r0, #0
 80021d8:	f04f 0100 	mov.w	r1, #0
 80021dc:	0159      	lsls	r1, r3, #5
 80021de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021e2:	0150      	lsls	r0, r2, #5
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
 80021e8:	4641      	mov	r1, r8
 80021ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80021ee:	4649      	mov	r1, r9
 80021f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80021f4:	f04f 0200 	mov.w	r2, #0
 80021f8:	f04f 0300 	mov.w	r3, #0
 80021fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002200:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002204:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002208:	ebb2 040a 	subs.w	r4, r2, sl
 800220c:	eb63 050b 	sbc.w	r5, r3, fp
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	00eb      	lsls	r3, r5, #3
 800221a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800221e:	00e2      	lsls	r2, r4, #3
 8002220:	4614      	mov	r4, r2
 8002222:	461d      	mov	r5, r3
 8002224:	4643      	mov	r3, r8
 8002226:	18e3      	adds	r3, r4, r3
 8002228:	603b      	str	r3, [r7, #0]
 800222a:	464b      	mov	r3, r9
 800222c:	eb45 0303 	adc.w	r3, r5, r3
 8002230:	607b      	str	r3, [r7, #4]
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800223e:	4629      	mov	r1, r5
 8002240:	028b      	lsls	r3, r1, #10
 8002242:	4621      	mov	r1, r4
 8002244:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002248:	4621      	mov	r1, r4
 800224a:	028a      	lsls	r2, r1, #10
 800224c:	4610      	mov	r0, r2
 800224e:	4619      	mov	r1, r3
 8002250:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002254:	2200      	movs	r2, #0
 8002256:	61bb      	str	r3, [r7, #24]
 8002258:	61fa      	str	r2, [r7, #28]
 800225a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800225e:	f7fe f82f 	bl	80002c0 <__aeabi_uldivmod>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	4613      	mov	r3, r2
 8002268:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800226c:	4b0d      	ldr	r3, [pc, #52]	@ (80022a4 <HAL_RCC_GetSysClockFreq+0x348>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	0f1b      	lsrs	r3, r3, #28
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800227a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800227e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002282:	fbb2 f3f3 	udiv	r3, r2, r3
 8002286:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800228a:	e003      	b.n	8002294 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800228c:	4b06      	ldr	r3, [pc, #24]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x34c>)
 800228e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002292:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002294:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002298:	4618      	mov	r0, r3
 800229a:	3798      	adds	r7, #152	@ 0x98
 800229c:	46bd      	mov	sp, r7
 800229e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022a2:	bf00      	nop
 80022a4:	40023800 	.word	0x40023800
 80022a8:	00f42400 	.word	0x00f42400
 80022ac:	017d7840 	.word	0x017d7840

080022b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e28d      	b.n	80027de <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 8083 	beq.w	80023d6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80022d0:	4b94      	ldr	r3, [pc, #592]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 030c 	and.w	r3, r3, #12
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d019      	beq.n	8002310 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80022dc:	4b91      	ldr	r3, [pc, #580]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 030c 	and.w	r3, r3, #12
        || \
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d106      	bne.n	80022f6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80022e8:	4b8e      	ldr	r3, [pc, #568]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022f4:	d00c      	beq.n	8002310 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022f6:	4b8b      	ldr	r3, [pc, #556]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80022fe:	2b0c      	cmp	r3, #12
 8002300:	d112      	bne.n	8002328 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002302:	4b88      	ldr	r3, [pc, #544]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800230a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800230e:	d10b      	bne.n	8002328 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002310:	4b84      	ldr	r3, [pc, #528]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d05b      	beq.n	80023d4 <HAL_RCC_OscConfig+0x124>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d157      	bne.n	80023d4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e25a      	b.n	80027de <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002330:	d106      	bne.n	8002340 <HAL_RCC_OscConfig+0x90>
 8002332:	4b7c      	ldr	r3, [pc, #496]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a7b      	ldr	r2, [pc, #492]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 8002338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800233c:	6013      	str	r3, [r2, #0]
 800233e:	e01d      	b.n	800237c <HAL_RCC_OscConfig+0xcc>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002348:	d10c      	bne.n	8002364 <HAL_RCC_OscConfig+0xb4>
 800234a:	4b76      	ldr	r3, [pc, #472]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a75      	ldr	r2, [pc, #468]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 8002350:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	4b73      	ldr	r3, [pc, #460]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a72      	ldr	r2, [pc, #456]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 800235c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	e00b      	b.n	800237c <HAL_RCC_OscConfig+0xcc>
 8002364:	4b6f      	ldr	r3, [pc, #444]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a6e      	ldr	r2, [pc, #440]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 800236a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800236e:	6013      	str	r3, [r2, #0]
 8002370:	4b6c      	ldr	r3, [pc, #432]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a6b      	ldr	r2, [pc, #428]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 8002376:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800237a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d013      	beq.n	80023ac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002384:	f7fe fe02 	bl	8000f8c <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800238c:	f7fe fdfe 	bl	8000f8c <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b64      	cmp	r3, #100	@ 0x64
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e21f      	b.n	80027de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239e:	4b61      	ldr	r3, [pc, #388]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0xdc>
 80023aa:	e014      	b.n	80023d6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ac:	f7fe fdee 	bl	8000f8c <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023b4:	f7fe fdea 	bl	8000f8c <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b64      	cmp	r3, #100	@ 0x64
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e20b      	b.n	80027de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023c6:	4b57      	ldr	r3, [pc, #348]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f0      	bne.n	80023b4 <HAL_RCC_OscConfig+0x104>
 80023d2:	e000      	b.n	80023d6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d06f      	beq.n	80024c2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80023e2:	4b50      	ldr	r3, [pc, #320]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 030c 	and.w	r3, r3, #12
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d017      	beq.n	800241e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80023ee:	4b4d      	ldr	r3, [pc, #308]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 030c 	and.w	r3, r3, #12
        || \
 80023f6:	2b08      	cmp	r3, #8
 80023f8:	d105      	bne.n	8002406 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80023fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00b      	beq.n	800241e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002406:	4b47      	ldr	r3, [pc, #284]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800240e:	2b0c      	cmp	r3, #12
 8002410:	d11c      	bne.n	800244c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002412:	4b44      	ldr	r3, [pc, #272]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d116      	bne.n	800244c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241e:	4b41      	ldr	r3, [pc, #260]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <HAL_RCC_OscConfig+0x186>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d001      	beq.n	8002436 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e1d3      	b.n	80027de <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002436:	4b3b      	ldr	r3, [pc, #236]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4937      	ldr	r1, [pc, #220]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 8002446:	4313      	orrs	r3, r2
 8002448:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244a:	e03a      	b.n	80024c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d020      	beq.n	8002496 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002454:	4b34      	ldr	r3, [pc, #208]	@ (8002528 <HAL_RCC_OscConfig+0x278>)
 8002456:	2201      	movs	r2, #1
 8002458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245a:	f7fe fd97 	bl	8000f8c <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002462:	f7fe fd93 	bl	8000f8c <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e1b4      	b.n	80027de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002474:	4b2b      	ldr	r3, [pc, #172]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0f0      	beq.n	8002462 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002480:	4b28      	ldr	r3, [pc, #160]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	4925      	ldr	r1, [pc, #148]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 8002490:	4313      	orrs	r3, r2
 8002492:	600b      	str	r3, [r1, #0]
 8002494:	e015      	b.n	80024c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002496:	4b24      	ldr	r3, [pc, #144]	@ (8002528 <HAL_RCC_OscConfig+0x278>)
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249c:	f7fe fd76 	bl	8000f8c <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a4:	f7fe fd72 	bl	8000f8c <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e193      	b.n	80027de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d036      	beq.n	800253c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d016      	beq.n	8002504 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024d6:	4b15      	ldr	r3, [pc, #84]	@ (800252c <HAL_RCC_OscConfig+0x27c>)
 80024d8:	2201      	movs	r2, #1
 80024da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024dc:	f7fe fd56 	bl	8000f8c <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e4:	f7fe fd52 	bl	8000f8c <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e173      	b.n	80027de <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002524 <HAL_RCC_OscConfig+0x274>)
 80024f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f0      	beq.n	80024e4 <HAL_RCC_OscConfig+0x234>
 8002502:	e01b      	b.n	800253c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002504:	4b09      	ldr	r3, [pc, #36]	@ (800252c <HAL_RCC_OscConfig+0x27c>)
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250a:	f7fe fd3f 	bl	8000f8c <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002510:	e00e      	b.n	8002530 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002512:	f7fe fd3b 	bl	8000f8c <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d907      	bls.n	8002530 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e15c      	b.n	80027de <HAL_RCC_OscConfig+0x52e>
 8002524:	40023800 	.word	0x40023800
 8002528:	42470000 	.word	0x42470000
 800252c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002530:	4b8a      	ldr	r3, [pc, #552]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 8002532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1ea      	bne.n	8002512 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 8097 	beq.w	8002678 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800254a:	2300      	movs	r3, #0
 800254c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800254e:	4b83      	ldr	r3, [pc, #524]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10f      	bne.n	800257a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	4b7f      	ldr	r3, [pc, #508]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	4a7e      	ldr	r2, [pc, #504]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 8002564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002568:	6413      	str	r3, [r2, #64]	@ 0x40
 800256a:	4b7c      	ldr	r3, [pc, #496]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002576:	2301      	movs	r3, #1
 8002578:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257a:	4b79      	ldr	r3, [pc, #484]	@ (8002760 <HAL_RCC_OscConfig+0x4b0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002582:	2b00      	cmp	r3, #0
 8002584:	d118      	bne.n	80025b8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002586:	4b76      	ldr	r3, [pc, #472]	@ (8002760 <HAL_RCC_OscConfig+0x4b0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a75      	ldr	r2, [pc, #468]	@ (8002760 <HAL_RCC_OscConfig+0x4b0>)
 800258c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002592:	f7fe fcfb 	bl	8000f8c <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259a:	f7fe fcf7 	bl	8000f8c <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e118      	b.n	80027de <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ac:	4b6c      	ldr	r3, [pc, #432]	@ (8002760 <HAL_RCC_OscConfig+0x4b0>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d106      	bne.n	80025ce <HAL_RCC_OscConfig+0x31e>
 80025c0:	4b66      	ldr	r3, [pc, #408]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 80025c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c4:	4a65      	ldr	r2, [pc, #404]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80025cc:	e01c      	b.n	8002608 <HAL_RCC_OscConfig+0x358>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	2b05      	cmp	r3, #5
 80025d4:	d10c      	bne.n	80025f0 <HAL_RCC_OscConfig+0x340>
 80025d6:	4b61      	ldr	r3, [pc, #388]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 80025d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025da:	4a60      	ldr	r2, [pc, #384]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 80025dc:	f043 0304 	orr.w	r3, r3, #4
 80025e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80025e2:	4b5e      	ldr	r3, [pc, #376]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 80025e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e6:	4a5d      	ldr	r2, [pc, #372]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80025ee:	e00b      	b.n	8002608 <HAL_RCC_OscConfig+0x358>
 80025f0:	4b5a      	ldr	r3, [pc, #360]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 80025f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f4:	4a59      	ldr	r2, [pc, #356]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 80025f6:	f023 0301 	bic.w	r3, r3, #1
 80025fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80025fc:	4b57      	ldr	r3, [pc, #348]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 80025fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002600:	4a56      	ldr	r2, [pc, #344]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 8002602:	f023 0304 	bic.w	r3, r3, #4
 8002606:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d015      	beq.n	800263c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002610:	f7fe fcbc 	bl	8000f8c <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002616:	e00a      	b.n	800262e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002618:	f7fe fcb8 	bl	8000f8c <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002626:	4293      	cmp	r3, r2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e0d7      	b.n	80027de <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262e:	4b4b      	ldr	r3, [pc, #300]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 8002630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0ee      	beq.n	8002618 <HAL_RCC_OscConfig+0x368>
 800263a:	e014      	b.n	8002666 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263c:	f7fe fca6 	bl	8000f8c <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002642:	e00a      	b.n	800265a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002644:	f7fe fca2 	bl	8000f8c <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002652:	4293      	cmp	r3, r2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e0c1      	b.n	80027de <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800265a:	4b40      	ldr	r3, [pc, #256]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 800265c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1ee      	bne.n	8002644 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002666:	7dfb      	ldrb	r3, [r7, #23]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d105      	bne.n	8002678 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800266c:	4b3b      	ldr	r3, [pc, #236]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 800266e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002670:	4a3a      	ldr	r2, [pc, #232]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 8002672:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002676:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 80ad 	beq.w	80027dc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002682:	4b36      	ldr	r3, [pc, #216]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 030c 	and.w	r3, r3, #12
 800268a:	2b08      	cmp	r3, #8
 800268c:	d060      	beq.n	8002750 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	2b02      	cmp	r3, #2
 8002694:	d145      	bne.n	8002722 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002696:	4b33      	ldr	r3, [pc, #204]	@ (8002764 <HAL_RCC_OscConfig+0x4b4>)
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269c:	f7fe fc76 	bl	8000f8c <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a4:	f7fe fc72 	bl	8000f8c <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e093      	b.n	80027de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b6:	4b29      	ldr	r3, [pc, #164]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f0      	bne.n	80026a4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69da      	ldr	r2, [r3, #28]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	431a      	orrs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d0:	019b      	lsls	r3, r3, #6
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d8:	085b      	lsrs	r3, r3, #1
 80026da:	3b01      	subs	r3, #1
 80026dc:	041b      	lsls	r3, r3, #16
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e4:	061b      	lsls	r3, r3, #24
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ec:	071b      	lsls	r3, r3, #28
 80026ee:	491b      	ldr	r1, [pc, #108]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002764 <HAL_RCC_OscConfig+0x4b4>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fa:	f7fe fc47 	bl	8000f8c <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002702:	f7fe fc43 	bl	8000f8c <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e064      	b.n	80027de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002714:	4b11      	ldr	r3, [pc, #68]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0f0      	beq.n	8002702 <HAL_RCC_OscConfig+0x452>
 8002720:	e05c      	b.n	80027dc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002722:	4b10      	ldr	r3, [pc, #64]	@ (8002764 <HAL_RCC_OscConfig+0x4b4>)
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002728:	f7fe fc30 	bl	8000f8c <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002730:	f7fe fc2c 	bl	8000f8c <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e04d      	b.n	80027de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002742:	4b06      	ldr	r3, [pc, #24]	@ (800275c <HAL_RCC_OscConfig+0x4ac>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x480>
 800274e:	e045      	b.n	80027dc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d107      	bne.n	8002768 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e040      	b.n	80027de <HAL_RCC_OscConfig+0x52e>
 800275c:	40023800 	.word	0x40023800
 8002760:	40007000 	.word	0x40007000
 8002764:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002768:	4b1f      	ldr	r3, [pc, #124]	@ (80027e8 <HAL_RCC_OscConfig+0x538>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d030      	beq.n	80027d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002780:	429a      	cmp	r2, r3
 8002782:	d129      	bne.n	80027d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800278e:	429a      	cmp	r2, r3
 8002790:	d122      	bne.n	80027d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002798:	4013      	ands	r3, r2
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800279e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d119      	bne.n	80027d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ae:	085b      	lsrs	r3, r3, #1
 80027b0:	3b01      	subs	r3, #1
 80027b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d10f      	bne.n	80027d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d107      	bne.n	80027d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d001      	beq.n	80027dc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e000      	b.n	80027de <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3718      	adds	r7, #24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800

080027ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e07b      	b.n	80028f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002802:	2b00      	cmp	r3, #0
 8002804:	d108      	bne.n	8002818 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800280e:	d009      	beq.n	8002824 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	61da      	str	r2, [r3, #28]
 8002816:	e005      	b.n	8002824 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d106      	bne.n	8002844 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7fe f97a 	bl	8000b38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2202      	movs	r2, #2
 8002848:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800285a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	431a      	orrs	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028a8:	ea42 0103 	orr.w	r1, r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	0c1b      	lsrs	r3, r3, #16
 80028c2:	f003 0104 	and.w	r1, r3, #4
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ca:	f003 0210 	and.w	r2, r3, #16
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	69da      	ldr	r2, [r3, #28]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
	...

08002900 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	4613      	mov	r3, r2
 800290c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b01      	cmp	r3, #1
 8002918:	d001      	beq.n	800291e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800291a:	2302      	movs	r3, #2
 800291c:	e097      	b.n	8002a4e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d002      	beq.n	800292a <HAL_SPI_Transmit_DMA+0x2a>
 8002924:	88fb      	ldrh	r3, [r7, #6]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e08f      	b.n	8002a4e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002934:	2b01      	cmp	r3, #1
 8002936:	d101      	bne.n	800293c <HAL_SPI_Transmit_DMA+0x3c>
 8002938:	2302      	movs	r3, #2
 800293a:	e088      	b.n	8002a4e <HAL_SPI_Transmit_DMA+0x14e>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2203      	movs	r2, #3
 8002948:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	88fa      	ldrh	r2, [r7, #6]
 800295c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	88fa      	ldrh	r2, [r7, #6]
 8002962:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800298a:	d10f      	bne.n	80029ac <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800299a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029b0:	4a29      	ldr	r2, [pc, #164]	@ (8002a58 <HAL_SPI_Transmit_DMA+0x158>)
 80029b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029b8:	4a28      	ldr	r2, [pc, #160]	@ (8002a5c <HAL_SPI_Transmit_DMA+0x15c>)
 80029ba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029c0:	4a27      	ldr	r2, [pc, #156]	@ (8002a60 <HAL_SPI_Transmit_DMA+0x160>)
 80029c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029c8:	2200      	movs	r2, #0
 80029ca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d4:	4619      	mov	r1, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	330c      	adds	r3, #12
 80029dc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029e2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80029e4:	f7fe fc9e 	bl	8001324 <HAL_DMA_Start_IT>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00b      	beq.n	8002a06 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f2:	f043 0210 	orr.w	r2, r3, #16
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e023      	b.n	8002a4e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a10:	2b40      	cmp	r3, #64	@ 0x40
 8002a12:	d007      	beq.n	8002a24 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a22:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0220 	orr.w	r2, r2, #32
 8002a3a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0202 	orr.w	r2, r2, #2
 8002a4a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	08002d1d 	.word	0x08002d1d
 8002a5c:	08002c75 	.word	0x08002c75
 8002a60:	08002d39 	.word	0x08002d39

08002a64 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10e      	bne.n	8002aa4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d009      	beq.n	8002aa4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d004      	beq.n	8002aa4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	4798      	blx	r3
    return;
 8002aa2:	e0ce      	b.n	8002c42 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d009      	beq.n	8002ac2 <HAL_SPI_IRQHandler+0x5e>
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d004      	beq.n	8002ac2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	4798      	blx	r3
    return;
 8002ac0:	e0bf      	b.n	8002c42 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	f003 0320 	and.w	r3, r3, #32
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10a      	bne.n	8002ae2 <HAL_SPI_IRQHandler+0x7e>
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d105      	bne.n	8002ae2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 80b0 	beq.w	8002c42 <HAL_SPI_IRQHandler+0x1de>
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	f003 0320 	and.w	r3, r3, #32
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 80aa 	beq.w	8002c42 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d023      	beq.n	8002b40 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b03      	cmp	r3, #3
 8002b02:	d011      	beq.n	8002b28 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b08:	f043 0204 	orr.w	r2, r3, #4
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	e00b      	b.n	8002b40 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b28:	2300      	movs	r3, #0
 8002b2a:	613b      	str	r3, [r7, #16]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	613b      	str	r3, [r7, #16]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	693b      	ldr	r3, [r7, #16]
        return;
 8002b3e:	e080      	b.n	8002c42 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	f003 0320 	and.w	r3, r3, #32
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d014      	beq.n	8002b74 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b4e:	f043 0201 	orr.w	r2, r3, #1
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002b56:	2300      	movs	r3, #0
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00c      	beq.n	8002b98 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b82:	f043 0208 	orr.w	r2, r3, #8
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	60bb      	str	r3, [r7, #8]
 8002b96:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d04f      	beq.n	8002c40 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002bae:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d104      	bne.n	8002bcc <HAL_SPI_IRQHandler+0x168>
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d034      	beq.n	8002c36 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0203 	bic.w	r2, r2, #3
 8002bda:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d011      	beq.n	8002c08 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be8:	4a17      	ldr	r2, [pc, #92]	@ (8002c48 <HAL_SPI_IRQHandler+0x1e4>)
 8002bea:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7fe fc5f 	bl	80014b4 <HAL_DMA_Abort_IT>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c00:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d016      	beq.n	8002c3e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c14:	4a0c      	ldr	r2, [pc, #48]	@ (8002c48 <HAL_SPI_IRQHandler+0x1e4>)
 8002c16:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7fe fc49 	bl	80014b4 <HAL_DMA_Abort_IT>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00a      	beq.n	8002c3e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c2c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8002c34:	e003      	b.n	8002c3e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f812 	bl	8002c60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002c3c:	e000      	b.n	8002c40 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002c3e:	bf00      	nop
    return;
 8002c40:	bf00      	nop
  }
}
 8002c42:	3720      	adds	r7, #32
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	08002d79 	.word	0x08002d79

08002c4c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c80:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c82:	f7fe f983 	bl	8000f8c <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c96:	d03b      	beq.n	8002d10 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0220 	bic.w	r2, r2, #32
 8002ca6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0202 	bic.w	r2, r2, #2
 8002cb6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	2164      	movs	r1, #100	@ 0x64
 8002cbc:	6978      	ldr	r0, [r7, #20]
 8002cbe:	f000 f8f7 	bl	8002eb0 <SPI_EndRxTxTransaction>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ccc:	f043 0220 	orr.w	r2, r3, #32
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10a      	bne.n	8002cf2 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d003      	beq.n	8002d10 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002d08:	6978      	ldr	r0, [r7, #20]
 8002d0a:	f7ff ffa9 	bl	8002c60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002d0e:	e002      	b.n	8002d16 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002d10:	6978      	ldr	r0, [r7, #20]
 8002d12:	f7fd fe17 	bl	8000944 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d28:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f7ff ff8e 	bl	8002c4c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d30:	bf00      	nop
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d44:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0203 	bic.w	r2, r2, #3
 8002d54:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d5a:	f043 0210 	orr.w	r2, r3, #16
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f7ff ff78 	bl	8002c60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d70:	bf00      	nop
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d84:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f7ff ff64 	bl	8002c60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d98:	bf00      	nop
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b088      	sub	sp, #32
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	603b      	str	r3, [r7, #0]
 8002dac:	4613      	mov	r3, r2
 8002dae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002db0:	f7fe f8ec 	bl	8000f8c <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002db8:	1a9b      	subs	r3, r3, r2
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002dc0:	f7fe f8e4 	bl	8000f8c <HAL_GetTick>
 8002dc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002dc6:	4b39      	ldr	r3, [pc, #228]	@ (8002eac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	015b      	lsls	r3, r3, #5
 8002dcc:	0d1b      	lsrs	r3, r3, #20
 8002dce:	69fa      	ldr	r2, [r7, #28]
 8002dd0:	fb02 f303 	mul.w	r3, r2, r3
 8002dd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dd6:	e054      	b.n	8002e82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002dde:	d050      	beq.n	8002e82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002de0:	f7fe f8d4 	bl	8000f8c <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	69fa      	ldr	r2, [r7, #28]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d902      	bls.n	8002df6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d13d      	bne.n	8002e72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002e04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e0e:	d111      	bne.n	8002e34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e18:	d004      	beq.n	8002e24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e22:	d107      	bne.n	8002e34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e3c:	d10f      	bne.n	8002e5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e017      	b.n	8002ea2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	bf0c      	ite	eq
 8002e92:	2301      	moveq	r3, #1
 8002e94:	2300      	movne	r3, #0
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	461a      	mov	r2, r3
 8002e9a:	79fb      	ldrb	r3, [r7, #7]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d19b      	bne.n	8002dd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3720      	adds	r7, #32
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	2000000c 	.word	0x2000000c

08002eb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af02      	add	r7, sp, #8
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	2102      	movs	r1, #2
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f7ff ff6a 	bl	8002da0 <SPI_WaitFlagStateUntilTimeout>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d007      	beq.n	8002ee2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed6:	f043 0220 	orr.w	r2, r3, #32
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e032      	b.n	8002f48 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8002f50 <SPI_EndRxTxTransaction+0xa0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a1b      	ldr	r2, [pc, #108]	@ (8002f54 <SPI_EndRxTxTransaction+0xa4>)
 8002ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8002eec:	0d5b      	lsrs	r3, r3, #21
 8002eee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002ef2:	fb02 f303 	mul.w	r3, r2, r3
 8002ef6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f00:	d112      	bne.n	8002f28 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2180      	movs	r1, #128	@ 0x80
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f7ff ff47 	bl	8002da0 <SPI_WaitFlagStateUntilTimeout>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d016      	beq.n	8002f46 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f1c:	f043 0220 	orr.w	r2, r3, #32
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e00f      	b.n	8002f48 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00a      	beq.n	8002f44 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	3b01      	subs	r3, #1
 8002f32:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f3e:	2b80      	cmp	r3, #128	@ 0x80
 8002f40:	d0f2      	beq.n	8002f28 <SPI_EndRxTxTransaction+0x78>
 8002f42:	e000      	b.n	8002f46 <SPI_EndRxTxTransaction+0x96>
        break;
 8002f44:	bf00      	nop
  }

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	2000000c 	.word	0x2000000c
 8002f54:	165e9f81 	.word	0x165e9f81

08002f58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e041      	b.n	8002fee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d106      	bne.n	8002f84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7fd fe5c 	bl	8000c3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3304      	adds	r3, #4
 8002f94:	4619      	mov	r1, r3
 8002f96:	4610      	mov	r0, r2
 8002f98:	f000 f9b6 	bl	8003308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b01      	cmp	r3, #1
 800300a:	d001      	beq.n	8003010 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e04e      	b.n	80030ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2202      	movs	r2, #2
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0201 	orr.w	r2, r2, #1
 8003026:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a23      	ldr	r2, [pc, #140]	@ (80030bc <HAL_TIM_Base_Start_IT+0xc4>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d022      	beq.n	8003078 <HAL_TIM_Base_Start_IT+0x80>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800303a:	d01d      	beq.n	8003078 <HAL_TIM_Base_Start_IT+0x80>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a1f      	ldr	r2, [pc, #124]	@ (80030c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d018      	beq.n	8003078 <HAL_TIM_Base_Start_IT+0x80>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a1e      	ldr	r2, [pc, #120]	@ (80030c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d013      	beq.n	8003078 <HAL_TIM_Base_Start_IT+0x80>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a1c      	ldr	r2, [pc, #112]	@ (80030c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d00e      	beq.n	8003078 <HAL_TIM_Base_Start_IT+0x80>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a1b      	ldr	r2, [pc, #108]	@ (80030cc <HAL_TIM_Base_Start_IT+0xd4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d009      	beq.n	8003078 <HAL_TIM_Base_Start_IT+0x80>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a19      	ldr	r2, [pc, #100]	@ (80030d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d004      	beq.n	8003078 <HAL_TIM_Base_Start_IT+0x80>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a18      	ldr	r2, [pc, #96]	@ (80030d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d111      	bne.n	800309c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2b06      	cmp	r3, #6
 8003088:	d010      	beq.n	80030ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f042 0201 	orr.w	r2, r2, #1
 8003098:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800309a:	e007      	b.n	80030ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0201 	orr.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40010000 	.word	0x40010000
 80030c0:	40000400 	.word	0x40000400
 80030c4:	40000800 	.word	0x40000800
 80030c8:	40000c00 	.word	0x40000c00
 80030cc:	40010400 	.word	0x40010400
 80030d0:	40014000 	.word	0x40014000
 80030d4:	40001800 	.word	0x40001800

080030d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d020      	beq.n	800313c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d01b      	beq.n	800313c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f06f 0202 	mvn.w	r2, #2
 800310c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f8d2 	bl	80032cc <HAL_TIM_IC_CaptureCallback>
 8003128:	e005      	b.n	8003136 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f8c4 	bl	80032b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 f8d5 	bl	80032e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	2b00      	cmp	r3, #0
 8003144:	d020      	beq.n	8003188 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b00      	cmp	r3, #0
 800314e:	d01b      	beq.n	8003188 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f06f 0204 	mvn.w	r2, #4
 8003158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2202      	movs	r2, #2
 800315e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f8ac 	bl	80032cc <HAL_TIM_IC_CaptureCallback>
 8003174:	e005      	b.n	8003182 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f89e 	bl	80032b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 f8af 	bl	80032e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b00      	cmp	r3, #0
 8003190:	d020      	beq.n	80031d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b00      	cmp	r3, #0
 800319a:	d01b      	beq.n	80031d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f06f 0208 	mvn.w	r2, #8
 80031a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2204      	movs	r2, #4
 80031aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f886 	bl	80032cc <HAL_TIM_IC_CaptureCallback>
 80031c0:	e005      	b.n	80031ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f878 	bl	80032b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f889 	bl	80032e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f003 0310 	and.w	r3, r3, #16
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d020      	beq.n	8003220 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f003 0310 	and.w	r3, r3, #16
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d01b      	beq.n	8003220 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f06f 0210 	mvn.w	r2, #16
 80031f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2208      	movs	r2, #8
 80031f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f860 	bl	80032cc <HAL_TIM_IC_CaptureCallback>
 800320c:	e005      	b.n	800321a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f852 	bl	80032b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f863 	bl	80032e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00c      	beq.n	8003244 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	d007      	beq.n	8003244 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f06f 0201 	mvn.w	r2, #1
 800323c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7fd fb3a 	bl	80008b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00c      	beq.n	8003268 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003254:	2b00      	cmp	r3, #0
 8003256:	d007      	beq.n	8003268 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f906 	bl	8003474 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00c      	beq.n	800328c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003278:	2b00      	cmp	r3, #0
 800327a:	d007      	beq.n	800328c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f834 	bl	80032f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00c      	beq.n	80032b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f003 0320 	and.w	r3, r3, #32
 800329c:	2b00      	cmp	r3, #0
 800329e:	d007      	beq.n	80032b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f06f 0220 	mvn.w	r2, #32
 80032a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f8d8 	bl	8003460 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032b0:	bf00      	nop
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a46      	ldr	r2, [pc, #280]	@ (8003434 <TIM_Base_SetConfig+0x12c>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d013      	beq.n	8003348 <TIM_Base_SetConfig+0x40>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003326:	d00f      	beq.n	8003348 <TIM_Base_SetConfig+0x40>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a43      	ldr	r2, [pc, #268]	@ (8003438 <TIM_Base_SetConfig+0x130>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d00b      	beq.n	8003348 <TIM_Base_SetConfig+0x40>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a42      	ldr	r2, [pc, #264]	@ (800343c <TIM_Base_SetConfig+0x134>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d007      	beq.n	8003348 <TIM_Base_SetConfig+0x40>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a41      	ldr	r2, [pc, #260]	@ (8003440 <TIM_Base_SetConfig+0x138>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d003      	beq.n	8003348 <TIM_Base_SetConfig+0x40>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a40      	ldr	r2, [pc, #256]	@ (8003444 <TIM_Base_SetConfig+0x13c>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d108      	bne.n	800335a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800334e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	4313      	orrs	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a35      	ldr	r2, [pc, #212]	@ (8003434 <TIM_Base_SetConfig+0x12c>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d02b      	beq.n	80033ba <TIM_Base_SetConfig+0xb2>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003368:	d027      	beq.n	80033ba <TIM_Base_SetConfig+0xb2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a32      	ldr	r2, [pc, #200]	@ (8003438 <TIM_Base_SetConfig+0x130>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d023      	beq.n	80033ba <TIM_Base_SetConfig+0xb2>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a31      	ldr	r2, [pc, #196]	@ (800343c <TIM_Base_SetConfig+0x134>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d01f      	beq.n	80033ba <TIM_Base_SetConfig+0xb2>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a30      	ldr	r2, [pc, #192]	@ (8003440 <TIM_Base_SetConfig+0x138>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d01b      	beq.n	80033ba <TIM_Base_SetConfig+0xb2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a2f      	ldr	r2, [pc, #188]	@ (8003444 <TIM_Base_SetConfig+0x13c>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d017      	beq.n	80033ba <TIM_Base_SetConfig+0xb2>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a2e      	ldr	r2, [pc, #184]	@ (8003448 <TIM_Base_SetConfig+0x140>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d013      	beq.n	80033ba <TIM_Base_SetConfig+0xb2>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a2d      	ldr	r2, [pc, #180]	@ (800344c <TIM_Base_SetConfig+0x144>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d00f      	beq.n	80033ba <TIM_Base_SetConfig+0xb2>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a2c      	ldr	r2, [pc, #176]	@ (8003450 <TIM_Base_SetConfig+0x148>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d00b      	beq.n	80033ba <TIM_Base_SetConfig+0xb2>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a2b      	ldr	r2, [pc, #172]	@ (8003454 <TIM_Base_SetConfig+0x14c>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d007      	beq.n	80033ba <TIM_Base_SetConfig+0xb2>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a2a      	ldr	r2, [pc, #168]	@ (8003458 <TIM_Base_SetConfig+0x150>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d003      	beq.n	80033ba <TIM_Base_SetConfig+0xb2>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a29      	ldr	r2, [pc, #164]	@ (800345c <TIM_Base_SetConfig+0x154>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d108      	bne.n	80033cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a10      	ldr	r2, [pc, #64]	@ (8003434 <TIM_Base_SetConfig+0x12c>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d003      	beq.n	8003400 <TIM_Base_SetConfig+0xf8>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a12      	ldr	r2, [pc, #72]	@ (8003444 <TIM_Base_SetConfig+0x13c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d103      	bne.n	8003408 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	691a      	ldr	r2, [r3, #16]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b01      	cmp	r3, #1
 8003418:	d105      	bne.n	8003426 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	f023 0201 	bic.w	r2, r3, #1
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	611a      	str	r2, [r3, #16]
  }
}
 8003426:	bf00      	nop
 8003428:	3714      	adds	r7, #20
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	40010000 	.word	0x40010000
 8003438:	40000400 	.word	0x40000400
 800343c:	40000800 	.word	0x40000800
 8003440:	40000c00 	.word	0x40000c00
 8003444:	40010400 	.word	0x40010400
 8003448:	40014000 	.word	0x40014000
 800344c:	40014400 	.word	0x40014400
 8003450:	40014800 	.word	0x40014800
 8003454:	40001800 	.word	0x40001800
 8003458:	40001c00 	.word	0x40001c00
 800345c:	40002000 	.word	0x40002000

08003460 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e042      	b.n	8003520 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d106      	bne.n	80034b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7fd fbec 	bl	8000c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2224      	movs	r2, #36	@ 0x24
 80034b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 fd11 	bl	8003ef4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	691a      	ldr	r2, [r3, #16]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695a      	ldr	r2, [r3, #20]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68da      	ldr	r2, [r3, #12]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003500:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	4613      	mov	r3, r2
 8003534:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b20      	cmp	r3, #32
 8003540:	d121      	bne.n	8003586 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d002      	beq.n	800354e <HAL_UART_Transmit_IT+0x26>
 8003548:	88fb      	ldrh	r3, [r7, #6]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e01a      	b.n	8003588 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	88fa      	ldrh	r2, [r7, #6]
 800355c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	88fa      	ldrh	r2, [r7, #6]
 8003562:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2221      	movs	r2, #33	@ 0x21
 800356e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003580:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003582:	2300      	movs	r3, #0
 8003584:	e000      	b.n	8003588 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003586:	2302      	movs	r3, #2
  }
}
 8003588:	4618      	mov	r0, r3
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	4613      	mov	r3, r2
 80035a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b20      	cmp	r3, #32
 80035ac:	d112      	bne.n	80035d4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d002      	beq.n	80035ba <HAL_UART_Receive_IT+0x26>
 80035b4:	88fb      	ldrh	r3, [r7, #6]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e00b      	b.n	80035d6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80035c4:	88fb      	ldrh	r3, [r7, #6]
 80035c6:	461a      	mov	r2, r3
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 faba 	bl	8003b44 <UART_Start_Receive_IT>
 80035d0:	4603      	mov	r3, r0
 80035d2:	e000      	b.n	80035d6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80035d4:	2302      	movs	r3, #2
  }
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b0ba      	sub	sp, #232	@ 0xe8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003606:	2300      	movs	r3, #0
 8003608:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800360c:	2300      	movs	r3, #0
 800360e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003616:	f003 030f 	and.w	r3, r3, #15
 800361a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800361e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10f      	bne.n	8003646 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	2b00      	cmp	r3, #0
 8003630:	d009      	beq.n	8003646 <HAL_UART_IRQHandler+0x66>
 8003632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003636:	f003 0320 	and.w	r3, r3, #32
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 fb99 	bl	8003d76 <UART_Receive_IT>
      return;
 8003644:	e25b      	b.n	8003afe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003646:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 80de 	beq.w	800380c <HAL_UART_IRQHandler+0x22c>
 8003650:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b00      	cmp	r3, #0
 800365a:	d106      	bne.n	800366a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800365c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003660:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 80d1 	beq.w	800380c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800366a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00b      	beq.n	800368e <HAL_UART_IRQHandler+0xae>
 8003676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800367a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800367e:	2b00      	cmp	r3, #0
 8003680:	d005      	beq.n	800368e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003686:	f043 0201 	orr.w	r2, r3, #1
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800368e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003692:	f003 0304 	and.w	r3, r3, #4
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00b      	beq.n	80036b2 <HAL_UART_IRQHandler+0xd2>
 800369a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d005      	beq.n	80036b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036aa:	f043 0202 	orr.w	r2, r3, #2
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00b      	beq.n	80036d6 <HAL_UART_IRQHandler+0xf6>
 80036be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d005      	beq.n	80036d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ce:	f043 0204 	orr.w	r2, r3, #4
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80036d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d011      	beq.n	8003706 <HAL_UART_IRQHandler+0x126>
 80036e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036e6:	f003 0320 	and.w	r3, r3, #32
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d105      	bne.n	80036fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80036ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d005      	beq.n	8003706 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036fe:	f043 0208 	orr.w	r2, r3, #8
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 81f2 	beq.w	8003af4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003714:	f003 0320 	and.w	r3, r3, #32
 8003718:	2b00      	cmp	r3, #0
 800371a:	d008      	beq.n	800372e <HAL_UART_IRQHandler+0x14e>
 800371c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003720:	f003 0320 	and.w	r3, r3, #32
 8003724:	2b00      	cmp	r3, #0
 8003726:	d002      	beq.n	800372e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 fb24 	bl	8003d76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003738:	2b40      	cmp	r3, #64	@ 0x40
 800373a:	bf0c      	ite	eq
 800373c:	2301      	moveq	r3, #1
 800373e:	2300      	movne	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b00      	cmp	r3, #0
 8003750:	d103      	bne.n	800375a <HAL_UART_IRQHandler+0x17a>
 8003752:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003756:	2b00      	cmp	r3, #0
 8003758:	d04f      	beq.n	80037fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 fa2c 	bl	8003bb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800376a:	2b40      	cmp	r3, #64	@ 0x40
 800376c:	d141      	bne.n	80037f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	3314      	adds	r3, #20
 8003774:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003778:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800377c:	e853 3f00 	ldrex	r3, [r3]
 8003780:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003784:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003788:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800378c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3314      	adds	r3, #20
 8003796:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800379a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800379e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80037a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80037aa:	e841 2300 	strex	r3, r2, [r1]
 80037ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80037b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1d9      	bne.n	800376e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d013      	beq.n	80037ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c6:	4a7e      	ldr	r2, [pc, #504]	@ (80039c0 <HAL_UART_IRQHandler+0x3e0>)
 80037c8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fd fe70 	bl	80014b4 <HAL_DMA_Abort_IT>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d016      	beq.n	8003808 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80037e4:	4610      	mov	r0, r2
 80037e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e8:	e00e      	b.n	8003808 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f994 	bl	8003b18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f0:	e00a      	b.n	8003808 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f990 	bl	8003b18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f8:	e006      	b.n	8003808 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f98c 	bl	8003b18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003806:	e175      	b.n	8003af4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003808:	bf00      	nop
    return;
 800380a:	e173      	b.n	8003af4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003810:	2b01      	cmp	r3, #1
 8003812:	f040 814f 	bne.w	8003ab4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800381a:	f003 0310 	and.w	r3, r3, #16
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 8148 	beq.w	8003ab4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003828:	f003 0310 	and.w	r3, r3, #16
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 8141 	beq.w	8003ab4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003832:	2300      	movs	r3, #0
 8003834:	60bb      	str	r3, [r7, #8]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	60bb      	str	r3, [r7, #8]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	60bb      	str	r3, [r7, #8]
 8003846:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003852:	2b40      	cmp	r3, #64	@ 0x40
 8003854:	f040 80b6 	bne.w	80039c4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003864:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 8145 	beq.w	8003af8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003872:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003876:	429a      	cmp	r2, r3
 8003878:	f080 813e 	bcs.w	8003af8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003882:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800388e:	f000 8088 	beq.w	80039a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	330c      	adds	r3, #12
 8003898:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038a0:	e853 3f00 	ldrex	r3, [r3]
 80038a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80038a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	330c      	adds	r3, #12
 80038ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80038be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80038c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80038ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80038ce:	e841 2300 	strex	r3, r2, [r1]
 80038d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80038d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1d9      	bne.n	8003892 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	3314      	adds	r3, #20
 80038e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038e8:	e853 3f00 	ldrex	r3, [r3]
 80038ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80038ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038f0:	f023 0301 	bic.w	r3, r3, #1
 80038f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3314      	adds	r3, #20
 80038fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003902:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003906:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003908:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800390a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800390e:	e841 2300 	strex	r3, r2, [r1]
 8003912:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003914:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1e1      	bne.n	80038de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	3314      	adds	r3, #20
 8003920:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003922:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003924:	e853 3f00 	ldrex	r3, [r3]
 8003928:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800392a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800392c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003930:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3314      	adds	r3, #20
 800393a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800393e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003940:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003942:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003944:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003946:	e841 2300 	strex	r3, r2, [r1]
 800394a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800394c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1e3      	bne.n	800391a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2220      	movs	r2, #32
 8003956:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	330c      	adds	r3, #12
 8003966:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003968:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800396a:	e853 3f00 	ldrex	r3, [r3]
 800396e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003970:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003972:	f023 0310 	bic.w	r3, r3, #16
 8003976:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	330c      	adds	r3, #12
 8003980:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003984:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003986:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003988:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800398a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800398c:	e841 2300 	strex	r3, r2, [r1]
 8003990:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003992:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1e3      	bne.n	8003960 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800399c:	4618      	mov	r0, r3
 800399e:	f7fd fd19 	bl	80013d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2202      	movs	r2, #2
 80039a6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	4619      	mov	r1, r3
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f8b7 	bl	8003b2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039be:	e09b      	b.n	8003af8 <HAL_UART_IRQHandler+0x518>
 80039c0:	08003c7f 	.word	0x08003c7f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 808e 	beq.w	8003afc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80039e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 8089 	beq.w	8003afc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	330c      	adds	r3, #12
 80039f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039f4:	e853 3f00 	ldrex	r3, [r3]
 80039f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80039fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	330c      	adds	r3, #12
 8003a0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003a0e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a10:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a16:	e841 2300 	strex	r3, r2, [r1]
 8003a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1e3      	bne.n	80039ea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	3314      	adds	r3, #20
 8003a28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2c:	e853 3f00 	ldrex	r3, [r3]
 8003a30:	623b      	str	r3, [r7, #32]
   return(result);
 8003a32:	6a3b      	ldr	r3, [r7, #32]
 8003a34:	f023 0301 	bic.w	r3, r3, #1
 8003a38:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	3314      	adds	r3, #20
 8003a42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003a46:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a4e:	e841 2300 	strex	r3, r2, [r1]
 8003a52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1e3      	bne.n	8003a22 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	330c      	adds	r3, #12
 8003a6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	e853 3f00 	ldrex	r3, [r3]
 8003a76:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f023 0310 	bic.w	r3, r3, #16
 8003a7e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	330c      	adds	r3, #12
 8003a88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003a8c:	61fa      	str	r2, [r7, #28]
 8003a8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a90:	69b9      	ldr	r1, [r7, #24]
 8003a92:	69fa      	ldr	r2, [r7, #28]
 8003a94:	e841 2300 	strex	r3, r2, [r1]
 8003a98:	617b      	str	r3, [r7, #20]
   return(result);
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1e3      	bne.n	8003a68 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003aa6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003aaa:	4619      	mov	r1, r3
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f83d 	bl	8003b2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ab2:	e023      	b.n	8003afc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ab8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d009      	beq.n	8003ad4 <HAL_UART_IRQHandler+0x4f4>
 8003ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ac4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f8ea 	bl	8003ca6 <UART_Transmit_IT>
    return;
 8003ad2:	e014      	b.n	8003afe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00e      	beq.n	8003afe <HAL_UART_IRQHandler+0x51e>
 8003ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d008      	beq.n	8003afe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f92a 	bl	8003d46 <UART_EndTransmit_IT>
    return;
 8003af2:	e004      	b.n	8003afe <HAL_UART_IRQHandler+0x51e>
    return;
 8003af4:	bf00      	nop
 8003af6:	e002      	b.n	8003afe <HAL_UART_IRQHandler+0x51e>
      return;
 8003af8:	bf00      	nop
 8003afa:	e000      	b.n	8003afe <HAL_UART_IRQHandler+0x51e>
      return;
 8003afc:	bf00      	nop
  }
}
 8003afe:	37e8      	adds	r7, #232	@ 0xe8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	460b      	mov	r3, r1
 8003b36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	88fa      	ldrh	r2, [r7, #6]
 8003b5c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	88fa      	ldrh	r2, [r7, #6]
 8003b62:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2222      	movs	r2, #34	@ 0x22
 8003b6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d007      	beq.n	8003b8a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68da      	ldr	r2, [r3, #12]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b88:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	695a      	ldr	r2, [r3, #20]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f042 0201 	orr.w	r2, r2, #1
 8003b98:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68da      	ldr	r2, [r3, #12]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f042 0220 	orr.w	r2, r2, #32
 8003ba8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b095      	sub	sp, #84	@ 0x54
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	330c      	adds	r3, #12
 8003bc6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bca:	e853 3f00 	ldrex	r3, [r3]
 8003bce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	330c      	adds	r3, #12
 8003bde:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003be0:	643a      	str	r2, [r7, #64]	@ 0x40
 8003be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003be6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003be8:	e841 2300 	strex	r3, r2, [r1]
 8003bec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1e5      	bne.n	8003bc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	3314      	adds	r3, #20
 8003bfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	e853 3f00 	ldrex	r3, [r3]
 8003c02:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	f023 0301 	bic.w	r3, r3, #1
 8003c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3314      	adds	r3, #20
 8003c12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c1c:	e841 2300 	strex	r3, r2, [r1]
 8003c20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1e5      	bne.n	8003bf4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d119      	bne.n	8003c64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	330c      	adds	r3, #12
 8003c36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	e853 3f00 	ldrex	r3, [r3]
 8003c3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f023 0310 	bic.w	r3, r3, #16
 8003c46:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	330c      	adds	r3, #12
 8003c4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c50:	61ba      	str	r2, [r7, #24]
 8003c52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c54:	6979      	ldr	r1, [r7, #20]
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	e841 2300 	strex	r3, r2, [r1]
 8003c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1e5      	bne.n	8003c30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c72:	bf00      	nop
 8003c74:	3754      	adds	r7, #84	@ 0x54
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f7ff ff3d 	bl	8003b18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c9e:	bf00      	nop
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b085      	sub	sp, #20
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b21      	cmp	r3, #33	@ 0x21
 8003cb8:	d13e      	bne.n	8003d38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cc2:	d114      	bne.n	8003cee <UART_Transmit_IT+0x48>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d110      	bne.n	8003cee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	881b      	ldrh	r3, [r3, #0]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ce0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	1c9a      	adds	r2, r3, #2
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	621a      	str	r2, [r3, #32]
 8003cec:	e008      	b.n	8003d00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	1c59      	adds	r1, r3, #1
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6211      	str	r1, [r2, #32]
 8003cf8:	781a      	ldrb	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10f      	bne.n	8003d34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68da      	ldr	r2, [r3, #12]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d34:	2300      	movs	r3, #0
 8003d36:	e000      	b.n	8003d3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d38:	2302      	movs	r3, #2
  }
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b082      	sub	sp, #8
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68da      	ldr	r2, [r3, #12]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2220      	movs	r2, #32
 8003d62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7ff fecc 	bl	8003b04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b08c      	sub	sp, #48	@ 0x30
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b22      	cmp	r3, #34	@ 0x22
 8003d88:	f040 80ae 	bne.w	8003ee8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d94:	d117      	bne.n	8003dc6 <UART_Receive_IT+0x50>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d113      	bne.n	8003dc6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dbe:	1c9a      	adds	r2, r3, #2
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	629a      	str	r2, [r3, #40]	@ 0x28
 8003dc4:	e026      	b.n	8003e14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dd8:	d007      	beq.n	8003dea <UART_Receive_IT+0x74>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10a      	bne.n	8003df8 <UART_Receive_IT+0x82>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d106      	bne.n	8003df8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df4:	701a      	strb	r2, [r3, #0]
 8003df6:	e008      	b.n	8003e0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e04:	b2da      	uxtb	r2, r3
 8003e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e0e:	1c5a      	adds	r2, r3, #1
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	4619      	mov	r1, r3
 8003e22:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d15d      	bne.n	8003ee4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0220 	bic.w	r2, r2, #32
 8003e36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	695a      	ldr	r2, [r3, #20]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0201 	bic.w	r2, r2, #1
 8003e56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d135      	bne.n	8003eda <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	330c      	adds	r3, #12
 8003e7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	e853 3f00 	ldrex	r3, [r3]
 8003e82:	613b      	str	r3, [r7, #16]
   return(result);
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	f023 0310 	bic.w	r3, r3, #16
 8003e8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	330c      	adds	r3, #12
 8003e92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e94:	623a      	str	r2, [r7, #32]
 8003e96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e98:	69f9      	ldr	r1, [r7, #28]
 8003e9a:	6a3a      	ldr	r2, [r7, #32]
 8003e9c:	e841 2300 	strex	r3, r2, [r1]
 8003ea0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1e5      	bne.n	8003e74 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0310 	and.w	r3, r3, #16
 8003eb2:	2b10      	cmp	r3, #16
 8003eb4:	d10a      	bne.n	8003ecc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60fb      	str	r3, [r7, #12]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7ff fe2a 	bl	8003b2c <HAL_UARTEx_RxEventCallback>
 8003ed8:	e002      	b.n	8003ee0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7fc fd42 	bl	8000964 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	e002      	b.n	8003eea <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	e000      	b.n	8003eea <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003ee8:	2302      	movs	r3, #2
  }
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3730      	adds	r7, #48	@ 0x30
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
	...

08003ef4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ef8:	b0c0      	sub	sp, #256	@ 0x100
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f10:	68d9      	ldr	r1, [r3, #12]
 8003f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	ea40 0301 	orr.w	r3, r0, r1
 8003f1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	431a      	orrs	r2, r3
 8003f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003f4c:	f021 010c 	bic.w	r1, r1, #12
 8003f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003f5a:	430b      	orrs	r3, r1
 8003f5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f6e:	6999      	ldr	r1, [r3, #24]
 8003f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	ea40 0301 	orr.w	r3, r0, r1
 8003f7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	4b8f      	ldr	r3, [pc, #572]	@ (80041c0 <UART_SetConfig+0x2cc>)
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d005      	beq.n	8003f94 <UART_SetConfig+0xa0>
 8003f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	4b8d      	ldr	r3, [pc, #564]	@ (80041c4 <UART_SetConfig+0x2d0>)
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d104      	bne.n	8003f9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f94:	f7fd ffce 	bl	8001f34 <HAL_RCC_GetPCLK2Freq>
 8003f98:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003f9c:	e003      	b.n	8003fa6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f9e:	f7fd ffb5 	bl	8001f0c <HAL_RCC_GetPCLK1Freq>
 8003fa2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fb0:	f040 810c 	bne.w	80041cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003fbe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003fc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003fc6:	4622      	mov	r2, r4
 8003fc8:	462b      	mov	r3, r5
 8003fca:	1891      	adds	r1, r2, r2
 8003fcc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003fce:	415b      	adcs	r3, r3
 8003fd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003fd6:	4621      	mov	r1, r4
 8003fd8:	eb12 0801 	adds.w	r8, r2, r1
 8003fdc:	4629      	mov	r1, r5
 8003fde:	eb43 0901 	adc.w	r9, r3, r1
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ff2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ff6:	4690      	mov	r8, r2
 8003ff8:	4699      	mov	r9, r3
 8003ffa:	4623      	mov	r3, r4
 8003ffc:	eb18 0303 	adds.w	r3, r8, r3
 8004000:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004004:	462b      	mov	r3, r5
 8004006:	eb49 0303 	adc.w	r3, r9, r3
 800400a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800400e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800401a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800401e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004022:	460b      	mov	r3, r1
 8004024:	18db      	adds	r3, r3, r3
 8004026:	653b      	str	r3, [r7, #80]	@ 0x50
 8004028:	4613      	mov	r3, r2
 800402a:	eb42 0303 	adc.w	r3, r2, r3
 800402e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004030:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004034:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004038:	f7fc f942 	bl	80002c0 <__aeabi_uldivmod>
 800403c:	4602      	mov	r2, r0
 800403e:	460b      	mov	r3, r1
 8004040:	4b61      	ldr	r3, [pc, #388]	@ (80041c8 <UART_SetConfig+0x2d4>)
 8004042:	fba3 2302 	umull	r2, r3, r3, r2
 8004046:	095b      	lsrs	r3, r3, #5
 8004048:	011c      	lsls	r4, r3, #4
 800404a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800404e:	2200      	movs	r2, #0
 8004050:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004054:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004058:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800405c:	4642      	mov	r2, r8
 800405e:	464b      	mov	r3, r9
 8004060:	1891      	adds	r1, r2, r2
 8004062:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004064:	415b      	adcs	r3, r3
 8004066:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004068:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800406c:	4641      	mov	r1, r8
 800406e:	eb12 0a01 	adds.w	sl, r2, r1
 8004072:	4649      	mov	r1, r9
 8004074:	eb43 0b01 	adc.w	fp, r3, r1
 8004078:	f04f 0200 	mov.w	r2, #0
 800407c:	f04f 0300 	mov.w	r3, #0
 8004080:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004084:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004088:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800408c:	4692      	mov	sl, r2
 800408e:	469b      	mov	fp, r3
 8004090:	4643      	mov	r3, r8
 8004092:	eb1a 0303 	adds.w	r3, sl, r3
 8004096:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800409a:	464b      	mov	r3, r9
 800409c:	eb4b 0303 	adc.w	r3, fp, r3
 80040a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80040a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80040b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80040b8:	460b      	mov	r3, r1
 80040ba:	18db      	adds	r3, r3, r3
 80040bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80040be:	4613      	mov	r3, r2
 80040c0:	eb42 0303 	adc.w	r3, r2, r3
 80040c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80040c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80040ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80040ce:	f7fc f8f7 	bl	80002c0 <__aeabi_uldivmod>
 80040d2:	4602      	mov	r2, r0
 80040d4:	460b      	mov	r3, r1
 80040d6:	4611      	mov	r1, r2
 80040d8:	4b3b      	ldr	r3, [pc, #236]	@ (80041c8 <UART_SetConfig+0x2d4>)
 80040da:	fba3 2301 	umull	r2, r3, r3, r1
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	2264      	movs	r2, #100	@ 0x64
 80040e2:	fb02 f303 	mul.w	r3, r2, r3
 80040e6:	1acb      	subs	r3, r1, r3
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80040ee:	4b36      	ldr	r3, [pc, #216]	@ (80041c8 <UART_SetConfig+0x2d4>)
 80040f0:	fba3 2302 	umull	r2, r3, r3, r2
 80040f4:	095b      	lsrs	r3, r3, #5
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80040fc:	441c      	add	r4, r3
 80040fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004102:	2200      	movs	r2, #0
 8004104:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004108:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800410c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004110:	4642      	mov	r2, r8
 8004112:	464b      	mov	r3, r9
 8004114:	1891      	adds	r1, r2, r2
 8004116:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004118:	415b      	adcs	r3, r3
 800411a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800411c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004120:	4641      	mov	r1, r8
 8004122:	1851      	adds	r1, r2, r1
 8004124:	6339      	str	r1, [r7, #48]	@ 0x30
 8004126:	4649      	mov	r1, r9
 8004128:	414b      	adcs	r3, r1
 800412a:	637b      	str	r3, [r7, #52]	@ 0x34
 800412c:	f04f 0200 	mov.w	r2, #0
 8004130:	f04f 0300 	mov.w	r3, #0
 8004134:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004138:	4659      	mov	r1, fp
 800413a:	00cb      	lsls	r3, r1, #3
 800413c:	4651      	mov	r1, sl
 800413e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004142:	4651      	mov	r1, sl
 8004144:	00ca      	lsls	r2, r1, #3
 8004146:	4610      	mov	r0, r2
 8004148:	4619      	mov	r1, r3
 800414a:	4603      	mov	r3, r0
 800414c:	4642      	mov	r2, r8
 800414e:	189b      	adds	r3, r3, r2
 8004150:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004154:	464b      	mov	r3, r9
 8004156:	460a      	mov	r2, r1
 8004158:	eb42 0303 	adc.w	r3, r2, r3
 800415c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800416c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004170:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004174:	460b      	mov	r3, r1
 8004176:	18db      	adds	r3, r3, r3
 8004178:	62bb      	str	r3, [r7, #40]	@ 0x28
 800417a:	4613      	mov	r3, r2
 800417c:	eb42 0303 	adc.w	r3, r2, r3
 8004180:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004182:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004186:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800418a:	f7fc f899 	bl	80002c0 <__aeabi_uldivmod>
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	4b0d      	ldr	r3, [pc, #52]	@ (80041c8 <UART_SetConfig+0x2d4>)
 8004194:	fba3 1302 	umull	r1, r3, r3, r2
 8004198:	095b      	lsrs	r3, r3, #5
 800419a:	2164      	movs	r1, #100	@ 0x64
 800419c:	fb01 f303 	mul.w	r3, r1, r3
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	3332      	adds	r3, #50	@ 0x32
 80041a6:	4a08      	ldr	r2, [pc, #32]	@ (80041c8 <UART_SetConfig+0x2d4>)
 80041a8:	fba2 2303 	umull	r2, r3, r2, r3
 80041ac:	095b      	lsrs	r3, r3, #5
 80041ae:	f003 0207 	and.w	r2, r3, #7
 80041b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4422      	add	r2, r4
 80041ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041bc:	e106      	b.n	80043cc <UART_SetConfig+0x4d8>
 80041be:	bf00      	nop
 80041c0:	40011000 	.word	0x40011000
 80041c4:	40011400 	.word	0x40011400
 80041c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041d0:	2200      	movs	r2, #0
 80041d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80041d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80041da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80041de:	4642      	mov	r2, r8
 80041e0:	464b      	mov	r3, r9
 80041e2:	1891      	adds	r1, r2, r2
 80041e4:	6239      	str	r1, [r7, #32]
 80041e6:	415b      	adcs	r3, r3
 80041e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80041ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041ee:	4641      	mov	r1, r8
 80041f0:	1854      	adds	r4, r2, r1
 80041f2:	4649      	mov	r1, r9
 80041f4:	eb43 0501 	adc.w	r5, r3, r1
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	f04f 0300 	mov.w	r3, #0
 8004200:	00eb      	lsls	r3, r5, #3
 8004202:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004206:	00e2      	lsls	r2, r4, #3
 8004208:	4614      	mov	r4, r2
 800420a:	461d      	mov	r5, r3
 800420c:	4643      	mov	r3, r8
 800420e:	18e3      	adds	r3, r4, r3
 8004210:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004214:	464b      	mov	r3, r9
 8004216:	eb45 0303 	adc.w	r3, r5, r3
 800421a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800421e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800422a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	f04f 0300 	mov.w	r3, #0
 8004236:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800423a:	4629      	mov	r1, r5
 800423c:	008b      	lsls	r3, r1, #2
 800423e:	4621      	mov	r1, r4
 8004240:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004244:	4621      	mov	r1, r4
 8004246:	008a      	lsls	r2, r1, #2
 8004248:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800424c:	f7fc f838 	bl	80002c0 <__aeabi_uldivmod>
 8004250:	4602      	mov	r2, r0
 8004252:	460b      	mov	r3, r1
 8004254:	4b60      	ldr	r3, [pc, #384]	@ (80043d8 <UART_SetConfig+0x4e4>)
 8004256:	fba3 2302 	umull	r2, r3, r3, r2
 800425a:	095b      	lsrs	r3, r3, #5
 800425c:	011c      	lsls	r4, r3, #4
 800425e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004262:	2200      	movs	r2, #0
 8004264:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004268:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800426c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004270:	4642      	mov	r2, r8
 8004272:	464b      	mov	r3, r9
 8004274:	1891      	adds	r1, r2, r2
 8004276:	61b9      	str	r1, [r7, #24]
 8004278:	415b      	adcs	r3, r3
 800427a:	61fb      	str	r3, [r7, #28]
 800427c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004280:	4641      	mov	r1, r8
 8004282:	1851      	adds	r1, r2, r1
 8004284:	6139      	str	r1, [r7, #16]
 8004286:	4649      	mov	r1, r9
 8004288:	414b      	adcs	r3, r1
 800428a:	617b      	str	r3, [r7, #20]
 800428c:	f04f 0200 	mov.w	r2, #0
 8004290:	f04f 0300 	mov.w	r3, #0
 8004294:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004298:	4659      	mov	r1, fp
 800429a:	00cb      	lsls	r3, r1, #3
 800429c:	4651      	mov	r1, sl
 800429e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042a2:	4651      	mov	r1, sl
 80042a4:	00ca      	lsls	r2, r1, #3
 80042a6:	4610      	mov	r0, r2
 80042a8:	4619      	mov	r1, r3
 80042aa:	4603      	mov	r3, r0
 80042ac:	4642      	mov	r2, r8
 80042ae:	189b      	adds	r3, r3, r2
 80042b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80042b4:	464b      	mov	r3, r9
 80042b6:	460a      	mov	r2, r1
 80042b8:	eb42 0303 	adc.w	r3, r2, r3
 80042bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80042c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80042ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80042cc:	f04f 0200 	mov.w	r2, #0
 80042d0:	f04f 0300 	mov.w	r3, #0
 80042d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80042d8:	4649      	mov	r1, r9
 80042da:	008b      	lsls	r3, r1, #2
 80042dc:	4641      	mov	r1, r8
 80042de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042e2:	4641      	mov	r1, r8
 80042e4:	008a      	lsls	r2, r1, #2
 80042e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80042ea:	f7fb ffe9 	bl	80002c0 <__aeabi_uldivmod>
 80042ee:	4602      	mov	r2, r0
 80042f0:	460b      	mov	r3, r1
 80042f2:	4611      	mov	r1, r2
 80042f4:	4b38      	ldr	r3, [pc, #224]	@ (80043d8 <UART_SetConfig+0x4e4>)
 80042f6:	fba3 2301 	umull	r2, r3, r3, r1
 80042fa:	095b      	lsrs	r3, r3, #5
 80042fc:	2264      	movs	r2, #100	@ 0x64
 80042fe:	fb02 f303 	mul.w	r3, r2, r3
 8004302:	1acb      	subs	r3, r1, r3
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	3332      	adds	r3, #50	@ 0x32
 8004308:	4a33      	ldr	r2, [pc, #204]	@ (80043d8 <UART_SetConfig+0x4e4>)
 800430a:	fba2 2303 	umull	r2, r3, r2, r3
 800430e:	095b      	lsrs	r3, r3, #5
 8004310:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004314:	441c      	add	r4, r3
 8004316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800431a:	2200      	movs	r2, #0
 800431c:	673b      	str	r3, [r7, #112]	@ 0x70
 800431e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004320:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004324:	4642      	mov	r2, r8
 8004326:	464b      	mov	r3, r9
 8004328:	1891      	adds	r1, r2, r2
 800432a:	60b9      	str	r1, [r7, #8]
 800432c:	415b      	adcs	r3, r3
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004334:	4641      	mov	r1, r8
 8004336:	1851      	adds	r1, r2, r1
 8004338:	6039      	str	r1, [r7, #0]
 800433a:	4649      	mov	r1, r9
 800433c:	414b      	adcs	r3, r1
 800433e:	607b      	str	r3, [r7, #4]
 8004340:	f04f 0200 	mov.w	r2, #0
 8004344:	f04f 0300 	mov.w	r3, #0
 8004348:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800434c:	4659      	mov	r1, fp
 800434e:	00cb      	lsls	r3, r1, #3
 8004350:	4651      	mov	r1, sl
 8004352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004356:	4651      	mov	r1, sl
 8004358:	00ca      	lsls	r2, r1, #3
 800435a:	4610      	mov	r0, r2
 800435c:	4619      	mov	r1, r3
 800435e:	4603      	mov	r3, r0
 8004360:	4642      	mov	r2, r8
 8004362:	189b      	adds	r3, r3, r2
 8004364:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004366:	464b      	mov	r3, r9
 8004368:	460a      	mov	r2, r1
 800436a:	eb42 0303 	adc.w	r3, r2, r3
 800436e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	663b      	str	r3, [r7, #96]	@ 0x60
 800437a:	667a      	str	r2, [r7, #100]	@ 0x64
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	f04f 0300 	mov.w	r3, #0
 8004384:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004388:	4649      	mov	r1, r9
 800438a:	008b      	lsls	r3, r1, #2
 800438c:	4641      	mov	r1, r8
 800438e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004392:	4641      	mov	r1, r8
 8004394:	008a      	lsls	r2, r1, #2
 8004396:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800439a:	f7fb ff91 	bl	80002c0 <__aeabi_uldivmod>
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	4b0d      	ldr	r3, [pc, #52]	@ (80043d8 <UART_SetConfig+0x4e4>)
 80043a4:	fba3 1302 	umull	r1, r3, r3, r2
 80043a8:	095b      	lsrs	r3, r3, #5
 80043aa:	2164      	movs	r1, #100	@ 0x64
 80043ac:	fb01 f303 	mul.w	r3, r1, r3
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	3332      	adds	r3, #50	@ 0x32
 80043b6:	4a08      	ldr	r2, [pc, #32]	@ (80043d8 <UART_SetConfig+0x4e4>)
 80043b8:	fba2 2303 	umull	r2, r3, r2, r3
 80043bc:	095b      	lsrs	r3, r3, #5
 80043be:	f003 020f 	and.w	r2, r3, #15
 80043c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4422      	add	r2, r4
 80043ca:	609a      	str	r2, [r3, #8]
}
 80043cc:	bf00      	nop
 80043ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80043d2:	46bd      	mov	sp, r7
 80043d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043d8:	51eb851f 	.word	0x51eb851f

080043dc <atol>:
 80043dc:	220a      	movs	r2, #10
 80043de:	2100      	movs	r1, #0
 80043e0:	f000 b89a 	b.w	8004518 <strtol>

080043e4 <siprintf>:
 80043e4:	b40e      	push	{r1, r2, r3}
 80043e6:	b500      	push	{lr}
 80043e8:	b09c      	sub	sp, #112	@ 0x70
 80043ea:	ab1d      	add	r3, sp, #116	@ 0x74
 80043ec:	9002      	str	r0, [sp, #8]
 80043ee:	9006      	str	r0, [sp, #24]
 80043f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80043f4:	4809      	ldr	r0, [pc, #36]	@ (800441c <siprintf+0x38>)
 80043f6:	9107      	str	r1, [sp, #28]
 80043f8:	9104      	str	r1, [sp, #16]
 80043fa:	4909      	ldr	r1, [pc, #36]	@ (8004420 <siprintf+0x3c>)
 80043fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004400:	9105      	str	r1, [sp, #20]
 8004402:	6800      	ldr	r0, [r0, #0]
 8004404:	9301      	str	r3, [sp, #4]
 8004406:	a902      	add	r1, sp, #8
 8004408:	f000 f920 	bl	800464c <_svfiprintf_r>
 800440c:	9b02      	ldr	r3, [sp, #8]
 800440e:	2200      	movs	r2, #0
 8004410:	701a      	strb	r2, [r3, #0]
 8004412:	b01c      	add	sp, #112	@ 0x70
 8004414:	f85d eb04 	ldr.w	lr, [sp], #4
 8004418:	b003      	add	sp, #12
 800441a:	4770      	bx	lr
 800441c:	20000018 	.word	0x20000018
 8004420:	ffff0208 	.word	0xffff0208

08004424 <_strtol_l.constprop.0>:
 8004424:	2b24      	cmp	r3, #36	@ 0x24
 8004426:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800442a:	4686      	mov	lr, r0
 800442c:	4690      	mov	r8, r2
 800442e:	d801      	bhi.n	8004434 <_strtol_l.constprop.0+0x10>
 8004430:	2b01      	cmp	r3, #1
 8004432:	d106      	bne.n	8004442 <_strtol_l.constprop.0+0x1e>
 8004434:	f000 f882 	bl	800453c <__errno>
 8004438:	2316      	movs	r3, #22
 800443a:	6003      	str	r3, [r0, #0]
 800443c:	2000      	movs	r0, #0
 800443e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004442:	4834      	ldr	r0, [pc, #208]	@ (8004514 <_strtol_l.constprop.0+0xf0>)
 8004444:	460d      	mov	r5, r1
 8004446:	462a      	mov	r2, r5
 8004448:	f815 4b01 	ldrb.w	r4, [r5], #1
 800444c:	5d06      	ldrb	r6, [r0, r4]
 800444e:	f016 0608 	ands.w	r6, r6, #8
 8004452:	d1f8      	bne.n	8004446 <_strtol_l.constprop.0+0x22>
 8004454:	2c2d      	cmp	r4, #45	@ 0x2d
 8004456:	d12d      	bne.n	80044b4 <_strtol_l.constprop.0+0x90>
 8004458:	782c      	ldrb	r4, [r5, #0]
 800445a:	2601      	movs	r6, #1
 800445c:	1c95      	adds	r5, r2, #2
 800445e:	f033 0210 	bics.w	r2, r3, #16
 8004462:	d109      	bne.n	8004478 <_strtol_l.constprop.0+0x54>
 8004464:	2c30      	cmp	r4, #48	@ 0x30
 8004466:	d12a      	bne.n	80044be <_strtol_l.constprop.0+0x9a>
 8004468:	782a      	ldrb	r2, [r5, #0]
 800446a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800446e:	2a58      	cmp	r2, #88	@ 0x58
 8004470:	d125      	bne.n	80044be <_strtol_l.constprop.0+0x9a>
 8004472:	786c      	ldrb	r4, [r5, #1]
 8004474:	2310      	movs	r3, #16
 8004476:	3502      	adds	r5, #2
 8004478:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800447c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8004480:	2200      	movs	r2, #0
 8004482:	fbbc f9f3 	udiv	r9, ip, r3
 8004486:	4610      	mov	r0, r2
 8004488:	fb03 ca19 	mls	sl, r3, r9, ip
 800448c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004490:	2f09      	cmp	r7, #9
 8004492:	d81b      	bhi.n	80044cc <_strtol_l.constprop.0+0xa8>
 8004494:	463c      	mov	r4, r7
 8004496:	42a3      	cmp	r3, r4
 8004498:	dd27      	ble.n	80044ea <_strtol_l.constprop.0+0xc6>
 800449a:	1c57      	adds	r7, r2, #1
 800449c:	d007      	beq.n	80044ae <_strtol_l.constprop.0+0x8a>
 800449e:	4581      	cmp	r9, r0
 80044a0:	d320      	bcc.n	80044e4 <_strtol_l.constprop.0+0xc0>
 80044a2:	d101      	bne.n	80044a8 <_strtol_l.constprop.0+0x84>
 80044a4:	45a2      	cmp	sl, r4
 80044a6:	db1d      	blt.n	80044e4 <_strtol_l.constprop.0+0xc0>
 80044a8:	fb00 4003 	mla	r0, r0, r3, r4
 80044ac:	2201      	movs	r2, #1
 80044ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80044b2:	e7eb      	b.n	800448c <_strtol_l.constprop.0+0x68>
 80044b4:	2c2b      	cmp	r4, #43	@ 0x2b
 80044b6:	bf04      	itt	eq
 80044b8:	782c      	ldrbeq	r4, [r5, #0]
 80044ba:	1c95      	addeq	r5, r2, #2
 80044bc:	e7cf      	b.n	800445e <_strtol_l.constprop.0+0x3a>
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1da      	bne.n	8004478 <_strtol_l.constprop.0+0x54>
 80044c2:	2c30      	cmp	r4, #48	@ 0x30
 80044c4:	bf0c      	ite	eq
 80044c6:	2308      	moveq	r3, #8
 80044c8:	230a      	movne	r3, #10
 80044ca:	e7d5      	b.n	8004478 <_strtol_l.constprop.0+0x54>
 80044cc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80044d0:	2f19      	cmp	r7, #25
 80044d2:	d801      	bhi.n	80044d8 <_strtol_l.constprop.0+0xb4>
 80044d4:	3c37      	subs	r4, #55	@ 0x37
 80044d6:	e7de      	b.n	8004496 <_strtol_l.constprop.0+0x72>
 80044d8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80044dc:	2f19      	cmp	r7, #25
 80044de:	d804      	bhi.n	80044ea <_strtol_l.constprop.0+0xc6>
 80044e0:	3c57      	subs	r4, #87	@ 0x57
 80044e2:	e7d8      	b.n	8004496 <_strtol_l.constprop.0+0x72>
 80044e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80044e8:	e7e1      	b.n	80044ae <_strtol_l.constprop.0+0x8a>
 80044ea:	1c53      	adds	r3, r2, #1
 80044ec:	d108      	bne.n	8004500 <_strtol_l.constprop.0+0xdc>
 80044ee:	2322      	movs	r3, #34	@ 0x22
 80044f0:	f8ce 3000 	str.w	r3, [lr]
 80044f4:	4660      	mov	r0, ip
 80044f6:	f1b8 0f00 	cmp.w	r8, #0
 80044fa:	d0a0      	beq.n	800443e <_strtol_l.constprop.0+0x1a>
 80044fc:	1e69      	subs	r1, r5, #1
 80044fe:	e006      	b.n	800450e <_strtol_l.constprop.0+0xea>
 8004500:	b106      	cbz	r6, 8004504 <_strtol_l.constprop.0+0xe0>
 8004502:	4240      	negs	r0, r0
 8004504:	f1b8 0f00 	cmp.w	r8, #0
 8004508:	d099      	beq.n	800443e <_strtol_l.constprop.0+0x1a>
 800450a:	2a00      	cmp	r2, #0
 800450c:	d1f6      	bne.n	80044fc <_strtol_l.constprop.0+0xd8>
 800450e:	f8c8 1000 	str.w	r1, [r8]
 8004512:	e794      	b.n	800443e <_strtol_l.constprop.0+0x1a>
 8004514:	08004e89 	.word	0x08004e89

08004518 <strtol>:
 8004518:	4613      	mov	r3, r2
 800451a:	460a      	mov	r2, r1
 800451c:	4601      	mov	r1, r0
 800451e:	4802      	ldr	r0, [pc, #8]	@ (8004528 <strtol+0x10>)
 8004520:	6800      	ldr	r0, [r0, #0]
 8004522:	f7ff bf7f 	b.w	8004424 <_strtol_l.constprop.0>
 8004526:	bf00      	nop
 8004528:	20000018 	.word	0x20000018

0800452c <memset>:
 800452c:	4402      	add	r2, r0
 800452e:	4603      	mov	r3, r0
 8004530:	4293      	cmp	r3, r2
 8004532:	d100      	bne.n	8004536 <memset+0xa>
 8004534:	4770      	bx	lr
 8004536:	f803 1b01 	strb.w	r1, [r3], #1
 800453a:	e7f9      	b.n	8004530 <memset+0x4>

0800453c <__errno>:
 800453c:	4b01      	ldr	r3, [pc, #4]	@ (8004544 <__errno+0x8>)
 800453e:	6818      	ldr	r0, [r3, #0]
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	20000018 	.word	0x20000018

08004548 <__libc_init_array>:
 8004548:	b570      	push	{r4, r5, r6, lr}
 800454a:	4d0d      	ldr	r5, [pc, #52]	@ (8004580 <__libc_init_array+0x38>)
 800454c:	4c0d      	ldr	r4, [pc, #52]	@ (8004584 <__libc_init_array+0x3c>)
 800454e:	1b64      	subs	r4, r4, r5
 8004550:	10a4      	asrs	r4, r4, #2
 8004552:	2600      	movs	r6, #0
 8004554:	42a6      	cmp	r6, r4
 8004556:	d109      	bne.n	800456c <__libc_init_array+0x24>
 8004558:	4d0b      	ldr	r5, [pc, #44]	@ (8004588 <__libc_init_array+0x40>)
 800455a:	4c0c      	ldr	r4, [pc, #48]	@ (800458c <__libc_init_array+0x44>)
 800455c:	f000 fc66 	bl	8004e2c <_init>
 8004560:	1b64      	subs	r4, r4, r5
 8004562:	10a4      	asrs	r4, r4, #2
 8004564:	2600      	movs	r6, #0
 8004566:	42a6      	cmp	r6, r4
 8004568:	d105      	bne.n	8004576 <__libc_init_array+0x2e>
 800456a:	bd70      	pop	{r4, r5, r6, pc}
 800456c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004570:	4798      	blx	r3
 8004572:	3601      	adds	r6, #1
 8004574:	e7ee      	b.n	8004554 <__libc_init_array+0xc>
 8004576:	f855 3b04 	ldr.w	r3, [r5], #4
 800457a:	4798      	blx	r3
 800457c:	3601      	adds	r6, #1
 800457e:	e7f2      	b.n	8004566 <__libc_init_array+0x1e>
 8004580:	08004fc4 	.word	0x08004fc4
 8004584:	08004fc4 	.word	0x08004fc4
 8004588:	08004fc4 	.word	0x08004fc4
 800458c:	08004fc8 	.word	0x08004fc8

08004590 <__retarget_lock_acquire_recursive>:
 8004590:	4770      	bx	lr

08004592 <__retarget_lock_release_recursive>:
 8004592:	4770      	bx	lr

08004594 <__ssputs_r>:
 8004594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004598:	688e      	ldr	r6, [r1, #8]
 800459a:	461f      	mov	r7, r3
 800459c:	42be      	cmp	r6, r7
 800459e:	680b      	ldr	r3, [r1, #0]
 80045a0:	4682      	mov	sl, r0
 80045a2:	460c      	mov	r4, r1
 80045a4:	4690      	mov	r8, r2
 80045a6:	d82d      	bhi.n	8004604 <__ssputs_r+0x70>
 80045a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80045ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80045b0:	d026      	beq.n	8004600 <__ssputs_r+0x6c>
 80045b2:	6965      	ldr	r5, [r4, #20]
 80045b4:	6909      	ldr	r1, [r1, #16]
 80045b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045ba:	eba3 0901 	sub.w	r9, r3, r1
 80045be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80045c2:	1c7b      	adds	r3, r7, #1
 80045c4:	444b      	add	r3, r9
 80045c6:	106d      	asrs	r5, r5, #1
 80045c8:	429d      	cmp	r5, r3
 80045ca:	bf38      	it	cc
 80045cc:	461d      	movcc	r5, r3
 80045ce:	0553      	lsls	r3, r2, #21
 80045d0:	d527      	bpl.n	8004622 <__ssputs_r+0x8e>
 80045d2:	4629      	mov	r1, r5
 80045d4:	f000 f958 	bl	8004888 <_malloc_r>
 80045d8:	4606      	mov	r6, r0
 80045da:	b360      	cbz	r0, 8004636 <__ssputs_r+0xa2>
 80045dc:	6921      	ldr	r1, [r4, #16]
 80045de:	464a      	mov	r2, r9
 80045e0:	f000 fbc4 	bl	8004d6c <memcpy>
 80045e4:	89a3      	ldrh	r3, [r4, #12]
 80045e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80045ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045ee:	81a3      	strh	r3, [r4, #12]
 80045f0:	6126      	str	r6, [r4, #16]
 80045f2:	6165      	str	r5, [r4, #20]
 80045f4:	444e      	add	r6, r9
 80045f6:	eba5 0509 	sub.w	r5, r5, r9
 80045fa:	6026      	str	r6, [r4, #0]
 80045fc:	60a5      	str	r5, [r4, #8]
 80045fe:	463e      	mov	r6, r7
 8004600:	42be      	cmp	r6, r7
 8004602:	d900      	bls.n	8004606 <__ssputs_r+0x72>
 8004604:	463e      	mov	r6, r7
 8004606:	6820      	ldr	r0, [r4, #0]
 8004608:	4632      	mov	r2, r6
 800460a:	4641      	mov	r1, r8
 800460c:	f000 fb84 	bl	8004d18 <memmove>
 8004610:	68a3      	ldr	r3, [r4, #8]
 8004612:	1b9b      	subs	r3, r3, r6
 8004614:	60a3      	str	r3, [r4, #8]
 8004616:	6823      	ldr	r3, [r4, #0]
 8004618:	4433      	add	r3, r6
 800461a:	6023      	str	r3, [r4, #0]
 800461c:	2000      	movs	r0, #0
 800461e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004622:	462a      	mov	r2, r5
 8004624:	f000 fb4a 	bl	8004cbc <_realloc_r>
 8004628:	4606      	mov	r6, r0
 800462a:	2800      	cmp	r0, #0
 800462c:	d1e0      	bne.n	80045f0 <__ssputs_r+0x5c>
 800462e:	6921      	ldr	r1, [r4, #16]
 8004630:	4650      	mov	r0, sl
 8004632:	f000 fba9 	bl	8004d88 <_free_r>
 8004636:	230c      	movs	r3, #12
 8004638:	f8ca 3000 	str.w	r3, [sl]
 800463c:	89a3      	ldrh	r3, [r4, #12]
 800463e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004642:	81a3      	strh	r3, [r4, #12]
 8004644:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004648:	e7e9      	b.n	800461e <__ssputs_r+0x8a>
	...

0800464c <_svfiprintf_r>:
 800464c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004650:	4698      	mov	r8, r3
 8004652:	898b      	ldrh	r3, [r1, #12]
 8004654:	061b      	lsls	r3, r3, #24
 8004656:	b09d      	sub	sp, #116	@ 0x74
 8004658:	4607      	mov	r7, r0
 800465a:	460d      	mov	r5, r1
 800465c:	4614      	mov	r4, r2
 800465e:	d510      	bpl.n	8004682 <_svfiprintf_r+0x36>
 8004660:	690b      	ldr	r3, [r1, #16]
 8004662:	b973      	cbnz	r3, 8004682 <_svfiprintf_r+0x36>
 8004664:	2140      	movs	r1, #64	@ 0x40
 8004666:	f000 f90f 	bl	8004888 <_malloc_r>
 800466a:	6028      	str	r0, [r5, #0]
 800466c:	6128      	str	r0, [r5, #16]
 800466e:	b930      	cbnz	r0, 800467e <_svfiprintf_r+0x32>
 8004670:	230c      	movs	r3, #12
 8004672:	603b      	str	r3, [r7, #0]
 8004674:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004678:	b01d      	add	sp, #116	@ 0x74
 800467a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800467e:	2340      	movs	r3, #64	@ 0x40
 8004680:	616b      	str	r3, [r5, #20]
 8004682:	2300      	movs	r3, #0
 8004684:	9309      	str	r3, [sp, #36]	@ 0x24
 8004686:	2320      	movs	r3, #32
 8004688:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800468c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004690:	2330      	movs	r3, #48	@ 0x30
 8004692:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004830 <_svfiprintf_r+0x1e4>
 8004696:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800469a:	f04f 0901 	mov.w	r9, #1
 800469e:	4623      	mov	r3, r4
 80046a0:	469a      	mov	sl, r3
 80046a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046a6:	b10a      	cbz	r2, 80046ac <_svfiprintf_r+0x60>
 80046a8:	2a25      	cmp	r2, #37	@ 0x25
 80046aa:	d1f9      	bne.n	80046a0 <_svfiprintf_r+0x54>
 80046ac:	ebba 0b04 	subs.w	fp, sl, r4
 80046b0:	d00b      	beq.n	80046ca <_svfiprintf_r+0x7e>
 80046b2:	465b      	mov	r3, fp
 80046b4:	4622      	mov	r2, r4
 80046b6:	4629      	mov	r1, r5
 80046b8:	4638      	mov	r0, r7
 80046ba:	f7ff ff6b 	bl	8004594 <__ssputs_r>
 80046be:	3001      	adds	r0, #1
 80046c0:	f000 80a7 	beq.w	8004812 <_svfiprintf_r+0x1c6>
 80046c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80046c6:	445a      	add	r2, fp
 80046c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80046ca:	f89a 3000 	ldrb.w	r3, [sl]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 809f 	beq.w	8004812 <_svfiprintf_r+0x1c6>
 80046d4:	2300      	movs	r3, #0
 80046d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80046da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046de:	f10a 0a01 	add.w	sl, sl, #1
 80046e2:	9304      	str	r3, [sp, #16]
 80046e4:	9307      	str	r3, [sp, #28]
 80046e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80046ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80046ec:	4654      	mov	r4, sl
 80046ee:	2205      	movs	r2, #5
 80046f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046f4:	484e      	ldr	r0, [pc, #312]	@ (8004830 <_svfiprintf_r+0x1e4>)
 80046f6:	f7fb fd93 	bl	8000220 <memchr>
 80046fa:	9a04      	ldr	r2, [sp, #16]
 80046fc:	b9d8      	cbnz	r0, 8004736 <_svfiprintf_r+0xea>
 80046fe:	06d0      	lsls	r0, r2, #27
 8004700:	bf44      	itt	mi
 8004702:	2320      	movmi	r3, #32
 8004704:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004708:	0711      	lsls	r1, r2, #28
 800470a:	bf44      	itt	mi
 800470c:	232b      	movmi	r3, #43	@ 0x2b
 800470e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004712:	f89a 3000 	ldrb.w	r3, [sl]
 8004716:	2b2a      	cmp	r3, #42	@ 0x2a
 8004718:	d015      	beq.n	8004746 <_svfiprintf_r+0xfa>
 800471a:	9a07      	ldr	r2, [sp, #28]
 800471c:	4654      	mov	r4, sl
 800471e:	2000      	movs	r0, #0
 8004720:	f04f 0c0a 	mov.w	ip, #10
 8004724:	4621      	mov	r1, r4
 8004726:	f811 3b01 	ldrb.w	r3, [r1], #1
 800472a:	3b30      	subs	r3, #48	@ 0x30
 800472c:	2b09      	cmp	r3, #9
 800472e:	d94b      	bls.n	80047c8 <_svfiprintf_r+0x17c>
 8004730:	b1b0      	cbz	r0, 8004760 <_svfiprintf_r+0x114>
 8004732:	9207      	str	r2, [sp, #28]
 8004734:	e014      	b.n	8004760 <_svfiprintf_r+0x114>
 8004736:	eba0 0308 	sub.w	r3, r0, r8
 800473a:	fa09 f303 	lsl.w	r3, r9, r3
 800473e:	4313      	orrs	r3, r2
 8004740:	9304      	str	r3, [sp, #16]
 8004742:	46a2      	mov	sl, r4
 8004744:	e7d2      	b.n	80046ec <_svfiprintf_r+0xa0>
 8004746:	9b03      	ldr	r3, [sp, #12]
 8004748:	1d19      	adds	r1, r3, #4
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	9103      	str	r1, [sp, #12]
 800474e:	2b00      	cmp	r3, #0
 8004750:	bfbb      	ittet	lt
 8004752:	425b      	neglt	r3, r3
 8004754:	f042 0202 	orrlt.w	r2, r2, #2
 8004758:	9307      	strge	r3, [sp, #28]
 800475a:	9307      	strlt	r3, [sp, #28]
 800475c:	bfb8      	it	lt
 800475e:	9204      	strlt	r2, [sp, #16]
 8004760:	7823      	ldrb	r3, [r4, #0]
 8004762:	2b2e      	cmp	r3, #46	@ 0x2e
 8004764:	d10a      	bne.n	800477c <_svfiprintf_r+0x130>
 8004766:	7863      	ldrb	r3, [r4, #1]
 8004768:	2b2a      	cmp	r3, #42	@ 0x2a
 800476a:	d132      	bne.n	80047d2 <_svfiprintf_r+0x186>
 800476c:	9b03      	ldr	r3, [sp, #12]
 800476e:	1d1a      	adds	r2, r3, #4
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	9203      	str	r2, [sp, #12]
 8004774:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004778:	3402      	adds	r4, #2
 800477a:	9305      	str	r3, [sp, #20]
 800477c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004840 <_svfiprintf_r+0x1f4>
 8004780:	7821      	ldrb	r1, [r4, #0]
 8004782:	2203      	movs	r2, #3
 8004784:	4650      	mov	r0, sl
 8004786:	f7fb fd4b 	bl	8000220 <memchr>
 800478a:	b138      	cbz	r0, 800479c <_svfiprintf_r+0x150>
 800478c:	9b04      	ldr	r3, [sp, #16]
 800478e:	eba0 000a 	sub.w	r0, r0, sl
 8004792:	2240      	movs	r2, #64	@ 0x40
 8004794:	4082      	lsls	r2, r0
 8004796:	4313      	orrs	r3, r2
 8004798:	3401      	adds	r4, #1
 800479a:	9304      	str	r3, [sp, #16]
 800479c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047a0:	4824      	ldr	r0, [pc, #144]	@ (8004834 <_svfiprintf_r+0x1e8>)
 80047a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80047a6:	2206      	movs	r2, #6
 80047a8:	f7fb fd3a 	bl	8000220 <memchr>
 80047ac:	2800      	cmp	r0, #0
 80047ae:	d036      	beq.n	800481e <_svfiprintf_r+0x1d2>
 80047b0:	4b21      	ldr	r3, [pc, #132]	@ (8004838 <_svfiprintf_r+0x1ec>)
 80047b2:	bb1b      	cbnz	r3, 80047fc <_svfiprintf_r+0x1b0>
 80047b4:	9b03      	ldr	r3, [sp, #12]
 80047b6:	3307      	adds	r3, #7
 80047b8:	f023 0307 	bic.w	r3, r3, #7
 80047bc:	3308      	adds	r3, #8
 80047be:	9303      	str	r3, [sp, #12]
 80047c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047c2:	4433      	add	r3, r6
 80047c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80047c6:	e76a      	b.n	800469e <_svfiprintf_r+0x52>
 80047c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80047cc:	460c      	mov	r4, r1
 80047ce:	2001      	movs	r0, #1
 80047d0:	e7a8      	b.n	8004724 <_svfiprintf_r+0xd8>
 80047d2:	2300      	movs	r3, #0
 80047d4:	3401      	adds	r4, #1
 80047d6:	9305      	str	r3, [sp, #20]
 80047d8:	4619      	mov	r1, r3
 80047da:	f04f 0c0a 	mov.w	ip, #10
 80047de:	4620      	mov	r0, r4
 80047e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047e4:	3a30      	subs	r2, #48	@ 0x30
 80047e6:	2a09      	cmp	r2, #9
 80047e8:	d903      	bls.n	80047f2 <_svfiprintf_r+0x1a6>
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d0c6      	beq.n	800477c <_svfiprintf_r+0x130>
 80047ee:	9105      	str	r1, [sp, #20]
 80047f0:	e7c4      	b.n	800477c <_svfiprintf_r+0x130>
 80047f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80047f6:	4604      	mov	r4, r0
 80047f8:	2301      	movs	r3, #1
 80047fa:	e7f0      	b.n	80047de <_svfiprintf_r+0x192>
 80047fc:	ab03      	add	r3, sp, #12
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	462a      	mov	r2, r5
 8004802:	4b0e      	ldr	r3, [pc, #56]	@ (800483c <_svfiprintf_r+0x1f0>)
 8004804:	a904      	add	r1, sp, #16
 8004806:	4638      	mov	r0, r7
 8004808:	f3af 8000 	nop.w
 800480c:	1c42      	adds	r2, r0, #1
 800480e:	4606      	mov	r6, r0
 8004810:	d1d6      	bne.n	80047c0 <_svfiprintf_r+0x174>
 8004812:	89ab      	ldrh	r3, [r5, #12]
 8004814:	065b      	lsls	r3, r3, #25
 8004816:	f53f af2d 	bmi.w	8004674 <_svfiprintf_r+0x28>
 800481a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800481c:	e72c      	b.n	8004678 <_svfiprintf_r+0x2c>
 800481e:	ab03      	add	r3, sp, #12
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	462a      	mov	r2, r5
 8004824:	4b05      	ldr	r3, [pc, #20]	@ (800483c <_svfiprintf_r+0x1f0>)
 8004826:	a904      	add	r1, sp, #16
 8004828:	4638      	mov	r0, r7
 800482a:	f000 f91b 	bl	8004a64 <_printf_i>
 800482e:	e7ed      	b.n	800480c <_svfiprintf_r+0x1c0>
 8004830:	08004f89 	.word	0x08004f89
 8004834:	08004f93 	.word	0x08004f93
 8004838:	00000000 	.word	0x00000000
 800483c:	08004595 	.word	0x08004595
 8004840:	08004f8f 	.word	0x08004f8f

08004844 <sbrk_aligned>:
 8004844:	b570      	push	{r4, r5, r6, lr}
 8004846:	4e0f      	ldr	r6, [pc, #60]	@ (8004884 <sbrk_aligned+0x40>)
 8004848:	460c      	mov	r4, r1
 800484a:	6831      	ldr	r1, [r6, #0]
 800484c:	4605      	mov	r5, r0
 800484e:	b911      	cbnz	r1, 8004856 <sbrk_aligned+0x12>
 8004850:	f000 fa7c 	bl	8004d4c <_sbrk_r>
 8004854:	6030      	str	r0, [r6, #0]
 8004856:	4621      	mov	r1, r4
 8004858:	4628      	mov	r0, r5
 800485a:	f000 fa77 	bl	8004d4c <_sbrk_r>
 800485e:	1c43      	adds	r3, r0, #1
 8004860:	d103      	bne.n	800486a <sbrk_aligned+0x26>
 8004862:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004866:	4620      	mov	r0, r4
 8004868:	bd70      	pop	{r4, r5, r6, pc}
 800486a:	1cc4      	adds	r4, r0, #3
 800486c:	f024 0403 	bic.w	r4, r4, #3
 8004870:	42a0      	cmp	r0, r4
 8004872:	d0f8      	beq.n	8004866 <sbrk_aligned+0x22>
 8004874:	1a21      	subs	r1, r4, r0
 8004876:	4628      	mov	r0, r5
 8004878:	f000 fa68 	bl	8004d4c <_sbrk_r>
 800487c:	3001      	adds	r0, #1
 800487e:	d1f2      	bne.n	8004866 <sbrk_aligned+0x22>
 8004880:	e7ef      	b.n	8004862 <sbrk_aligned+0x1e>
 8004882:	bf00      	nop
 8004884:	2000032c 	.word	0x2000032c

08004888 <_malloc_r>:
 8004888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800488c:	1ccd      	adds	r5, r1, #3
 800488e:	f025 0503 	bic.w	r5, r5, #3
 8004892:	3508      	adds	r5, #8
 8004894:	2d0c      	cmp	r5, #12
 8004896:	bf38      	it	cc
 8004898:	250c      	movcc	r5, #12
 800489a:	2d00      	cmp	r5, #0
 800489c:	4606      	mov	r6, r0
 800489e:	db01      	blt.n	80048a4 <_malloc_r+0x1c>
 80048a0:	42a9      	cmp	r1, r5
 80048a2:	d904      	bls.n	80048ae <_malloc_r+0x26>
 80048a4:	230c      	movs	r3, #12
 80048a6:	6033      	str	r3, [r6, #0]
 80048a8:	2000      	movs	r0, #0
 80048aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004984 <_malloc_r+0xfc>
 80048b2:	f000 f9f7 	bl	8004ca4 <__malloc_lock>
 80048b6:	f8d8 3000 	ldr.w	r3, [r8]
 80048ba:	461c      	mov	r4, r3
 80048bc:	bb44      	cbnz	r4, 8004910 <_malloc_r+0x88>
 80048be:	4629      	mov	r1, r5
 80048c0:	4630      	mov	r0, r6
 80048c2:	f7ff ffbf 	bl	8004844 <sbrk_aligned>
 80048c6:	1c43      	adds	r3, r0, #1
 80048c8:	4604      	mov	r4, r0
 80048ca:	d158      	bne.n	800497e <_malloc_r+0xf6>
 80048cc:	f8d8 4000 	ldr.w	r4, [r8]
 80048d0:	4627      	mov	r7, r4
 80048d2:	2f00      	cmp	r7, #0
 80048d4:	d143      	bne.n	800495e <_malloc_r+0xd6>
 80048d6:	2c00      	cmp	r4, #0
 80048d8:	d04b      	beq.n	8004972 <_malloc_r+0xea>
 80048da:	6823      	ldr	r3, [r4, #0]
 80048dc:	4639      	mov	r1, r7
 80048de:	4630      	mov	r0, r6
 80048e0:	eb04 0903 	add.w	r9, r4, r3
 80048e4:	f000 fa32 	bl	8004d4c <_sbrk_r>
 80048e8:	4581      	cmp	r9, r0
 80048ea:	d142      	bne.n	8004972 <_malloc_r+0xea>
 80048ec:	6821      	ldr	r1, [r4, #0]
 80048ee:	1a6d      	subs	r5, r5, r1
 80048f0:	4629      	mov	r1, r5
 80048f2:	4630      	mov	r0, r6
 80048f4:	f7ff ffa6 	bl	8004844 <sbrk_aligned>
 80048f8:	3001      	adds	r0, #1
 80048fa:	d03a      	beq.n	8004972 <_malloc_r+0xea>
 80048fc:	6823      	ldr	r3, [r4, #0]
 80048fe:	442b      	add	r3, r5
 8004900:	6023      	str	r3, [r4, #0]
 8004902:	f8d8 3000 	ldr.w	r3, [r8]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	bb62      	cbnz	r2, 8004964 <_malloc_r+0xdc>
 800490a:	f8c8 7000 	str.w	r7, [r8]
 800490e:	e00f      	b.n	8004930 <_malloc_r+0xa8>
 8004910:	6822      	ldr	r2, [r4, #0]
 8004912:	1b52      	subs	r2, r2, r5
 8004914:	d420      	bmi.n	8004958 <_malloc_r+0xd0>
 8004916:	2a0b      	cmp	r2, #11
 8004918:	d917      	bls.n	800494a <_malloc_r+0xc2>
 800491a:	1961      	adds	r1, r4, r5
 800491c:	42a3      	cmp	r3, r4
 800491e:	6025      	str	r5, [r4, #0]
 8004920:	bf18      	it	ne
 8004922:	6059      	strne	r1, [r3, #4]
 8004924:	6863      	ldr	r3, [r4, #4]
 8004926:	bf08      	it	eq
 8004928:	f8c8 1000 	streq.w	r1, [r8]
 800492c:	5162      	str	r2, [r4, r5]
 800492e:	604b      	str	r3, [r1, #4]
 8004930:	4630      	mov	r0, r6
 8004932:	f000 f9bd 	bl	8004cb0 <__malloc_unlock>
 8004936:	f104 000b 	add.w	r0, r4, #11
 800493a:	1d23      	adds	r3, r4, #4
 800493c:	f020 0007 	bic.w	r0, r0, #7
 8004940:	1ac2      	subs	r2, r0, r3
 8004942:	bf1c      	itt	ne
 8004944:	1a1b      	subne	r3, r3, r0
 8004946:	50a3      	strne	r3, [r4, r2]
 8004948:	e7af      	b.n	80048aa <_malloc_r+0x22>
 800494a:	6862      	ldr	r2, [r4, #4]
 800494c:	42a3      	cmp	r3, r4
 800494e:	bf0c      	ite	eq
 8004950:	f8c8 2000 	streq.w	r2, [r8]
 8004954:	605a      	strne	r2, [r3, #4]
 8004956:	e7eb      	b.n	8004930 <_malloc_r+0xa8>
 8004958:	4623      	mov	r3, r4
 800495a:	6864      	ldr	r4, [r4, #4]
 800495c:	e7ae      	b.n	80048bc <_malloc_r+0x34>
 800495e:	463c      	mov	r4, r7
 8004960:	687f      	ldr	r7, [r7, #4]
 8004962:	e7b6      	b.n	80048d2 <_malloc_r+0x4a>
 8004964:	461a      	mov	r2, r3
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	42a3      	cmp	r3, r4
 800496a:	d1fb      	bne.n	8004964 <_malloc_r+0xdc>
 800496c:	2300      	movs	r3, #0
 800496e:	6053      	str	r3, [r2, #4]
 8004970:	e7de      	b.n	8004930 <_malloc_r+0xa8>
 8004972:	230c      	movs	r3, #12
 8004974:	6033      	str	r3, [r6, #0]
 8004976:	4630      	mov	r0, r6
 8004978:	f000 f99a 	bl	8004cb0 <__malloc_unlock>
 800497c:	e794      	b.n	80048a8 <_malloc_r+0x20>
 800497e:	6005      	str	r5, [r0, #0]
 8004980:	e7d6      	b.n	8004930 <_malloc_r+0xa8>
 8004982:	bf00      	nop
 8004984:	20000330 	.word	0x20000330

08004988 <_printf_common>:
 8004988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800498c:	4616      	mov	r6, r2
 800498e:	4698      	mov	r8, r3
 8004990:	688a      	ldr	r2, [r1, #8]
 8004992:	690b      	ldr	r3, [r1, #16]
 8004994:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004998:	4293      	cmp	r3, r2
 800499a:	bfb8      	it	lt
 800499c:	4613      	movlt	r3, r2
 800499e:	6033      	str	r3, [r6, #0]
 80049a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80049a4:	4607      	mov	r7, r0
 80049a6:	460c      	mov	r4, r1
 80049a8:	b10a      	cbz	r2, 80049ae <_printf_common+0x26>
 80049aa:	3301      	adds	r3, #1
 80049ac:	6033      	str	r3, [r6, #0]
 80049ae:	6823      	ldr	r3, [r4, #0]
 80049b0:	0699      	lsls	r1, r3, #26
 80049b2:	bf42      	ittt	mi
 80049b4:	6833      	ldrmi	r3, [r6, #0]
 80049b6:	3302      	addmi	r3, #2
 80049b8:	6033      	strmi	r3, [r6, #0]
 80049ba:	6825      	ldr	r5, [r4, #0]
 80049bc:	f015 0506 	ands.w	r5, r5, #6
 80049c0:	d106      	bne.n	80049d0 <_printf_common+0x48>
 80049c2:	f104 0a19 	add.w	sl, r4, #25
 80049c6:	68e3      	ldr	r3, [r4, #12]
 80049c8:	6832      	ldr	r2, [r6, #0]
 80049ca:	1a9b      	subs	r3, r3, r2
 80049cc:	42ab      	cmp	r3, r5
 80049ce:	dc26      	bgt.n	8004a1e <_printf_common+0x96>
 80049d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80049d4:	6822      	ldr	r2, [r4, #0]
 80049d6:	3b00      	subs	r3, #0
 80049d8:	bf18      	it	ne
 80049da:	2301      	movne	r3, #1
 80049dc:	0692      	lsls	r2, r2, #26
 80049de:	d42b      	bmi.n	8004a38 <_printf_common+0xb0>
 80049e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80049e4:	4641      	mov	r1, r8
 80049e6:	4638      	mov	r0, r7
 80049e8:	47c8      	blx	r9
 80049ea:	3001      	adds	r0, #1
 80049ec:	d01e      	beq.n	8004a2c <_printf_common+0xa4>
 80049ee:	6823      	ldr	r3, [r4, #0]
 80049f0:	6922      	ldr	r2, [r4, #16]
 80049f2:	f003 0306 	and.w	r3, r3, #6
 80049f6:	2b04      	cmp	r3, #4
 80049f8:	bf02      	ittt	eq
 80049fa:	68e5      	ldreq	r5, [r4, #12]
 80049fc:	6833      	ldreq	r3, [r6, #0]
 80049fe:	1aed      	subeq	r5, r5, r3
 8004a00:	68a3      	ldr	r3, [r4, #8]
 8004a02:	bf0c      	ite	eq
 8004a04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a08:	2500      	movne	r5, #0
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	bfc4      	itt	gt
 8004a0e:	1a9b      	subgt	r3, r3, r2
 8004a10:	18ed      	addgt	r5, r5, r3
 8004a12:	2600      	movs	r6, #0
 8004a14:	341a      	adds	r4, #26
 8004a16:	42b5      	cmp	r5, r6
 8004a18:	d11a      	bne.n	8004a50 <_printf_common+0xc8>
 8004a1a:	2000      	movs	r0, #0
 8004a1c:	e008      	b.n	8004a30 <_printf_common+0xa8>
 8004a1e:	2301      	movs	r3, #1
 8004a20:	4652      	mov	r2, sl
 8004a22:	4641      	mov	r1, r8
 8004a24:	4638      	mov	r0, r7
 8004a26:	47c8      	blx	r9
 8004a28:	3001      	adds	r0, #1
 8004a2a:	d103      	bne.n	8004a34 <_printf_common+0xac>
 8004a2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a34:	3501      	adds	r5, #1
 8004a36:	e7c6      	b.n	80049c6 <_printf_common+0x3e>
 8004a38:	18e1      	adds	r1, r4, r3
 8004a3a:	1c5a      	adds	r2, r3, #1
 8004a3c:	2030      	movs	r0, #48	@ 0x30
 8004a3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a42:	4422      	add	r2, r4
 8004a44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a4c:	3302      	adds	r3, #2
 8004a4e:	e7c7      	b.n	80049e0 <_printf_common+0x58>
 8004a50:	2301      	movs	r3, #1
 8004a52:	4622      	mov	r2, r4
 8004a54:	4641      	mov	r1, r8
 8004a56:	4638      	mov	r0, r7
 8004a58:	47c8      	blx	r9
 8004a5a:	3001      	adds	r0, #1
 8004a5c:	d0e6      	beq.n	8004a2c <_printf_common+0xa4>
 8004a5e:	3601      	adds	r6, #1
 8004a60:	e7d9      	b.n	8004a16 <_printf_common+0x8e>
	...

08004a64 <_printf_i>:
 8004a64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a68:	7e0f      	ldrb	r7, [r1, #24]
 8004a6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a6c:	2f78      	cmp	r7, #120	@ 0x78
 8004a6e:	4691      	mov	r9, r2
 8004a70:	4680      	mov	r8, r0
 8004a72:	460c      	mov	r4, r1
 8004a74:	469a      	mov	sl, r3
 8004a76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a7a:	d807      	bhi.n	8004a8c <_printf_i+0x28>
 8004a7c:	2f62      	cmp	r7, #98	@ 0x62
 8004a7e:	d80a      	bhi.n	8004a96 <_printf_i+0x32>
 8004a80:	2f00      	cmp	r7, #0
 8004a82:	f000 80d2 	beq.w	8004c2a <_printf_i+0x1c6>
 8004a86:	2f58      	cmp	r7, #88	@ 0x58
 8004a88:	f000 80b9 	beq.w	8004bfe <_printf_i+0x19a>
 8004a8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004a94:	e03a      	b.n	8004b0c <_printf_i+0xa8>
 8004a96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004a9a:	2b15      	cmp	r3, #21
 8004a9c:	d8f6      	bhi.n	8004a8c <_printf_i+0x28>
 8004a9e:	a101      	add	r1, pc, #4	@ (adr r1, 8004aa4 <_printf_i+0x40>)
 8004aa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004aa4:	08004afd 	.word	0x08004afd
 8004aa8:	08004b11 	.word	0x08004b11
 8004aac:	08004a8d 	.word	0x08004a8d
 8004ab0:	08004a8d 	.word	0x08004a8d
 8004ab4:	08004a8d 	.word	0x08004a8d
 8004ab8:	08004a8d 	.word	0x08004a8d
 8004abc:	08004b11 	.word	0x08004b11
 8004ac0:	08004a8d 	.word	0x08004a8d
 8004ac4:	08004a8d 	.word	0x08004a8d
 8004ac8:	08004a8d 	.word	0x08004a8d
 8004acc:	08004a8d 	.word	0x08004a8d
 8004ad0:	08004c11 	.word	0x08004c11
 8004ad4:	08004b3b 	.word	0x08004b3b
 8004ad8:	08004bcb 	.word	0x08004bcb
 8004adc:	08004a8d 	.word	0x08004a8d
 8004ae0:	08004a8d 	.word	0x08004a8d
 8004ae4:	08004c33 	.word	0x08004c33
 8004ae8:	08004a8d 	.word	0x08004a8d
 8004aec:	08004b3b 	.word	0x08004b3b
 8004af0:	08004a8d 	.word	0x08004a8d
 8004af4:	08004a8d 	.word	0x08004a8d
 8004af8:	08004bd3 	.word	0x08004bd3
 8004afc:	6833      	ldr	r3, [r6, #0]
 8004afe:	1d1a      	adds	r2, r3, #4
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6032      	str	r2, [r6, #0]
 8004b04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e09d      	b.n	8004c4c <_printf_i+0x1e8>
 8004b10:	6833      	ldr	r3, [r6, #0]
 8004b12:	6820      	ldr	r0, [r4, #0]
 8004b14:	1d19      	adds	r1, r3, #4
 8004b16:	6031      	str	r1, [r6, #0]
 8004b18:	0606      	lsls	r6, r0, #24
 8004b1a:	d501      	bpl.n	8004b20 <_printf_i+0xbc>
 8004b1c:	681d      	ldr	r5, [r3, #0]
 8004b1e:	e003      	b.n	8004b28 <_printf_i+0xc4>
 8004b20:	0645      	lsls	r5, r0, #25
 8004b22:	d5fb      	bpl.n	8004b1c <_printf_i+0xb8>
 8004b24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004b28:	2d00      	cmp	r5, #0
 8004b2a:	da03      	bge.n	8004b34 <_printf_i+0xd0>
 8004b2c:	232d      	movs	r3, #45	@ 0x2d
 8004b2e:	426d      	negs	r5, r5
 8004b30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b34:	4859      	ldr	r0, [pc, #356]	@ (8004c9c <_printf_i+0x238>)
 8004b36:	230a      	movs	r3, #10
 8004b38:	e011      	b.n	8004b5e <_printf_i+0xfa>
 8004b3a:	6821      	ldr	r1, [r4, #0]
 8004b3c:	6833      	ldr	r3, [r6, #0]
 8004b3e:	0608      	lsls	r0, r1, #24
 8004b40:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b44:	d402      	bmi.n	8004b4c <_printf_i+0xe8>
 8004b46:	0649      	lsls	r1, r1, #25
 8004b48:	bf48      	it	mi
 8004b4a:	b2ad      	uxthmi	r5, r5
 8004b4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b4e:	4853      	ldr	r0, [pc, #332]	@ (8004c9c <_printf_i+0x238>)
 8004b50:	6033      	str	r3, [r6, #0]
 8004b52:	bf14      	ite	ne
 8004b54:	230a      	movne	r3, #10
 8004b56:	2308      	moveq	r3, #8
 8004b58:	2100      	movs	r1, #0
 8004b5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b5e:	6866      	ldr	r6, [r4, #4]
 8004b60:	60a6      	str	r6, [r4, #8]
 8004b62:	2e00      	cmp	r6, #0
 8004b64:	bfa2      	ittt	ge
 8004b66:	6821      	ldrge	r1, [r4, #0]
 8004b68:	f021 0104 	bicge.w	r1, r1, #4
 8004b6c:	6021      	strge	r1, [r4, #0]
 8004b6e:	b90d      	cbnz	r5, 8004b74 <_printf_i+0x110>
 8004b70:	2e00      	cmp	r6, #0
 8004b72:	d04b      	beq.n	8004c0c <_printf_i+0x1a8>
 8004b74:	4616      	mov	r6, r2
 8004b76:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b7a:	fb03 5711 	mls	r7, r3, r1, r5
 8004b7e:	5dc7      	ldrb	r7, [r0, r7]
 8004b80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b84:	462f      	mov	r7, r5
 8004b86:	42bb      	cmp	r3, r7
 8004b88:	460d      	mov	r5, r1
 8004b8a:	d9f4      	bls.n	8004b76 <_printf_i+0x112>
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d10b      	bne.n	8004ba8 <_printf_i+0x144>
 8004b90:	6823      	ldr	r3, [r4, #0]
 8004b92:	07df      	lsls	r7, r3, #31
 8004b94:	d508      	bpl.n	8004ba8 <_printf_i+0x144>
 8004b96:	6923      	ldr	r3, [r4, #16]
 8004b98:	6861      	ldr	r1, [r4, #4]
 8004b9a:	4299      	cmp	r1, r3
 8004b9c:	bfde      	ittt	le
 8004b9e:	2330      	movle	r3, #48	@ 0x30
 8004ba0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ba4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004ba8:	1b92      	subs	r2, r2, r6
 8004baa:	6122      	str	r2, [r4, #16]
 8004bac:	f8cd a000 	str.w	sl, [sp]
 8004bb0:	464b      	mov	r3, r9
 8004bb2:	aa03      	add	r2, sp, #12
 8004bb4:	4621      	mov	r1, r4
 8004bb6:	4640      	mov	r0, r8
 8004bb8:	f7ff fee6 	bl	8004988 <_printf_common>
 8004bbc:	3001      	adds	r0, #1
 8004bbe:	d14a      	bne.n	8004c56 <_printf_i+0x1f2>
 8004bc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004bc4:	b004      	add	sp, #16
 8004bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bca:	6823      	ldr	r3, [r4, #0]
 8004bcc:	f043 0320 	orr.w	r3, r3, #32
 8004bd0:	6023      	str	r3, [r4, #0]
 8004bd2:	4833      	ldr	r0, [pc, #204]	@ (8004ca0 <_printf_i+0x23c>)
 8004bd4:	2778      	movs	r7, #120	@ 0x78
 8004bd6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	6831      	ldr	r1, [r6, #0]
 8004bde:	061f      	lsls	r7, r3, #24
 8004be0:	f851 5b04 	ldr.w	r5, [r1], #4
 8004be4:	d402      	bmi.n	8004bec <_printf_i+0x188>
 8004be6:	065f      	lsls	r7, r3, #25
 8004be8:	bf48      	it	mi
 8004bea:	b2ad      	uxthmi	r5, r5
 8004bec:	6031      	str	r1, [r6, #0]
 8004bee:	07d9      	lsls	r1, r3, #31
 8004bf0:	bf44      	itt	mi
 8004bf2:	f043 0320 	orrmi.w	r3, r3, #32
 8004bf6:	6023      	strmi	r3, [r4, #0]
 8004bf8:	b11d      	cbz	r5, 8004c02 <_printf_i+0x19e>
 8004bfa:	2310      	movs	r3, #16
 8004bfc:	e7ac      	b.n	8004b58 <_printf_i+0xf4>
 8004bfe:	4827      	ldr	r0, [pc, #156]	@ (8004c9c <_printf_i+0x238>)
 8004c00:	e7e9      	b.n	8004bd6 <_printf_i+0x172>
 8004c02:	6823      	ldr	r3, [r4, #0]
 8004c04:	f023 0320 	bic.w	r3, r3, #32
 8004c08:	6023      	str	r3, [r4, #0]
 8004c0a:	e7f6      	b.n	8004bfa <_printf_i+0x196>
 8004c0c:	4616      	mov	r6, r2
 8004c0e:	e7bd      	b.n	8004b8c <_printf_i+0x128>
 8004c10:	6833      	ldr	r3, [r6, #0]
 8004c12:	6825      	ldr	r5, [r4, #0]
 8004c14:	6961      	ldr	r1, [r4, #20]
 8004c16:	1d18      	adds	r0, r3, #4
 8004c18:	6030      	str	r0, [r6, #0]
 8004c1a:	062e      	lsls	r6, r5, #24
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	d501      	bpl.n	8004c24 <_printf_i+0x1c0>
 8004c20:	6019      	str	r1, [r3, #0]
 8004c22:	e002      	b.n	8004c2a <_printf_i+0x1c6>
 8004c24:	0668      	lsls	r0, r5, #25
 8004c26:	d5fb      	bpl.n	8004c20 <_printf_i+0x1bc>
 8004c28:	8019      	strh	r1, [r3, #0]
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	6123      	str	r3, [r4, #16]
 8004c2e:	4616      	mov	r6, r2
 8004c30:	e7bc      	b.n	8004bac <_printf_i+0x148>
 8004c32:	6833      	ldr	r3, [r6, #0]
 8004c34:	1d1a      	adds	r2, r3, #4
 8004c36:	6032      	str	r2, [r6, #0]
 8004c38:	681e      	ldr	r6, [r3, #0]
 8004c3a:	6862      	ldr	r2, [r4, #4]
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	4630      	mov	r0, r6
 8004c40:	f7fb faee 	bl	8000220 <memchr>
 8004c44:	b108      	cbz	r0, 8004c4a <_printf_i+0x1e6>
 8004c46:	1b80      	subs	r0, r0, r6
 8004c48:	6060      	str	r0, [r4, #4]
 8004c4a:	6863      	ldr	r3, [r4, #4]
 8004c4c:	6123      	str	r3, [r4, #16]
 8004c4e:	2300      	movs	r3, #0
 8004c50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c54:	e7aa      	b.n	8004bac <_printf_i+0x148>
 8004c56:	6923      	ldr	r3, [r4, #16]
 8004c58:	4632      	mov	r2, r6
 8004c5a:	4649      	mov	r1, r9
 8004c5c:	4640      	mov	r0, r8
 8004c5e:	47d0      	blx	sl
 8004c60:	3001      	adds	r0, #1
 8004c62:	d0ad      	beq.n	8004bc0 <_printf_i+0x15c>
 8004c64:	6823      	ldr	r3, [r4, #0]
 8004c66:	079b      	lsls	r3, r3, #30
 8004c68:	d413      	bmi.n	8004c92 <_printf_i+0x22e>
 8004c6a:	68e0      	ldr	r0, [r4, #12]
 8004c6c:	9b03      	ldr	r3, [sp, #12]
 8004c6e:	4298      	cmp	r0, r3
 8004c70:	bfb8      	it	lt
 8004c72:	4618      	movlt	r0, r3
 8004c74:	e7a6      	b.n	8004bc4 <_printf_i+0x160>
 8004c76:	2301      	movs	r3, #1
 8004c78:	4632      	mov	r2, r6
 8004c7a:	4649      	mov	r1, r9
 8004c7c:	4640      	mov	r0, r8
 8004c7e:	47d0      	blx	sl
 8004c80:	3001      	adds	r0, #1
 8004c82:	d09d      	beq.n	8004bc0 <_printf_i+0x15c>
 8004c84:	3501      	adds	r5, #1
 8004c86:	68e3      	ldr	r3, [r4, #12]
 8004c88:	9903      	ldr	r1, [sp, #12]
 8004c8a:	1a5b      	subs	r3, r3, r1
 8004c8c:	42ab      	cmp	r3, r5
 8004c8e:	dcf2      	bgt.n	8004c76 <_printf_i+0x212>
 8004c90:	e7eb      	b.n	8004c6a <_printf_i+0x206>
 8004c92:	2500      	movs	r5, #0
 8004c94:	f104 0619 	add.w	r6, r4, #25
 8004c98:	e7f5      	b.n	8004c86 <_printf_i+0x222>
 8004c9a:	bf00      	nop
 8004c9c:	08004f9a 	.word	0x08004f9a
 8004ca0:	08004fab 	.word	0x08004fab

08004ca4 <__malloc_lock>:
 8004ca4:	4801      	ldr	r0, [pc, #4]	@ (8004cac <__malloc_lock+0x8>)
 8004ca6:	f7ff bc73 	b.w	8004590 <__retarget_lock_acquire_recursive>
 8004caa:	bf00      	nop
 8004cac:	20000328 	.word	0x20000328

08004cb0 <__malloc_unlock>:
 8004cb0:	4801      	ldr	r0, [pc, #4]	@ (8004cb8 <__malloc_unlock+0x8>)
 8004cb2:	f7ff bc6e 	b.w	8004592 <__retarget_lock_release_recursive>
 8004cb6:	bf00      	nop
 8004cb8:	20000328 	.word	0x20000328

08004cbc <_realloc_r>:
 8004cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cc0:	4680      	mov	r8, r0
 8004cc2:	4615      	mov	r5, r2
 8004cc4:	460c      	mov	r4, r1
 8004cc6:	b921      	cbnz	r1, 8004cd2 <_realloc_r+0x16>
 8004cc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ccc:	4611      	mov	r1, r2
 8004cce:	f7ff bddb 	b.w	8004888 <_malloc_r>
 8004cd2:	b92a      	cbnz	r2, 8004ce0 <_realloc_r+0x24>
 8004cd4:	f000 f858 	bl	8004d88 <_free_r>
 8004cd8:	2400      	movs	r4, #0
 8004cda:	4620      	mov	r0, r4
 8004cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ce0:	f000 f89c 	bl	8004e1c <_malloc_usable_size_r>
 8004ce4:	4285      	cmp	r5, r0
 8004ce6:	4606      	mov	r6, r0
 8004ce8:	d802      	bhi.n	8004cf0 <_realloc_r+0x34>
 8004cea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004cee:	d8f4      	bhi.n	8004cda <_realloc_r+0x1e>
 8004cf0:	4629      	mov	r1, r5
 8004cf2:	4640      	mov	r0, r8
 8004cf4:	f7ff fdc8 	bl	8004888 <_malloc_r>
 8004cf8:	4607      	mov	r7, r0
 8004cfa:	2800      	cmp	r0, #0
 8004cfc:	d0ec      	beq.n	8004cd8 <_realloc_r+0x1c>
 8004cfe:	42b5      	cmp	r5, r6
 8004d00:	462a      	mov	r2, r5
 8004d02:	4621      	mov	r1, r4
 8004d04:	bf28      	it	cs
 8004d06:	4632      	movcs	r2, r6
 8004d08:	f000 f830 	bl	8004d6c <memcpy>
 8004d0c:	4621      	mov	r1, r4
 8004d0e:	4640      	mov	r0, r8
 8004d10:	f000 f83a 	bl	8004d88 <_free_r>
 8004d14:	463c      	mov	r4, r7
 8004d16:	e7e0      	b.n	8004cda <_realloc_r+0x1e>

08004d18 <memmove>:
 8004d18:	4288      	cmp	r0, r1
 8004d1a:	b510      	push	{r4, lr}
 8004d1c:	eb01 0402 	add.w	r4, r1, r2
 8004d20:	d902      	bls.n	8004d28 <memmove+0x10>
 8004d22:	4284      	cmp	r4, r0
 8004d24:	4623      	mov	r3, r4
 8004d26:	d807      	bhi.n	8004d38 <memmove+0x20>
 8004d28:	1e43      	subs	r3, r0, #1
 8004d2a:	42a1      	cmp	r1, r4
 8004d2c:	d008      	beq.n	8004d40 <memmove+0x28>
 8004d2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d36:	e7f8      	b.n	8004d2a <memmove+0x12>
 8004d38:	4402      	add	r2, r0
 8004d3a:	4601      	mov	r1, r0
 8004d3c:	428a      	cmp	r2, r1
 8004d3e:	d100      	bne.n	8004d42 <memmove+0x2a>
 8004d40:	bd10      	pop	{r4, pc}
 8004d42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d4a:	e7f7      	b.n	8004d3c <memmove+0x24>

08004d4c <_sbrk_r>:
 8004d4c:	b538      	push	{r3, r4, r5, lr}
 8004d4e:	4d06      	ldr	r5, [pc, #24]	@ (8004d68 <_sbrk_r+0x1c>)
 8004d50:	2300      	movs	r3, #0
 8004d52:	4604      	mov	r4, r0
 8004d54:	4608      	mov	r0, r1
 8004d56:	602b      	str	r3, [r5, #0]
 8004d58:	f7fc f840 	bl	8000ddc <_sbrk>
 8004d5c:	1c43      	adds	r3, r0, #1
 8004d5e:	d102      	bne.n	8004d66 <_sbrk_r+0x1a>
 8004d60:	682b      	ldr	r3, [r5, #0]
 8004d62:	b103      	cbz	r3, 8004d66 <_sbrk_r+0x1a>
 8004d64:	6023      	str	r3, [r4, #0]
 8004d66:	bd38      	pop	{r3, r4, r5, pc}
 8004d68:	20000334 	.word	0x20000334

08004d6c <memcpy>:
 8004d6c:	440a      	add	r2, r1
 8004d6e:	4291      	cmp	r1, r2
 8004d70:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004d74:	d100      	bne.n	8004d78 <memcpy+0xc>
 8004d76:	4770      	bx	lr
 8004d78:	b510      	push	{r4, lr}
 8004d7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d82:	4291      	cmp	r1, r2
 8004d84:	d1f9      	bne.n	8004d7a <memcpy+0xe>
 8004d86:	bd10      	pop	{r4, pc}

08004d88 <_free_r>:
 8004d88:	b538      	push	{r3, r4, r5, lr}
 8004d8a:	4605      	mov	r5, r0
 8004d8c:	2900      	cmp	r1, #0
 8004d8e:	d041      	beq.n	8004e14 <_free_r+0x8c>
 8004d90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d94:	1f0c      	subs	r4, r1, #4
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	bfb8      	it	lt
 8004d9a:	18e4      	addlt	r4, r4, r3
 8004d9c:	f7ff ff82 	bl	8004ca4 <__malloc_lock>
 8004da0:	4a1d      	ldr	r2, [pc, #116]	@ (8004e18 <_free_r+0x90>)
 8004da2:	6813      	ldr	r3, [r2, #0]
 8004da4:	b933      	cbnz	r3, 8004db4 <_free_r+0x2c>
 8004da6:	6063      	str	r3, [r4, #4]
 8004da8:	6014      	str	r4, [r2, #0]
 8004daa:	4628      	mov	r0, r5
 8004dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004db0:	f7ff bf7e 	b.w	8004cb0 <__malloc_unlock>
 8004db4:	42a3      	cmp	r3, r4
 8004db6:	d908      	bls.n	8004dca <_free_r+0x42>
 8004db8:	6820      	ldr	r0, [r4, #0]
 8004dba:	1821      	adds	r1, r4, r0
 8004dbc:	428b      	cmp	r3, r1
 8004dbe:	bf01      	itttt	eq
 8004dc0:	6819      	ldreq	r1, [r3, #0]
 8004dc2:	685b      	ldreq	r3, [r3, #4]
 8004dc4:	1809      	addeq	r1, r1, r0
 8004dc6:	6021      	streq	r1, [r4, #0]
 8004dc8:	e7ed      	b.n	8004da6 <_free_r+0x1e>
 8004dca:	461a      	mov	r2, r3
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	b10b      	cbz	r3, 8004dd4 <_free_r+0x4c>
 8004dd0:	42a3      	cmp	r3, r4
 8004dd2:	d9fa      	bls.n	8004dca <_free_r+0x42>
 8004dd4:	6811      	ldr	r1, [r2, #0]
 8004dd6:	1850      	adds	r0, r2, r1
 8004dd8:	42a0      	cmp	r0, r4
 8004dda:	d10b      	bne.n	8004df4 <_free_r+0x6c>
 8004ddc:	6820      	ldr	r0, [r4, #0]
 8004dde:	4401      	add	r1, r0
 8004de0:	1850      	adds	r0, r2, r1
 8004de2:	4283      	cmp	r3, r0
 8004de4:	6011      	str	r1, [r2, #0]
 8004de6:	d1e0      	bne.n	8004daa <_free_r+0x22>
 8004de8:	6818      	ldr	r0, [r3, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	6053      	str	r3, [r2, #4]
 8004dee:	4408      	add	r0, r1
 8004df0:	6010      	str	r0, [r2, #0]
 8004df2:	e7da      	b.n	8004daa <_free_r+0x22>
 8004df4:	d902      	bls.n	8004dfc <_free_r+0x74>
 8004df6:	230c      	movs	r3, #12
 8004df8:	602b      	str	r3, [r5, #0]
 8004dfa:	e7d6      	b.n	8004daa <_free_r+0x22>
 8004dfc:	6820      	ldr	r0, [r4, #0]
 8004dfe:	1821      	adds	r1, r4, r0
 8004e00:	428b      	cmp	r3, r1
 8004e02:	bf04      	itt	eq
 8004e04:	6819      	ldreq	r1, [r3, #0]
 8004e06:	685b      	ldreq	r3, [r3, #4]
 8004e08:	6063      	str	r3, [r4, #4]
 8004e0a:	bf04      	itt	eq
 8004e0c:	1809      	addeq	r1, r1, r0
 8004e0e:	6021      	streq	r1, [r4, #0]
 8004e10:	6054      	str	r4, [r2, #4]
 8004e12:	e7ca      	b.n	8004daa <_free_r+0x22>
 8004e14:	bd38      	pop	{r3, r4, r5, pc}
 8004e16:	bf00      	nop
 8004e18:	20000330 	.word	0x20000330

08004e1c <_malloc_usable_size_r>:
 8004e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e20:	1f18      	subs	r0, r3, #4
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	bfbc      	itt	lt
 8004e26:	580b      	ldrlt	r3, [r1, r0]
 8004e28:	18c0      	addlt	r0, r0, r3
 8004e2a:	4770      	bx	lr

08004e2c <_init>:
 8004e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e2e:	bf00      	nop
 8004e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e32:	bc08      	pop	{r3}
 8004e34:	469e      	mov	lr, r3
 8004e36:	4770      	bx	lr

08004e38 <_fini>:
 8004e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e3a:	bf00      	nop
 8004e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e3e:	bc08      	pop	{r3}
 8004e40:	469e      	mov	lr, r3
 8004e42:	4770      	bx	lr
