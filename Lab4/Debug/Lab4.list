
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f68  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08006130  08006130  00007130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006328  08006328  00008014  2**0
                  CONTENTS
  4 .ARM          00000008  08006328  08006328  00007328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006330  08006330  00008014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006330  08006330  00007330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006334  08006334  00007334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08006338  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000014  0800634c  00008014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  0800634c  0000818c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb98  00000000  00000000  00008044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022de  00000000  00000000  00017bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  00019ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b63  00000000  00000000  0001ad48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023525  00000000  00000000  0001b8ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001131b  00000000  00000000  0003edd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ded1f  00000000  00000000  000500eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012ee0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004178  00000000  00000000  0012ee50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00132fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000014 	.word	0x20000014
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006118 	.word	0x08006118

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000018 	.word	0x20000018
 8000204:	08006118 	.word	0x08006118

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_uldivmod>:
 8000b44:	b953      	cbnz	r3, 8000b5c <__aeabi_uldivmod+0x18>
 8000b46:	b94a      	cbnz	r2, 8000b5c <__aeabi_uldivmod+0x18>
 8000b48:	2900      	cmp	r1, #0
 8000b4a:	bf08      	it	eq
 8000b4c:	2800      	cmpeq	r0, #0
 8000b4e:	bf1c      	itt	ne
 8000b50:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b54:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b58:	f000 b96a 	b.w	8000e30 <__aeabi_idiv0>
 8000b5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b64:	f000 f806 	bl	8000b74 <__udivmoddi4>
 8000b68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b70:	b004      	add	sp, #16
 8000b72:	4770      	bx	lr

08000b74 <__udivmoddi4>:
 8000b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b78:	9d08      	ldr	r5, [sp, #32]
 8000b7a:	460c      	mov	r4, r1
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d14e      	bne.n	8000c1e <__udivmoddi4+0xaa>
 8000b80:	4694      	mov	ip, r2
 8000b82:	458c      	cmp	ip, r1
 8000b84:	4686      	mov	lr, r0
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	d962      	bls.n	8000c52 <__udivmoddi4+0xde>
 8000b8c:	b14a      	cbz	r2, 8000ba2 <__udivmoddi4+0x2e>
 8000b8e:	f1c2 0320 	rsb	r3, r2, #32
 8000b92:	4091      	lsls	r1, r2
 8000b94:	fa20 f303 	lsr.w	r3, r0, r3
 8000b98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b9c:	4319      	orrs	r1, r3
 8000b9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ba2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba6:	fa1f f68c 	uxth.w	r6, ip
 8000baa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bb2:	fb07 1114 	mls	r1, r7, r4, r1
 8000bb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bba:	fb04 f106 	mul.w	r1, r4, r6
 8000bbe:	4299      	cmp	r1, r3
 8000bc0:	d90a      	bls.n	8000bd8 <__udivmoddi4+0x64>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000bca:	f080 8112 	bcs.w	8000df2 <__udivmoddi4+0x27e>
 8000bce:	4299      	cmp	r1, r3
 8000bd0:	f240 810f 	bls.w	8000df2 <__udivmoddi4+0x27e>
 8000bd4:	3c02      	subs	r4, #2
 8000bd6:	4463      	add	r3, ip
 8000bd8:	1a59      	subs	r1, r3, r1
 8000bda:	fa1f f38e 	uxth.w	r3, lr
 8000bde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be2:	fb07 1110 	mls	r1, r7, r0, r1
 8000be6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bea:	fb00 f606 	mul.w	r6, r0, r6
 8000bee:	429e      	cmp	r6, r3
 8000bf0:	d90a      	bls.n	8000c08 <__udivmoddi4+0x94>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000bfa:	f080 80fc 	bcs.w	8000df6 <__udivmoddi4+0x282>
 8000bfe:	429e      	cmp	r6, r3
 8000c00:	f240 80f9 	bls.w	8000df6 <__udivmoddi4+0x282>
 8000c04:	4463      	add	r3, ip
 8000c06:	3802      	subs	r0, #2
 8000c08:	1b9b      	subs	r3, r3, r6
 8000c0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c0e:	2100      	movs	r1, #0
 8000c10:	b11d      	cbz	r5, 8000c1a <__udivmoddi4+0xa6>
 8000c12:	40d3      	lsrs	r3, r2
 8000c14:	2200      	movs	r2, #0
 8000c16:	e9c5 3200 	strd	r3, r2, [r5]
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	428b      	cmp	r3, r1
 8000c20:	d905      	bls.n	8000c2e <__udivmoddi4+0xba>
 8000c22:	b10d      	cbz	r5, 8000c28 <__udivmoddi4+0xb4>
 8000c24:	e9c5 0100 	strd	r0, r1, [r5]
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4608      	mov	r0, r1
 8000c2c:	e7f5      	b.n	8000c1a <__udivmoddi4+0xa6>
 8000c2e:	fab3 f183 	clz	r1, r3
 8000c32:	2900      	cmp	r1, #0
 8000c34:	d146      	bne.n	8000cc4 <__udivmoddi4+0x150>
 8000c36:	42a3      	cmp	r3, r4
 8000c38:	d302      	bcc.n	8000c40 <__udivmoddi4+0xcc>
 8000c3a:	4290      	cmp	r0, r2
 8000c3c:	f0c0 80f0 	bcc.w	8000e20 <__udivmoddi4+0x2ac>
 8000c40:	1a86      	subs	r6, r0, r2
 8000c42:	eb64 0303 	sbc.w	r3, r4, r3
 8000c46:	2001      	movs	r0, #1
 8000c48:	2d00      	cmp	r5, #0
 8000c4a:	d0e6      	beq.n	8000c1a <__udivmoddi4+0xa6>
 8000c4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c50:	e7e3      	b.n	8000c1a <__udivmoddi4+0xa6>
 8000c52:	2a00      	cmp	r2, #0
 8000c54:	f040 8090 	bne.w	8000d78 <__udivmoddi4+0x204>
 8000c58:	eba1 040c 	sub.w	r4, r1, ip
 8000c5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c60:	fa1f f78c 	uxth.w	r7, ip
 8000c64:	2101      	movs	r1, #1
 8000c66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c76:	fb07 f006 	mul.w	r0, r7, r6
 8000c7a:	4298      	cmp	r0, r3
 8000c7c:	d908      	bls.n	8000c90 <__udivmoddi4+0x11c>
 8000c7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c82:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0x11a>
 8000c88:	4298      	cmp	r0, r3
 8000c8a:	f200 80cd 	bhi.w	8000e28 <__udivmoddi4+0x2b4>
 8000c8e:	4626      	mov	r6, r4
 8000c90:	1a1c      	subs	r4, r3, r0
 8000c92:	fa1f f38e 	uxth.w	r3, lr
 8000c96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ca2:	fb00 f707 	mul.w	r7, r0, r7
 8000ca6:	429f      	cmp	r7, r3
 8000ca8:	d908      	bls.n	8000cbc <__udivmoddi4+0x148>
 8000caa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cae:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x146>
 8000cb4:	429f      	cmp	r7, r3
 8000cb6:	f200 80b0 	bhi.w	8000e1a <__udivmoddi4+0x2a6>
 8000cba:	4620      	mov	r0, r4
 8000cbc:	1bdb      	subs	r3, r3, r7
 8000cbe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cc2:	e7a5      	b.n	8000c10 <__udivmoddi4+0x9c>
 8000cc4:	f1c1 0620 	rsb	r6, r1, #32
 8000cc8:	408b      	lsls	r3, r1
 8000cca:	fa22 f706 	lsr.w	r7, r2, r6
 8000cce:	431f      	orrs	r7, r3
 8000cd0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cd4:	fa04 f301 	lsl.w	r3, r4, r1
 8000cd8:	ea43 030c 	orr.w	r3, r3, ip
 8000cdc:	40f4      	lsrs	r4, r6
 8000cde:	fa00 f801 	lsl.w	r8, r0, r1
 8000ce2:	0c38      	lsrs	r0, r7, #16
 8000ce4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ce8:	fbb4 fef0 	udiv	lr, r4, r0
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fb00 441e 	mls	r4, r0, lr, r4
 8000cf4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cf8:	fb0e f90c 	mul.w	r9, lr, ip
 8000cfc:	45a1      	cmp	r9, r4
 8000cfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x1a6>
 8000d04:	193c      	adds	r4, r7, r4
 8000d06:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d0a:	f080 8084 	bcs.w	8000e16 <__udivmoddi4+0x2a2>
 8000d0e:	45a1      	cmp	r9, r4
 8000d10:	f240 8081 	bls.w	8000e16 <__udivmoddi4+0x2a2>
 8000d14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d18:	443c      	add	r4, r7
 8000d1a:	eba4 0409 	sub.w	r4, r4, r9
 8000d1e:	fa1f f983 	uxth.w	r9, r3
 8000d22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d26:	fb00 4413 	mls	r4, r0, r3, r4
 8000d2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d32:	45a4      	cmp	ip, r4
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x1d2>
 8000d36:	193c      	adds	r4, r7, r4
 8000d38:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000d3c:	d267      	bcs.n	8000e0e <__udivmoddi4+0x29a>
 8000d3e:	45a4      	cmp	ip, r4
 8000d40:	d965      	bls.n	8000e0e <__udivmoddi4+0x29a>
 8000d42:	3b02      	subs	r3, #2
 8000d44:	443c      	add	r4, r7
 8000d46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d4e:	eba4 040c 	sub.w	r4, r4, ip
 8000d52:	429c      	cmp	r4, r3
 8000d54:	46ce      	mov	lr, r9
 8000d56:	469c      	mov	ip, r3
 8000d58:	d351      	bcc.n	8000dfe <__udivmoddi4+0x28a>
 8000d5a:	d04e      	beq.n	8000dfa <__udivmoddi4+0x286>
 8000d5c:	b155      	cbz	r5, 8000d74 <__udivmoddi4+0x200>
 8000d5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d62:	eb64 040c 	sbc.w	r4, r4, ip
 8000d66:	fa04 f606 	lsl.w	r6, r4, r6
 8000d6a:	40cb      	lsrs	r3, r1
 8000d6c:	431e      	orrs	r6, r3
 8000d6e:	40cc      	lsrs	r4, r1
 8000d70:	e9c5 6400 	strd	r6, r4, [r5]
 8000d74:	2100      	movs	r1, #0
 8000d76:	e750      	b.n	8000c1a <__udivmoddi4+0xa6>
 8000d78:	f1c2 0320 	rsb	r3, r2, #32
 8000d7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d84:	fa24 f303 	lsr.w	r3, r4, r3
 8000d88:	4094      	lsls	r4, r2
 8000d8a:	430c      	orrs	r4, r1
 8000d8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d94:	fa1f f78c 	uxth.w	r7, ip
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da6:	fb00 f107 	mul.w	r1, r0, r7
 8000daa:	4299      	cmp	r1, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x24c>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000db6:	d22c      	bcs.n	8000e12 <__udivmoddi4+0x29e>
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d92a      	bls.n	8000e12 <__udivmoddi4+0x29e>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	4463      	add	r3, ip
 8000dc0:	1a5b      	subs	r3, r3, r1
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000dcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd0:	fb01 f307 	mul.w	r3, r1, r7
 8000dd4:	42a3      	cmp	r3, r4
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x276>
 8000dd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ddc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000de0:	d213      	bcs.n	8000e0a <__udivmoddi4+0x296>
 8000de2:	42a3      	cmp	r3, r4
 8000de4:	d911      	bls.n	8000e0a <__udivmoddi4+0x296>
 8000de6:	3902      	subs	r1, #2
 8000de8:	4464      	add	r4, ip
 8000dea:	1ae4      	subs	r4, r4, r3
 8000dec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000df0:	e739      	b.n	8000c66 <__udivmoddi4+0xf2>
 8000df2:	4604      	mov	r4, r0
 8000df4:	e6f0      	b.n	8000bd8 <__udivmoddi4+0x64>
 8000df6:	4608      	mov	r0, r1
 8000df8:	e706      	b.n	8000c08 <__udivmoddi4+0x94>
 8000dfa:	45c8      	cmp	r8, r9
 8000dfc:	d2ae      	bcs.n	8000d5c <__udivmoddi4+0x1e8>
 8000dfe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e02:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e06:	3801      	subs	r0, #1
 8000e08:	e7a8      	b.n	8000d5c <__udivmoddi4+0x1e8>
 8000e0a:	4631      	mov	r1, r6
 8000e0c:	e7ed      	b.n	8000dea <__udivmoddi4+0x276>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	e799      	b.n	8000d46 <__udivmoddi4+0x1d2>
 8000e12:	4630      	mov	r0, r6
 8000e14:	e7d4      	b.n	8000dc0 <__udivmoddi4+0x24c>
 8000e16:	46d6      	mov	lr, sl
 8000e18:	e77f      	b.n	8000d1a <__udivmoddi4+0x1a6>
 8000e1a:	4463      	add	r3, ip
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	e74d      	b.n	8000cbc <__udivmoddi4+0x148>
 8000e20:	4606      	mov	r6, r0
 8000e22:	4623      	mov	r3, r4
 8000e24:	4608      	mov	r0, r1
 8000e26:	e70f      	b.n	8000c48 <__udivmoddi4+0xd4>
 8000e28:	3e02      	subs	r6, #2
 8000e2a:	4463      	add	r3, ip
 8000e2c:	e730      	b.n	8000c90 <__udivmoddi4+0x11c>
 8000e2e:	bf00      	nop

08000e30 <__aeabi_idiv0>:
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop

08000e34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e38:	f000 fc64 	bl	8001704 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e3c:	f000 f822 	bl	8000e84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e40:	f000 f978 	bl	8001134 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e44:	f000 f956 	bl	80010f4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000e48:	f000 f88a 	bl	8000f60 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000e4c:	f000 f928 	bl	80010a0 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 8000e50:	f000 f902 	bl	8001058 <MX_TIM10_Init>
  MX_DAC_Init();
 8000e54:	f000 f8d6 	bl	8001004 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  // timer 6 start
  HAL_TIM_Base_Start_IT(&htim10); // millis 
 8000e58:	4806      	ldr	r0, [pc, #24]	@ (8000e74 <main+0x40>)
 8000e5a:	f002 fe57 	bl	8003b0c <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4805      	ldr	r0, [pc, #20]	@ (8000e78 <main+0x44>)
 8000e62:	f001 fa16 	bl	8002292 <HAL_DAC_Start>

  // start uart 
  HAL_UART_Receive_IT(&huart2, (uint8_t*)&command, sizeof(command)); // start uart receive
 8000e66:	2204      	movs	r2, #4
 8000e68:	4904      	ldr	r1, [pc, #16]	@ (8000e7c <main+0x48>)
 8000e6a:	4805      	ldr	r0, [pc, #20]	@ (8000e80 <main+0x4c>)
 8000e6c:	f003 f971 	bl	8004152 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <main+0x3c>
 8000e74:	200000ec 	.word	0x200000ec
 8000e78:	200000d8 	.word	0x200000d8
 8000e7c:	20000184 	.word	0x20000184
 8000e80:	20000134 	.word	0x20000134

08000e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b094      	sub	sp, #80	@ 0x50
 8000e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8a:	f107 031c 	add.w	r3, r7, #28
 8000e8e:	2234      	movs	r2, #52	@ 0x34
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f004 f8e2 	bl	800505c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e98:	f107 0308 	add.w	r3, r7, #8
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	4b2a      	ldr	r3, [pc, #168]	@ (8000f58 <SystemClock_Config+0xd4>)
 8000eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb0:	4a29      	ldr	r2, [pc, #164]	@ (8000f58 <SystemClock_Config+0xd4>)
 8000eb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eb6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eb8:	4b27      	ldr	r3, [pc, #156]	@ (8000f58 <SystemClock_Config+0xd4>)
 8000eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	4b24      	ldr	r3, [pc, #144]	@ (8000f5c <SystemClock_Config+0xd8>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ed0:	4a22      	ldr	r2, [pc, #136]	@ (8000f5c <SystemClock_Config+0xd8>)
 8000ed2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	4b20      	ldr	r3, [pc, #128]	@ (8000f5c <SystemClock_Config+0xd8>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ee0:	603b      	str	r3, [r7, #0]
 8000ee2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eec:	2310      	movs	r3, #16
 8000eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ef8:	2308      	movs	r3, #8
 8000efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000efc:	2350      	movs	r3, #80	@ 0x50
 8000efe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f00:	2302      	movs	r3, #2
 8000f02:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f04:	2302      	movs	r3, #2
 8000f06:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	4618      	mov	r0, r3
 8000f12:	f002 fb0d 	bl	8003530 <HAL_RCC_OscConfig>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000f1c:	f000 fa08 	bl	8001330 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f20:	230f      	movs	r3, #15
 8000f22:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f24:	2302      	movs	r3, #2
 8000f26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f36:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f38:	f107 0308 	add.w	r3, r7, #8
 8000f3c:	2102      	movs	r1, #2
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f002 f832 	bl	8002fa8 <HAL_RCC_ClockConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000f4a:	f000 f9f1 	bl	8001330 <Error_Handler>
  }
}
 8000f4e:	bf00      	nop
 8000f50:	3750      	adds	r7, #80	@ 0x50
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40007000 	.word	0x40007000

08000f60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f66:	463b      	mov	r3, r7
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f72:	4b21      	ldr	r3, [pc, #132]	@ (8000ff8 <MX_ADC1_Init+0x98>)
 8000f74:	4a21      	ldr	r2, [pc, #132]	@ (8000ffc <MX_ADC1_Init+0x9c>)
 8000f76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f78:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff8 <MX_ADC1_Init+0x98>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff8 <MX_ADC1_Init+0x98>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f84:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff8 <MX_ADC1_Init+0x98>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff8 <MX_ADC1_Init+0x98>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f90:	4b19      	ldr	r3, [pc, #100]	@ (8000ff8 <MX_ADC1_Init+0x98>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f98:	4b17      	ldr	r3, [pc, #92]	@ (8000ff8 <MX_ADC1_Init+0x98>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f9e:	4b16      	ldr	r3, [pc, #88]	@ (8000ff8 <MX_ADC1_Init+0x98>)
 8000fa0:	4a17      	ldr	r2, [pc, #92]	@ (8001000 <MX_ADC1_Init+0xa0>)
 8000fa2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fa4:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <MX_ADC1_Init+0x98>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000faa:	4b13      	ldr	r3, [pc, #76]	@ (8000ff8 <MX_ADC1_Init+0x98>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <MX_ADC1_Init+0x98>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <MX_ADC1_Init+0x98>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fbe:	480e      	ldr	r0, [pc, #56]	@ (8000ff8 <MX_ADC1_Init+0x98>)
 8000fc0:	f000 fc12 	bl	80017e8 <HAL_ADC_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000fca:	f000 f9b1 	bl	8001330 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000fce:	230c      	movs	r3, #12
 8000fd0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fda:	463b      	mov	r3, r7
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4806      	ldr	r0, [pc, #24]	@ (8000ff8 <MX_ADC1_Init+0x98>)
 8000fe0:	f000 fd74 	bl	8001acc <HAL_ADC_ConfigChannel>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000fea:	f000 f9a1 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000030 	.word	0x20000030
 8000ffc:	40012000 	.word	0x40012000
 8001000:	0f000001 	.word	0x0f000001

08001004 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800100a:	463b      	mov	r3, r7
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001012:	4b0f      	ldr	r3, [pc, #60]	@ (8001050 <MX_DAC_Init+0x4c>)
 8001014:	4a0f      	ldr	r2, [pc, #60]	@ (8001054 <MX_DAC_Init+0x50>)
 8001016:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001018:	480d      	ldr	r0, [pc, #52]	@ (8001050 <MX_DAC_Init+0x4c>)
 800101a:	f001 f918 	bl	800224e <HAL_DAC_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001024:	f000 f984 	bl	8001330 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001028:	2300      	movs	r3, #0
 800102a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800102c:	2300      	movs	r3, #0
 800102e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001030:	463b      	mov	r3, r7
 8001032:	2200      	movs	r2, #0
 8001034:	4619      	mov	r1, r3
 8001036:	4806      	ldr	r0, [pc, #24]	@ (8001050 <MX_DAC_Init+0x4c>)
 8001038:	f001 f9ac 	bl	8002394 <HAL_DAC_ConfigChannel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001042:	f000 f975 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200000d8 	.word	0x200000d8
 8001054:	40007400 	.word	0x40007400

08001058 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800105c:	4b0e      	ldr	r3, [pc, #56]	@ (8001098 <MX_TIM10_Init+0x40>)
 800105e:	4a0f      	ldr	r2, [pc, #60]	@ (800109c <MX_TIM10_Init+0x44>)
 8001060:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 79;
 8001062:	4b0d      	ldr	r3, [pc, #52]	@ (8001098 <MX_TIM10_Init+0x40>)
 8001064:	224f      	movs	r2, #79	@ 0x4f
 8001066:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001068:	4b0b      	ldr	r3, [pc, #44]	@ (8001098 <MX_TIM10_Init+0x40>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 800106e:	4b0a      	ldr	r3, [pc, #40]	@ (8001098 <MX_TIM10_Init+0x40>)
 8001070:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001074:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001076:	4b08      	ldr	r3, [pc, #32]	@ (8001098 <MX_TIM10_Init+0x40>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107c:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <MX_TIM10_Init+0x40>)
 800107e:	2200      	movs	r2, #0
 8001080:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001082:	4805      	ldr	r0, [pc, #20]	@ (8001098 <MX_TIM10_Init+0x40>)
 8001084:	f002 fcf2 	bl	8003a6c <HAL_TIM_Base_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800108e:	f000 f94f 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200000ec 	.word	0x200000ec
 800109c:	40014400 	.word	0x40014400

080010a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010a4:	4b10      	ldr	r3, [pc, #64]	@ (80010e8 <MX_USART2_UART_Init+0x48>)
 80010a6:	4a11      	ldr	r2, [pc, #68]	@ (80010ec <MX_USART2_UART_Init+0x4c>)
 80010a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 80010aa:	4b0f      	ldr	r3, [pc, #60]	@ (80010e8 <MX_USART2_UART_Init+0x48>)
 80010ac:	4a10      	ldr	r2, [pc, #64]	@ (80010f0 <MX_USART2_UART_Init+0x50>)
 80010ae:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010b0:	4b0d      	ldr	r3, [pc, #52]	@ (80010e8 <MX_USART2_UART_Init+0x48>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010b6:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <MX_USART2_UART_Init+0x48>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010bc:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <MX_USART2_UART_Init+0x48>)
 80010be:	2200      	movs	r2, #0
 80010c0:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010c2:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <MX_USART2_UART_Init+0x48>)
 80010c4:	220c      	movs	r2, #12
 80010c6:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c8:	4b07      	ldr	r3, [pc, #28]	@ (80010e8 <MX_USART2_UART_Init+0x48>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ce:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <MX_USART2_UART_Init+0x48>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010d4:	4804      	ldr	r0, [pc, #16]	@ (80010e8 <MX_USART2_UART_Init+0x48>)
 80010d6:	f002 ff61 	bl	8003f9c <HAL_UART_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 80010e0:	f000 f926 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000134 	.word	0x20000134
 80010ec:	40004400 	.word	0x40004400
 80010f0:	000f4240 	.word	0x000f4240

080010f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <MX_DMA_Init+0x3c>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001102:	4a0b      	ldr	r2, [pc, #44]	@ (8001130 <MX_DMA_Init+0x3c>)
 8001104:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001108:	6313      	str	r3, [r2, #48]	@ 0x30
 800110a:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <MX_DMA_Init+0x3c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2100      	movs	r1, #0
 800111a:	2038      	movs	r0, #56	@ 0x38
 800111c:	f001 f861 	bl	80021e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001120:	2038      	movs	r0, #56	@ 0x38
 8001122:	f001 f87a 	bl	800221a <HAL_NVIC_EnableIRQ>

}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800

08001134 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113a:	f107 030c 	add.w	r3, r7, #12
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	4b18      	ldr	r3, [pc, #96]	@ (80011b0 <MX_GPIO_Init+0x7c>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	4a17      	ldr	r2, [pc, #92]	@ (80011b0 <MX_GPIO_Init+0x7c>)
 8001154:	f043 0304 	orr.w	r3, r3, #4
 8001158:	6313      	str	r3, [r2, #48]	@ 0x30
 800115a:	4b15      	ldr	r3, [pc, #84]	@ (80011b0 <MX_GPIO_Init+0x7c>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	f003 0304 	and.w	r3, r3, #4
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	4b11      	ldr	r3, [pc, #68]	@ (80011b0 <MX_GPIO_Init+0x7c>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	4a10      	ldr	r2, [pc, #64]	@ (80011b0 <MX_GPIO_Init+0x7c>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6313      	str	r3, [r2, #48]	@ 0x30
 8001176:	4b0e      	ldr	r3, [pc, #56]	@ (80011b0 <MX_GPIO_Init+0x7c>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	2120      	movs	r1, #32
 8001186:	480b      	ldr	r0, [pc, #44]	@ (80011b4 <MX_GPIO_Init+0x80>)
 8001188:	f001 fef4 	bl	8002f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800118c:	2320      	movs	r3, #32
 800118e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001190:	2301      	movs	r3, #1
 8001192:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	4619      	mov	r1, r3
 80011a2:	4804      	ldr	r0, [pc, #16]	@ (80011b4 <MX_GPIO_Init+0x80>)
 80011a4:	f001 fd52 	bl	8002c4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011a8:	bf00      	nop
 80011aa:	3720      	adds	r7, #32
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40020000 	.word	0x40020000

080011b8 <write_sin>:

/* USER CODE BEGIN 4 */

 void write_sin(){
 80011b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
     float scale = (float) amp / 3300;
 80011c0:	4b39      	ldr	r3, [pc, #228]	@ (80012a8 <write_sin+0xf0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	ee07 3a90 	vmov	s15, r3
 80011c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011cc:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80012ac <write_sin+0xf4>
 80011d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011d4:	edc7 7a01 	vstr	s15, [r7, #4]
     HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint32_t)(2048 * scale + 2047 * scale * sin(timer * 2 * 3.14159 * freq / 1000)));
 80011d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80011dc:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80012b0 <write_sin+0xf8>
 80011e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011e4:	ee17 0a90 	vmov	r0, s15
 80011e8:	f7ff f972 	bl	80004d0 <__aeabi_f2d>
 80011ec:	4604      	mov	r4, r0
 80011ee:	460d      	mov	r5, r1
 80011f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80011f4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80012b4 <write_sin+0xfc>
 80011f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011fc:	ee17 0a90 	vmov	r0, s15
 8001200:	f7ff f966 	bl	80004d0 <__aeabi_f2d>
 8001204:	4680      	mov	r8, r0
 8001206:	4689      	mov	r9, r1
 8001208:	4b2b      	ldr	r3, [pc, #172]	@ (80012b8 <write_sin+0x100>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f93c 	bl	800048c <__aeabi_ui2d>
 8001214:	a322      	add	r3, pc, #136	@ (adr r3, 80012a0 <write_sin+0xe8>)
 8001216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121a:	f7ff f9b1 	bl	8000580 <__aeabi_dmul>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4692      	mov	sl, r2
 8001224:	469b      	mov	fp, r3
 8001226:	4b25      	ldr	r3, [pc, #148]	@ (80012bc <write_sin+0x104>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff f92e 	bl	800048c <__aeabi_ui2d>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4650      	mov	r0, sl
 8001236:	4659      	mov	r1, fp
 8001238:	f7ff f9a2 	bl	8000580 <__aeabi_dmul>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4610      	mov	r0, r2
 8001242:	4619      	mov	r1, r3
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	4b1d      	ldr	r3, [pc, #116]	@ (80012c0 <write_sin+0x108>)
 800124a:	f7ff fac3 	bl	80007d4 <__aeabi_ddiv>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	ec43 2b17 	vmov	d7, r2, r3
 8001256:	eeb0 0a47 	vmov.f32	s0, s14
 800125a:	eef0 0a67 	vmov.f32	s1, s15
 800125e:	f003 ff2b 	bl	80050b8 <sin>
 8001262:	ec53 2b10 	vmov	r2, r3, d0
 8001266:	4640      	mov	r0, r8
 8001268:	4649      	mov	r1, r9
 800126a:	f7ff f989 	bl	8000580 <__aeabi_dmul>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4620      	mov	r0, r4
 8001274:	4629      	mov	r1, r5
 8001276:	f7fe ffcd 	bl	8000214 <__adddf3>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4610      	mov	r0, r2
 8001280:	4619      	mov	r1, r3
 8001282:	f7ff fc3f 	bl	8000b04 <__aeabi_d2uiz>
 8001286:	4603      	mov	r3, r0
 8001288:	2200      	movs	r2, #0
 800128a:	2100      	movs	r1, #0
 800128c:	480d      	ldr	r0, [pc, #52]	@ (80012c4 <write_sin+0x10c>)
 800128e:	f001 f857 	bl	8002340 <HAL_DAC_SetValue>
 }
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800129c:	f3af 8000 	nop.w
 80012a0:	f01b866e 	.word	0xf01b866e
 80012a4:	400921f9 	.word	0x400921f9
 80012a8:	20000004 	.word	0x20000004
 80012ac:	454e4000 	.word	0x454e4000
 80012b0:	45000000 	.word	0x45000000
 80012b4:	44ffe000 	.word	0x44ffe000
 80012b8:	20000180 	.word	0x20000180
 80012bc:	20000000 	.word	0x20000000
 80012c0:	408f4000 	.word	0x408f4000
 80012c4:	200000d8 	.word	0x200000d8

080012c8 <HAL_TIM_PeriodElapsedCallback>:

// timer 6 callback 
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM10)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a11      	ldr	r2, [pc, #68]	@ (800131c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d11c      	bne.n	8001314 <HAL_TIM_PeriodElapsedCallback+0x4c>
  { 
    struct message msg;
    msg.header = message_header; 
 80012da:	f64a 33cd 	movw	r3, #43981	@ 0xabcd
 80012de:	60fb      	str	r3, [r7, #12]
    msg.adc_value = adc_value;
 80012e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	613b      	str	r3, [r7, #16]
    msg.terminator = message_terminator;
 80012e6:	f64b 63da 	movw	r3, #48858	@ 0xbeda
 80012ea:	617b      	str	r3, [r7, #20]
    HAL_UART_Transmit(&huart2, (uint8_t*)&msg, sizeof(msg), 1000); // send message
 80012ec:	f107 010c 	add.w	r1, r7, #12
 80012f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012f4:	220c      	movs	r2, #12
 80012f6:	480b      	ldr	r0, [pc, #44]	@ (8001324 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80012f8:	f002 fea0 	bl	800403c <HAL_UART_Transmit>
    HAL_ADC_Start_DMA(&hadc1, &adc_value, 1); // start ADC conversion 
 80012fc:	2201      	movs	r2, #1
 80012fe:	4908      	ldr	r1, [pc, #32]	@ (8001320 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001300:	4809      	ldr	r0, [pc, #36]	@ (8001328 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001302:	f000 fab5 	bl	8001870 <HAL_ADC_Start_DMA>
    timer++;
 8001306:	4b09      	ldr	r3, [pc, #36]	@ (800132c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	3301      	adds	r3, #1
 800130c:	4a07      	ldr	r2, [pc, #28]	@ (800132c <HAL_TIM_PeriodElapsedCallback+0x64>)
 800130e:	6013      	str	r3, [r2, #0]
     write_sin();
 8001310:	f7ff ff52 	bl	80011b8 <write_sin>
  }
}
 8001314:	bf00      	nop
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40014400 	.word	0x40014400
 8001320:	2000017c 	.word	0x2000017c
 8001324:	20000134 	.word	0x20000134
 8001328:	20000030 	.word	0x20000030
 800132c:	20000180 	.word	0x20000180

08001330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001334:	b672      	cpsid	i
}
 8001336:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <Error_Handler+0x8>

0800133c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	4b10      	ldr	r3, [pc, #64]	@ (8001388 <HAL_MspInit+0x4c>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134a:	4a0f      	ldr	r2, [pc, #60]	@ (8001388 <HAL_MspInit+0x4c>)
 800134c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001350:	6453      	str	r3, [r2, #68]	@ 0x44
 8001352:	4b0d      	ldr	r3, [pc, #52]	@ (8001388 <HAL_MspInit+0x4c>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001356:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	603b      	str	r3, [r7, #0]
 8001362:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <HAL_MspInit+0x4c>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001366:	4a08      	ldr	r2, [pc, #32]	@ (8001388 <HAL_MspInit+0x4c>)
 8001368:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800136c:	6413      	str	r3, [r2, #64]	@ 0x40
 800136e:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <HAL_MspInit+0x4c>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40023800 	.word	0x40023800

0800138c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08a      	sub	sp, #40	@ 0x28
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a2e      	ldr	r2, [pc, #184]	@ (8001464 <HAL_ADC_MspInit+0xd8>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d156      	bne.n	800145c <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001468 <HAL_ADC_MspInit+0xdc>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b6:	4a2c      	ldr	r2, [pc, #176]	@ (8001468 <HAL_ADC_MspInit+0xdc>)
 80013b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013be:	4b2a      	ldr	r3, [pc, #168]	@ (8001468 <HAL_ADC_MspInit+0xdc>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	4b26      	ldr	r3, [pc, #152]	@ (8001468 <HAL_ADC_MspInit+0xdc>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	4a25      	ldr	r2, [pc, #148]	@ (8001468 <HAL_ADC_MspInit+0xdc>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013da:	4b23      	ldr	r3, [pc, #140]	@ (8001468 <HAL_ADC_MspInit+0xdc>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013e6:	2304      	movs	r3, #4
 80013e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ea:	2303      	movs	r3, #3
 80013ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	4619      	mov	r1, r3
 80013f8:	481c      	ldr	r0, [pc, #112]	@ (800146c <HAL_ADC_MspInit+0xe0>)
 80013fa:	f001 fc27 	bl	8002c4c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80013fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001470 <HAL_ADC_MspInit+0xe4>)
 8001400:	4a1c      	ldr	r2, [pc, #112]	@ (8001474 <HAL_ADC_MspInit+0xe8>)
 8001402:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001404:	4b1a      	ldr	r3, [pc, #104]	@ (8001470 <HAL_ADC_MspInit+0xe4>)
 8001406:	2200      	movs	r2, #0
 8001408:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800140a:	4b19      	ldr	r3, [pc, #100]	@ (8001470 <HAL_ADC_MspInit+0xe4>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001410:	4b17      	ldr	r3, [pc, #92]	@ (8001470 <HAL_ADC_MspInit+0xe4>)
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001416:	4b16      	ldr	r3, [pc, #88]	@ (8001470 <HAL_ADC_MspInit+0xe4>)
 8001418:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800141c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800141e:	4b14      	ldr	r3, [pc, #80]	@ (8001470 <HAL_ADC_MspInit+0xe4>)
 8001420:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001424:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001426:	4b12      	ldr	r3, [pc, #72]	@ (8001470 <HAL_ADC_MspInit+0xe4>)
 8001428:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800142c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800142e:	4b10      	ldr	r3, [pc, #64]	@ (8001470 <HAL_ADC_MspInit+0xe4>)
 8001430:	2200      	movs	r2, #0
 8001432:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001434:	4b0e      	ldr	r3, [pc, #56]	@ (8001470 <HAL_ADC_MspInit+0xe4>)
 8001436:	2200      	movs	r2, #0
 8001438:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800143a:	4b0d      	ldr	r3, [pc, #52]	@ (8001470 <HAL_ADC_MspInit+0xe4>)
 800143c:	2200      	movs	r2, #0
 800143e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001440:	480b      	ldr	r0, [pc, #44]	@ (8001470 <HAL_ADC_MspInit+0xe4>)
 8001442:	f001 f801 	bl	8002448 <HAL_DMA_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 800144c:	f7ff ff70 	bl	8001330 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a07      	ldr	r2, [pc, #28]	@ (8001470 <HAL_ADC_MspInit+0xe4>)
 8001454:	639a      	str	r2, [r3, #56]	@ 0x38
 8001456:	4a06      	ldr	r2, [pc, #24]	@ (8001470 <HAL_ADC_MspInit+0xe4>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800145c:	bf00      	nop
 800145e:	3728      	adds	r7, #40	@ 0x28
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40012000 	.word	0x40012000
 8001468:	40023800 	.word	0x40023800
 800146c:	40020800 	.word	0x40020800
 8001470:	20000078 	.word	0x20000078
 8001474:	40026410 	.word	0x40026410

08001478 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	@ 0x28
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a17      	ldr	r2, [pc, #92]	@ (80014f4 <HAL_DAC_MspInit+0x7c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d127      	bne.n	80014ea <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	4b16      	ldr	r3, [pc, #88]	@ (80014f8 <HAL_DAC_MspInit+0x80>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a2:	4a15      	ldr	r2, [pc, #84]	@ (80014f8 <HAL_DAC_MspInit+0x80>)
 80014a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80014a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014aa:	4b13      	ldr	r3, [pc, #76]	@ (80014f8 <HAL_DAC_MspInit+0x80>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80014b2:	613b      	str	r3, [r7, #16]
 80014b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	4b0f      	ldr	r3, [pc, #60]	@ (80014f8 <HAL_DAC_MspInit+0x80>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	4a0e      	ldr	r2, [pc, #56]	@ (80014f8 <HAL_DAC_MspInit+0x80>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c6:	4b0c      	ldr	r3, [pc, #48]	@ (80014f8 <HAL_DAC_MspInit+0x80>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014d2:	2310      	movs	r3, #16
 80014d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d6:	2303      	movs	r3, #3
 80014d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4619      	mov	r1, r3
 80014e4:	4805      	ldr	r0, [pc, #20]	@ (80014fc <HAL_DAC_MspInit+0x84>)
 80014e6:	f001 fbb1 	bl	8002c4c <HAL_GPIO_Init>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 80014ea:	bf00      	nop
 80014ec:	3728      	adds	r7, #40	@ 0x28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40007400 	.word	0x40007400
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40020000 	.word	0x40020000

08001500 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a0e      	ldr	r2, [pc, #56]	@ (8001548 <HAL_TIM_Base_MspInit+0x48>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d115      	bne.n	800153e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b0d      	ldr	r3, [pc, #52]	@ (800154c <HAL_TIM_Base_MspInit+0x4c>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151a:	4a0c      	ldr	r2, [pc, #48]	@ (800154c <HAL_TIM_Base_MspInit+0x4c>)
 800151c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001520:	6453      	str	r3, [r2, #68]	@ 0x44
 8001522:	4b0a      	ldr	r3, [pc, #40]	@ (800154c <HAL_TIM_Base_MspInit+0x4c>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2100      	movs	r1, #0
 8001532:	2019      	movs	r0, #25
 8001534:	f000 fe55 	bl	80021e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001538:	2019      	movs	r0, #25
 800153a:	f000 fe6e 	bl	800221a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM10_MspInit 1 */

  }

}
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40014400 	.word	0x40014400
 800154c:	40023800 	.word	0x40023800

08001550 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	@ 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a1d      	ldr	r2, [pc, #116]	@ (80015e4 <HAL_UART_MspInit+0x94>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d133      	bne.n	80015da <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	4b1c      	ldr	r3, [pc, #112]	@ (80015e8 <HAL_UART_MspInit+0x98>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157a:	4a1b      	ldr	r2, [pc, #108]	@ (80015e8 <HAL_UART_MspInit+0x98>)
 800157c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001580:	6413      	str	r3, [r2, #64]	@ 0x40
 8001582:	4b19      	ldr	r3, [pc, #100]	@ (80015e8 <HAL_UART_MspInit+0x98>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b15      	ldr	r3, [pc, #84]	@ (80015e8 <HAL_UART_MspInit+0x98>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	4a14      	ldr	r2, [pc, #80]	@ (80015e8 <HAL_UART_MspInit+0x98>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6313      	str	r3, [r2, #48]	@ 0x30
 800159e:	4b12      	ldr	r3, [pc, #72]	@ (80015e8 <HAL_UART_MspInit+0x98>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015aa:	230c      	movs	r3, #12
 80015ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ae:	2302      	movs	r3, #2
 80015b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b6:	2303      	movs	r3, #3
 80015b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ba:	2307      	movs	r3, #7
 80015bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	4809      	ldr	r0, [pc, #36]	@ (80015ec <HAL_UART_MspInit+0x9c>)
 80015c6:	f001 fb41 	bl	8002c4c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2100      	movs	r1, #0
 80015ce:	2026      	movs	r0, #38	@ 0x26
 80015d0:	f000 fe07 	bl	80021e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015d4:	2026      	movs	r0, #38	@ 0x26
 80015d6:	f000 fe20 	bl	800221a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80015da:	bf00      	nop
 80015dc:	3728      	adds	r7, #40	@ 0x28
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40004400 	.word	0x40004400
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40020000 	.word	0x40020000

080015f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <NMI_Handler+0x4>

080015f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <HardFault_Handler+0x4>

08001600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <MemManage_Handler+0x4>

08001608 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <BusFault_Handler+0x4>

08001610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <UsageFault_Handler+0x4>

08001618 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001646:	f000 f8af 	bl	80017a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001654:	4802      	ldr	r0, [pc, #8]	@ (8001660 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001656:	f002 fac9 	bl	8003bec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	200000ec 	.word	0x200000ec

08001664 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001668:	4802      	ldr	r0, [pc, #8]	@ (8001674 <USART2_IRQHandler+0x10>)
 800166a:	f002 fd97 	bl	800419c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000134 	.word	0x20000134

08001678 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800167c:	4802      	ldr	r0, [pc, #8]	@ (8001688 <DMA2_Stream0_IRQHandler+0x10>)
 800167e:	f001 f87b 	bl	8002778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000078 	.word	0x20000078

0800168c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001690:	4b06      	ldr	r3, [pc, #24]	@ (80016ac <SystemInit+0x20>)
 8001692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001696:	4a05      	ldr	r2, [pc, #20]	@ (80016ac <SystemInit+0x20>)
 8001698:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800169c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016b4:	f7ff ffea 	bl	800168c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016b8:	480c      	ldr	r0, [pc, #48]	@ (80016ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016ba:	490d      	ldr	r1, [pc, #52]	@ (80016f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016bc:	4a0d      	ldr	r2, [pc, #52]	@ (80016f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c0:	e002      	b.n	80016c8 <LoopCopyDataInit>

080016c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c6:	3304      	adds	r3, #4

080016c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016cc:	d3f9      	bcc.n	80016c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ce:	4a0a      	ldr	r2, [pc, #40]	@ (80016f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016d0:	4c0a      	ldr	r4, [pc, #40]	@ (80016fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80016d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d4:	e001      	b.n	80016da <LoopFillZerobss>

080016d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d8:	3204      	adds	r2, #4

080016da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016dc:	d3fb      	bcc.n	80016d6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80016de:	f003 fcc5 	bl	800506c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016e2:	f7ff fba7 	bl	8000e34 <main>
  bx  lr    
 80016e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80016f4:	08006338 	.word	0x08006338
  ldr r2, =_sbss
 80016f8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80016fc:	2000018c 	.word	0x2000018c

08001700 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001700:	e7fe      	b.n	8001700 <ADC_IRQHandler>
	...

08001704 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001708:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <HAL_Init+0x40>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a0d      	ldr	r2, [pc, #52]	@ (8001744 <HAL_Init+0x40>)
 800170e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001712:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001714:	4b0b      	ldr	r3, [pc, #44]	@ (8001744 <HAL_Init+0x40>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a0a      	ldr	r2, [pc, #40]	@ (8001744 <HAL_Init+0x40>)
 800171a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800171e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001720:	4b08      	ldr	r3, [pc, #32]	@ (8001744 <HAL_Init+0x40>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a07      	ldr	r2, [pc, #28]	@ (8001744 <HAL_Init+0x40>)
 8001726:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800172a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800172c:	2003      	movs	r0, #3
 800172e:	f000 fd4d 	bl	80021cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001732:	200f      	movs	r0, #15
 8001734:	f000 f808 	bl	8001748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001738:	f7ff fe00 	bl	800133c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40023c00 	.word	0x40023c00

08001748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001750:	4b12      	ldr	r3, [pc, #72]	@ (800179c <HAL_InitTick+0x54>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4b12      	ldr	r3, [pc, #72]	@ (80017a0 <HAL_InitTick+0x58>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	4619      	mov	r1, r3
 800175a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800175e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001762:	fbb2 f3f3 	udiv	r3, r2, r3
 8001766:	4618      	mov	r0, r3
 8001768:	f000 fd65 	bl	8002236 <HAL_SYSTICK_Config>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e00e      	b.n	8001794 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b0f      	cmp	r3, #15
 800177a:	d80a      	bhi.n	8001792 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800177c:	2200      	movs	r2, #0
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001784:	f000 fd2d 	bl	80021e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001788:	4a06      	ldr	r2, [pc, #24]	@ (80017a4 <HAL_InitTick+0x5c>)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800178e:	2300      	movs	r3, #0
 8001790:	e000      	b.n	8001794 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
}
 8001794:	4618      	mov	r0, r3
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000008 	.word	0x20000008
 80017a0:	20000010 	.word	0x20000010
 80017a4:	2000000c 	.word	0x2000000c

080017a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017ac:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <HAL_IncTick+0x20>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <HAL_IncTick+0x24>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4413      	add	r3, r2
 80017b8:	4a04      	ldr	r2, [pc, #16]	@ (80017cc <HAL_IncTick+0x24>)
 80017ba:	6013      	str	r3, [r2, #0]
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	20000010 	.word	0x20000010
 80017cc:	20000188 	.word	0x20000188

080017d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return uwTick;
 80017d4:	4b03      	ldr	r3, [pc, #12]	@ (80017e4 <HAL_GetTick+0x14>)
 80017d6:	681b      	ldr	r3, [r3, #0]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	20000188 	.word	0x20000188

080017e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f0:	2300      	movs	r3, #0
 80017f2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e033      	b.n	8001866 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	2b00      	cmp	r3, #0
 8001804:	d109      	bne.n	800181a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff fdc0 	bl	800138c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181e:	f003 0310 	and.w	r3, r3, #16
 8001822:	2b00      	cmp	r3, #0
 8001824:	d118      	bne.n	8001858 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800182e:	f023 0302 	bic.w	r3, r3, #2
 8001832:	f043 0202 	orr.w	r2, r3, #2
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f000 fa78 	bl	8001d30 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184a:	f023 0303 	bic.w	r3, r3, #3
 800184e:	f043 0201 	orr.w	r2, r3, #1
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	641a      	str	r2, [r3, #64]	@ 0x40
 8001856:	e001      	b.n	800185c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001864:	7bfb      	ldrb	r3, [r7, #15]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001886:	2b01      	cmp	r3, #1
 8001888:	d101      	bne.n	800188e <HAL_ADC_Start_DMA+0x1e>
 800188a:	2302      	movs	r3, #2
 800188c:	e0e9      	b.n	8001a62 <HAL_ADC_Start_DMA+0x1f2>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d018      	beq.n	80018d6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0201 	orr.w	r2, r2, #1
 80018b2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018b4:	4b6d      	ldr	r3, [pc, #436]	@ (8001a6c <HAL_ADC_Start_DMA+0x1fc>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a6d      	ldr	r2, [pc, #436]	@ (8001a70 <HAL_ADC_Start_DMA+0x200>)
 80018ba:	fba2 2303 	umull	r2, r3, r2, r3
 80018be:	0c9a      	lsrs	r2, r3, #18
 80018c0:	4613      	mov	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4413      	add	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80018c8:	e002      	b.n	80018d0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	3b01      	subs	r3, #1
 80018ce:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f9      	bne.n	80018ca <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018e4:	d107      	bne.n	80018f6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018f4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b01      	cmp	r3, #1
 8001902:	f040 80a1 	bne.w	8001a48 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800190e:	f023 0301 	bic.w	r3, r3, #1
 8001912:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001924:	2b00      	cmp	r3, #0
 8001926:	d007      	beq.n	8001938 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001930:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001940:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001944:	d106      	bne.n	8001954 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194a:	f023 0206 	bic.w	r2, r3, #6
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	645a      	str	r2, [r3, #68]	@ 0x44
 8001952:	e002      	b.n	800195a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2200      	movs	r2, #0
 8001958:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001962:	4b44      	ldr	r3, [pc, #272]	@ (8001a74 <HAL_ADC_Start_DMA+0x204>)
 8001964:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800196a:	4a43      	ldr	r2, [pc, #268]	@ (8001a78 <HAL_ADC_Start_DMA+0x208>)
 800196c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001972:	4a42      	ldr	r2, [pc, #264]	@ (8001a7c <HAL_ADC_Start_DMA+0x20c>)
 8001974:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800197a:	4a41      	ldr	r2, [pc, #260]	@ (8001a80 <HAL_ADC_Start_DMA+0x210>)
 800197c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001986:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001996:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	689a      	ldr	r2, [r3, #8]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019a6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	334c      	adds	r3, #76	@ 0x4c
 80019b2:	4619      	mov	r1, r3
 80019b4:	68ba      	ldr	r2, [r7, #8]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f000 fdf4 	bl	80025a4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 031f 	and.w	r3, r3, #31
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d12a      	bne.n	8001a1e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a2d      	ldr	r2, [pc, #180]	@ (8001a84 <HAL_ADC_Start_DMA+0x214>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d015      	beq.n	80019fe <HAL_ADC_Start_DMA+0x18e>
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a2c      	ldr	r2, [pc, #176]	@ (8001a88 <HAL_ADC_Start_DMA+0x218>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d105      	bne.n	80019e8 <HAL_ADC_Start_DMA+0x178>
 80019dc:	4b25      	ldr	r3, [pc, #148]	@ (8001a74 <HAL_ADC_Start_DMA+0x204>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 031f 	and.w	r3, r3, #31
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d00a      	beq.n	80019fe <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a27      	ldr	r2, [pc, #156]	@ (8001a8c <HAL_ADC_Start_DMA+0x21c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d136      	bne.n	8001a60 <HAL_ADC_Start_DMA+0x1f0>
 80019f2:	4b20      	ldr	r3, [pc, #128]	@ (8001a74 <HAL_ADC_Start_DMA+0x204>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 0310 	and.w	r3, r3, #16
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d130      	bne.n	8001a60 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d129      	bne.n	8001a60 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	e020      	b.n	8001a60 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a18      	ldr	r2, [pc, #96]	@ (8001a84 <HAL_ADC_Start_DMA+0x214>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d11b      	bne.n	8001a60 <HAL_ADC_Start_DMA+0x1f0>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d114      	bne.n	8001a60 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	e00b      	b.n	8001a60 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4c:	f043 0210 	orr.w	r2, r3, #16
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a58:	f043 0201 	orr.w	r2, r3, #1
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3718      	adds	r7, #24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000008 	.word	0x20000008
 8001a70:	431bde83 	.word	0x431bde83
 8001a74:	40012300 	.word	0x40012300
 8001a78:	08001f29 	.word	0x08001f29
 8001a7c:	08001fe3 	.word	0x08001fe3
 8001a80:	08001fff 	.word	0x08001fff
 8001a84:	40012000 	.word	0x40012000
 8001a88:	40012100 	.word	0x40012100
 8001a8c:	40012200 	.word	0x40012200

08001a90 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d101      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x1c>
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	e113      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x244>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b09      	cmp	r3, #9
 8001af6:	d925      	bls.n	8001b44 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68d9      	ldr	r1, [r3, #12]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	461a      	mov	r2, r3
 8001b06:	4613      	mov	r3, r2
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3b1e      	subs	r3, #30
 8001b0e:	2207      	movs	r2, #7
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43da      	mvns	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	400a      	ands	r2, r1
 8001b1c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68d9      	ldr	r1, [r3, #12]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	4618      	mov	r0, r3
 8001b30:	4603      	mov	r3, r0
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	4403      	add	r3, r0
 8001b36:	3b1e      	subs	r3, #30
 8001b38:	409a      	lsls	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	e022      	b.n	8001b8a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6919      	ldr	r1, [r3, #16]
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	461a      	mov	r2, r3
 8001b52:	4613      	mov	r3, r2
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	4413      	add	r3, r2
 8001b58:	2207      	movs	r2, #7
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43da      	mvns	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	400a      	ands	r2, r1
 8001b66:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6919      	ldr	r1, [r3, #16]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	4618      	mov	r0, r3
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	4403      	add	r3, r0
 8001b80:	409a      	lsls	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b06      	cmp	r3, #6
 8001b90:	d824      	bhi.n	8001bdc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	3b05      	subs	r3, #5
 8001ba4:	221f      	movs	r2, #31
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43da      	mvns	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	400a      	ands	r2, r1
 8001bb2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	3b05      	subs	r3, #5
 8001bce:	fa00 f203 	lsl.w	r2, r0, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bda:	e04c      	b.n	8001c76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b0c      	cmp	r3, #12
 8001be2:	d824      	bhi.n	8001c2e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3b23      	subs	r3, #35	@ 0x23
 8001bf6:	221f      	movs	r2, #31
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43da      	mvns	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	400a      	ands	r2, r1
 8001c04:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	4618      	mov	r0, r3
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3b23      	subs	r3, #35	@ 0x23
 8001c20:	fa00 f203 	lsl.w	r2, r0, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c2c:	e023      	b.n	8001c76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3b41      	subs	r3, #65	@ 0x41
 8001c40:	221f      	movs	r2, #31
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43da      	mvns	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	400a      	ands	r2, r1
 8001c4e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	3b41      	subs	r3, #65	@ 0x41
 8001c6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c76:	4b29      	ldr	r3, [pc, #164]	@ (8001d1c <HAL_ADC_ConfigChannel+0x250>)
 8001c78:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a28      	ldr	r2, [pc, #160]	@ (8001d20 <HAL_ADC_ConfigChannel+0x254>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d10f      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x1d8>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b12      	cmp	r3, #18
 8001c8a:	d10b      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a1d      	ldr	r2, [pc, #116]	@ (8001d20 <HAL_ADC_ConfigChannel+0x254>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d12b      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x23a>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a1c      	ldr	r2, [pc, #112]	@ (8001d24 <HAL_ADC_ConfigChannel+0x258>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d003      	beq.n	8001cc0 <HAL_ADC_ConfigChannel+0x1f4>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b11      	cmp	r3, #17
 8001cbe:	d122      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a11      	ldr	r2, [pc, #68]	@ (8001d24 <HAL_ADC_ConfigChannel+0x258>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d111      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ce2:	4b11      	ldr	r3, [pc, #68]	@ (8001d28 <HAL_ADC_ConfigChannel+0x25c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a11      	ldr	r2, [pc, #68]	@ (8001d2c <HAL_ADC_ConfigChannel+0x260>)
 8001ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cec:	0c9a      	lsrs	r2, r3, #18
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001cf8:	e002      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f9      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	40012300 	.word	0x40012300
 8001d20:	40012000 	.word	0x40012000
 8001d24:	10000012 	.word	0x10000012
 8001d28:	20000008 	.word	0x20000008
 8001d2c:	431bde83 	.word	0x431bde83

08001d30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d38:	4b79      	ldr	r3, [pc, #484]	@ (8001f20 <ADC_Init+0x1f0>)
 8001d3a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	431a      	orrs	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6859      	ldr	r1, [r3, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	021a      	lsls	r2, r3, #8
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001d88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6859      	ldr	r1, [r3, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001daa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6899      	ldr	r1, [r3, #8]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc2:	4a58      	ldr	r2, [pc, #352]	@ (8001f24 <ADC_Init+0x1f4>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d022      	beq.n	8001e0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001dd6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6899      	ldr	r1, [r3, #8]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001df8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6899      	ldr	r1, [r3, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	e00f      	b.n	8001e2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e2c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0202 	bic.w	r2, r2, #2
 8001e3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6899      	ldr	r1, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	7e1b      	ldrb	r3, [r3, #24]
 8001e48:	005a      	lsls	r2, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d01b      	beq.n	8001e94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e6a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001e7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6859      	ldr	r1, [r3, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e86:	3b01      	subs	r3, #1
 8001e88:	035a      	lsls	r2, r3, #13
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	e007      	b.n	8001ea4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ea2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001eb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	051a      	lsls	r2, r3, #20
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001ed8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6899      	ldr	r1, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ee6:	025a      	lsls	r2, r3, #9
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001efe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6899      	ldr	r1, [r3, #8]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	029a      	lsls	r2, r3, #10
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	609a      	str	r2, [r3, #8]
}
 8001f14:	bf00      	nop
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	40012300 	.word	0x40012300
 8001f24:	0f000001 	.word	0x0f000001

08001f28 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f34:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d13c      	bne.n	8001fbc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f46:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d12b      	bne.n	8001fb4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d127      	bne.n	8001fb4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f6a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d006      	beq.n	8001f80 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d119      	bne.n	8001fb4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0220 	bic.w	r2, r2, #32
 8001f8e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d105      	bne.n	8001fb4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fac:	f043 0201 	orr.w	r2, r3, #1
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f7ff fd6b 	bl	8001a90 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001fba:	e00e      	b.n	8001fda <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc0:	f003 0310 	and.w	r3, r3, #16
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f7ff fd75 	bl	8001ab8 <HAL_ADC_ErrorCallback>
}
 8001fce:	e004      	b.n	8001fda <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	4798      	blx	r3
}
 8001fda:	bf00      	nop
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b084      	sub	sp, #16
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fee:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	f7ff fd57 	bl	8001aa4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ff6:	bf00      	nop
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b084      	sub	sp, #16
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800200a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2240      	movs	r2, #64	@ 0x40
 8002010:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002016:	f043 0204 	orr.w	r2, r3, #4
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f7ff fd4a 	bl	8001ab8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002024:	bf00      	nop
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800203c:	4b0c      	ldr	r3, [pc, #48]	@ (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002048:	4013      	ands	r3, r2
 800204a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002054:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002058:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800205c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800205e:	4a04      	ldr	r2, [pc, #16]	@ (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	60d3      	str	r3, [r2, #12]
}
 8002064:	bf00      	nop
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002078:	4b04      	ldr	r3, [pc, #16]	@ (800208c <__NVIC_GetPriorityGrouping+0x18>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	0a1b      	lsrs	r3, r3, #8
 800207e:	f003 0307 	and.w	r3, r3, #7
}
 8002082:	4618      	mov	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	db0b      	blt.n	80020ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	f003 021f 	and.w	r2, r3, #31
 80020a8:	4907      	ldr	r1, [pc, #28]	@ (80020c8 <__NVIC_EnableIRQ+0x38>)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	2001      	movs	r0, #1
 80020b2:	fa00 f202 	lsl.w	r2, r0, r2
 80020b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000e100 	.word	0xe000e100

080020cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	6039      	str	r1, [r7, #0]
 80020d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	db0a      	blt.n	80020f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	490c      	ldr	r1, [pc, #48]	@ (8002118 <__NVIC_SetPriority+0x4c>)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	0112      	lsls	r2, r2, #4
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	440b      	add	r3, r1
 80020f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f4:	e00a      	b.n	800210c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	4908      	ldr	r1, [pc, #32]	@ (800211c <__NVIC_SetPriority+0x50>)
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	3b04      	subs	r3, #4
 8002104:	0112      	lsls	r2, r2, #4
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	440b      	add	r3, r1
 800210a:	761a      	strb	r2, [r3, #24]
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000e100 	.word	0xe000e100
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002120:	b480      	push	{r7}
 8002122:	b089      	sub	sp, #36	@ 0x24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f1c3 0307 	rsb	r3, r3, #7
 800213a:	2b04      	cmp	r3, #4
 800213c:	bf28      	it	cs
 800213e:	2304      	movcs	r3, #4
 8002140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3304      	adds	r3, #4
 8002146:	2b06      	cmp	r3, #6
 8002148:	d902      	bls.n	8002150 <NVIC_EncodePriority+0x30>
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3b03      	subs	r3, #3
 800214e:	e000      	b.n	8002152 <NVIC_EncodePriority+0x32>
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43da      	mvns	r2, r3
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	401a      	ands	r2, r3
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002168:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	fa01 f303 	lsl.w	r3, r1, r3
 8002172:	43d9      	mvns	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002178:	4313      	orrs	r3, r2
         );
}
 800217a:	4618      	mov	r0, r3
 800217c:	3724      	adds	r7, #36	@ 0x24
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3b01      	subs	r3, #1
 8002194:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002198:	d301      	bcc.n	800219e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800219a:	2301      	movs	r3, #1
 800219c:	e00f      	b.n	80021be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800219e:	4a0a      	ldr	r2, [pc, #40]	@ (80021c8 <SysTick_Config+0x40>)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021a6:	210f      	movs	r1, #15
 80021a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80021ac:	f7ff ff8e 	bl	80020cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021b0:	4b05      	ldr	r3, [pc, #20]	@ (80021c8 <SysTick_Config+0x40>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021b6:	4b04      	ldr	r3, [pc, #16]	@ (80021c8 <SysTick_Config+0x40>)
 80021b8:	2207      	movs	r2, #7
 80021ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	e000e010 	.word	0xe000e010

080021cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff ff29 	bl	800202c <__NVIC_SetPriorityGrouping>
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b086      	sub	sp, #24
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	4603      	mov	r3, r0
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	607a      	str	r2, [r7, #4]
 80021ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021f4:	f7ff ff3e 	bl	8002074 <__NVIC_GetPriorityGrouping>
 80021f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	68b9      	ldr	r1, [r7, #8]
 80021fe:	6978      	ldr	r0, [r7, #20]
 8002200:	f7ff ff8e 	bl	8002120 <NVIC_EncodePriority>
 8002204:	4602      	mov	r2, r0
 8002206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800220a:	4611      	mov	r1, r2
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff ff5d 	bl	80020cc <__NVIC_SetPriority>
}
 8002212:	bf00      	nop
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	4603      	mov	r3, r0
 8002222:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff ff31 	bl	8002090 <__NVIC_EnableIRQ>
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff ffa2 	bl	8002188 <SysTick_Config>
 8002244:	4603      	mov	r3, r0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e014      	b.n	800228a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	791b      	ldrb	r3, [r3, #4]
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d105      	bne.n	8002276 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7ff f901 	bl	8001478 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2202      	movs	r2, #2
 800227a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
 800229a:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e046      	b.n	8002334 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	795b      	ldrb	r3, [r3, #5]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d101      	bne.n	80022b2 <HAL_DAC_Start+0x20>
 80022ae:	2302      	movs	r3, #2
 80022b0:	e040      	b.n	8002334 <HAL_DAC_Start+0xa2>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2202      	movs	r2, #2
 80022bc:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6819      	ldr	r1, [r3, #0]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	f003 0310 	and.w	r3, r3, #16
 80022ca:	2201      	movs	r2, #1
 80022cc:	409a      	lsls	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d10f      	bne.n	80022fc <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80022e6:	2b3c      	cmp	r3, #60	@ 0x3c
 80022e8:	d11d      	bne.n	8002326 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f042 0201 	orr.w	r2, r2, #1
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	e014      	b.n	8002326 <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	f003 0310 	and.w	r3, r3, #16
 800230c:	213c      	movs	r1, #60	@ 0x3c
 800230e:	fa01 f303 	lsl.w	r3, r1, r3
 8002312:	429a      	cmp	r2, r3
 8002314:	d107      	bne.n	8002326 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f042 0202 	orr.w	r2, r2, #2
 8002324:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002340:	b480      	push	{r7}
 8002342:	b087      	sub	sp, #28
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
 800234c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e015      	b.n	8002388 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d105      	bne.n	8002374 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4413      	add	r3, r2
 800236e:	3308      	adds	r3, #8
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	e004      	b.n	800237e <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4413      	add	r3, r2
 800237a:	3314      	adds	r3, #20
 800237c:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	461a      	mov	r2, r3
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	371c      	adds	r7, #28
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002394:	b480      	push	{r7}
 8002396:	b089      	sub	sp, #36	@ 0x24
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d002      	beq.n	80023b0 <HAL_DAC_ConfigChannel+0x1c>
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e042      	b.n	800243a <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	795b      	ldrb	r3, [r3, #5]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d101      	bne.n	80023c0 <HAL_DAC_ConfigChannel+0x2c>
 80023bc:	2302      	movs	r3, #2
 80023be:	e03c      	b.n	800243a <HAL_DAC_ConfigChannel+0xa6>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2201      	movs	r2, #1
 80023c4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2202      	movs	r2, #2
 80023ca:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f003 0310 	and.w	r3, r3, #16
 80023da:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f003 0310 	and.w	r3, r3, #16
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4313      	orrs	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6819      	ldr	r1, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f003 0310 	and.w	r3, r3, #16
 800241c:	22c0      	movs	r2, #192	@ 0xc0
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43da      	mvns	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	400a      	ands	r2, r1
 800242a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2201      	movs	r2, #1
 8002430:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002438:	7ffb      	ldrb	r3, [r7, #31]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3724      	adds	r7, #36	@ 0x24
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
	...

08002448 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002454:	f7ff f9bc 	bl	80017d0 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e099      	b.n	8002598 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2202      	movs	r2, #2
 8002468:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0201 	bic.w	r2, r2, #1
 8002482:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002484:	e00f      	b.n	80024a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002486:	f7ff f9a3 	bl	80017d0 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b05      	cmp	r3, #5
 8002492:	d908      	bls.n	80024a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2220      	movs	r2, #32
 8002498:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2203      	movs	r2, #3
 800249e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e078      	b.n	8002598 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1e8      	bne.n	8002486 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	4b38      	ldr	r3, [pc, #224]	@ (80025a0 <HAL_DMA_Init+0x158>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d107      	bne.n	8002510 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002508:	4313      	orrs	r3, r2
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	4313      	orrs	r3, r2
 800250e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f023 0307 	bic.w	r3, r3, #7
 8002526:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	4313      	orrs	r3, r2
 8002530:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002536:	2b04      	cmp	r3, #4
 8002538:	d117      	bne.n	800256a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	4313      	orrs	r3, r2
 8002542:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00e      	beq.n	800256a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 fb01 	bl	8002b54 <DMA_CheckFifoParam>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d008      	beq.n	800256a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2240      	movs	r2, #64	@ 0x40
 800255c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002566:	2301      	movs	r3, #1
 8002568:	e016      	b.n	8002598 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 fab8 	bl	8002ae8 <DMA_CalcBaseAndBitshift>
 8002578:	4603      	mov	r3, r0
 800257a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002580:	223f      	movs	r2, #63	@ 0x3f
 8002582:	409a      	lsls	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	f010803f 	.word	0xf010803f

080025a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
 80025b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d101      	bne.n	80025ca <HAL_DMA_Start_IT+0x26>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e040      	b.n	800264c <HAL_DMA_Start_IT+0xa8>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d12f      	bne.n	800263e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2202      	movs	r2, #2
 80025e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	68b9      	ldr	r1, [r7, #8]
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 fa4a 	bl	8002a8c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025fc:	223f      	movs	r2, #63	@ 0x3f
 80025fe:	409a      	lsls	r2, r3
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0216 	orr.w	r2, r2, #22
 8002612:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002618:	2b00      	cmp	r3, #0
 800261a:	d007      	beq.n	800262c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 0208 	orr.w	r2, r2, #8
 800262a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0201 	orr.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	e005      	b.n	800264a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002646:	2302      	movs	r3, #2
 8002648:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800264a:	7dfb      	ldrb	r3, [r7, #23]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002660:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002662:	f7ff f8b5 	bl	80017d0 <HAL_GetTick>
 8002666:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d008      	beq.n	8002686 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2280      	movs	r2, #128	@ 0x80
 8002678:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e052      	b.n	800272c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0216 	bic.w	r2, r2, #22
 8002694:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	695a      	ldr	r2, [r3, #20]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d103      	bne.n	80026b6 <HAL_DMA_Abort+0x62>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d007      	beq.n	80026c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0208 	bic.w	r2, r2, #8
 80026c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0201 	bic.w	r2, r2, #1
 80026d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026d6:	e013      	b.n	8002700 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026d8:	f7ff f87a 	bl	80017d0 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b05      	cmp	r3, #5
 80026e4:	d90c      	bls.n	8002700 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2220      	movs	r2, #32
 80026ea:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2203      	movs	r2, #3
 80026f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e015      	b.n	800272c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1e4      	bne.n	80026d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002712:	223f      	movs	r2, #63	@ 0x3f
 8002714:	409a      	lsls	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d004      	beq.n	8002752 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2280      	movs	r2, #128	@ 0x80
 800274c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e00c      	b.n	800276c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2205      	movs	r2, #5
 8002756:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0201 	bic.w	r2, r2, #1
 8002768:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002784:	4b8e      	ldr	r3, [pc, #568]	@ (80029c0 <HAL_DMA_IRQHandler+0x248>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a8e      	ldr	r2, [pc, #568]	@ (80029c4 <HAL_DMA_IRQHandler+0x24c>)
 800278a:	fba2 2303 	umull	r2, r3, r2, r3
 800278e:	0a9b      	lsrs	r3, r3, #10
 8002790:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002796:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a2:	2208      	movs	r2, #8
 80027a4:	409a      	lsls	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	4013      	ands	r3, r2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d01a      	beq.n	80027e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d013      	beq.n	80027e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0204 	bic.w	r2, r2, #4
 80027ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d0:	2208      	movs	r2, #8
 80027d2:	409a      	lsls	r2, r3
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027dc:	f043 0201 	orr.w	r2, r3, #1
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e8:	2201      	movs	r2, #1
 80027ea:	409a      	lsls	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4013      	ands	r3, r2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d012      	beq.n	800281a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00b      	beq.n	800281a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002806:	2201      	movs	r2, #1
 8002808:	409a      	lsls	r2, r3
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002812:	f043 0202 	orr.w	r2, r3, #2
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800281e:	2204      	movs	r2, #4
 8002820:	409a      	lsls	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	4013      	ands	r3, r2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d012      	beq.n	8002850 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00b      	beq.n	8002850 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800283c:	2204      	movs	r2, #4
 800283e:	409a      	lsls	r2, r3
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002848:	f043 0204 	orr.w	r2, r3, #4
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002854:	2210      	movs	r2, #16
 8002856:	409a      	lsls	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4013      	ands	r3, r2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d043      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d03c      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002872:	2210      	movs	r2, #16
 8002874:	409a      	lsls	r2, r3
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d018      	beq.n	80028ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d108      	bne.n	80028a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289a:	2b00      	cmp	r3, #0
 800289c:	d024      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	4798      	blx	r3
 80028a6:	e01f      	b.n	80028e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d01b      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	4798      	blx	r3
 80028b8:	e016      	b.n	80028e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d107      	bne.n	80028d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0208 	bic.w	r2, r2, #8
 80028d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ec:	2220      	movs	r2, #32
 80028ee:	409a      	lsls	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4013      	ands	r3, r2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 808f 	beq.w	8002a18 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0310 	and.w	r3, r3, #16
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 8087 	beq.w	8002a18 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800290e:	2220      	movs	r2, #32
 8002910:	409a      	lsls	r2, r3
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b05      	cmp	r3, #5
 8002920:	d136      	bne.n	8002990 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0216 	bic.w	r2, r2, #22
 8002930:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	695a      	ldr	r2, [r3, #20]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002940:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002946:	2b00      	cmp	r3, #0
 8002948:	d103      	bne.n	8002952 <HAL_DMA_IRQHandler+0x1da>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800294e:	2b00      	cmp	r3, #0
 8002950:	d007      	beq.n	8002962 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0208 	bic.w	r2, r2, #8
 8002960:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002966:	223f      	movs	r2, #63	@ 0x3f
 8002968:	409a      	lsls	r2, r3
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002982:	2b00      	cmp	r3, #0
 8002984:	d07e      	beq.n	8002a84 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	4798      	blx	r3
        }
        return;
 800298e:	e079      	b.n	8002a84 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d01d      	beq.n	80029da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10d      	bne.n	80029c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d031      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	4798      	blx	r3
 80029bc:	e02c      	b.n	8002a18 <HAL_DMA_IRQHandler+0x2a0>
 80029be:	bf00      	nop
 80029c0:	20000008 	.word	0x20000008
 80029c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d023      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	4798      	blx	r3
 80029d8:	e01e      	b.n	8002a18 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10f      	bne.n	8002a08 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0210 	bic.w	r2, r2, #16
 80029f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d032      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d022      	beq.n	8002a72 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2205      	movs	r2, #5
 8002a30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0201 	bic.w	r2, r2, #1
 8002a42:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	3301      	adds	r3, #1
 8002a48:	60bb      	str	r3, [r7, #8]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d307      	bcc.n	8002a60 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f2      	bne.n	8002a44 <HAL_DMA_IRQHandler+0x2cc>
 8002a5e:	e000      	b.n	8002a62 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a60:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d005      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	4798      	blx	r3
 8002a82:	e000      	b.n	8002a86 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a84:	bf00      	nop
    }
  }
}
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
 8002a98:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002aa8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2b40      	cmp	r3, #64	@ 0x40
 8002ab8:	d108      	bne.n	8002acc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002aca:	e007      	b.n	8002adc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	60da      	str	r2, [r3, #12]
}
 8002adc:	bf00      	nop
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	3b10      	subs	r3, #16
 8002af8:	4a14      	ldr	r2, [pc, #80]	@ (8002b4c <DMA_CalcBaseAndBitshift+0x64>)
 8002afa:	fba2 2303 	umull	r2, r3, r2, r3
 8002afe:	091b      	lsrs	r3, r3, #4
 8002b00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b02:	4a13      	ldr	r2, [pc, #76]	@ (8002b50 <DMA_CalcBaseAndBitshift+0x68>)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4413      	add	r3, r2
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2b03      	cmp	r3, #3
 8002b14:	d909      	bls.n	8002b2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b1e:	f023 0303 	bic.w	r3, r3, #3
 8002b22:	1d1a      	adds	r2, r3, #4
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b28:	e007      	b.n	8002b3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b32:	f023 0303 	bic.w	r3, r3, #3
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3714      	adds	r7, #20
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	aaaaaaab 	.word	0xaaaaaaab
 8002b50:	08006148 	.word	0x08006148

08002b54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d11f      	bne.n	8002bae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2b03      	cmp	r3, #3
 8002b72:	d856      	bhi.n	8002c22 <DMA_CheckFifoParam+0xce>
 8002b74:	a201      	add	r2, pc, #4	@ (adr r2, 8002b7c <DMA_CheckFifoParam+0x28>)
 8002b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b7a:	bf00      	nop
 8002b7c:	08002b8d 	.word	0x08002b8d
 8002b80:	08002b9f 	.word	0x08002b9f
 8002b84:	08002b8d 	.word	0x08002b8d
 8002b88:	08002c23 	.word	0x08002c23
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d046      	beq.n	8002c26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b9c:	e043      	b.n	8002c26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ba6:	d140      	bne.n	8002c2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bac:	e03d      	b.n	8002c2a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bb6:	d121      	bne.n	8002bfc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d837      	bhi.n	8002c2e <DMA_CheckFifoParam+0xda>
 8002bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8002bc4 <DMA_CheckFifoParam+0x70>)
 8002bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc4:	08002bd5 	.word	0x08002bd5
 8002bc8:	08002bdb 	.word	0x08002bdb
 8002bcc:	08002bd5 	.word	0x08002bd5
 8002bd0:	08002bed 	.word	0x08002bed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8002bd8:	e030      	b.n	8002c3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bde:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d025      	beq.n	8002c32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bea:	e022      	b.n	8002c32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002bf4:	d11f      	bne.n	8002c36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bfa:	e01c      	b.n	8002c36 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d903      	bls.n	8002c0a <DMA_CheckFifoParam+0xb6>
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	2b03      	cmp	r3, #3
 8002c06:	d003      	beq.n	8002c10 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c08:	e018      	b.n	8002c3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	73fb      	strb	r3, [r7, #15]
      break;
 8002c0e:	e015      	b.n	8002c3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00e      	beq.n	8002c3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c20:	e00b      	b.n	8002c3a <DMA_CheckFifoParam+0xe6>
      break;
 8002c22:	bf00      	nop
 8002c24:	e00a      	b.n	8002c3c <DMA_CheckFifoParam+0xe8>
      break;
 8002c26:	bf00      	nop
 8002c28:	e008      	b.n	8002c3c <DMA_CheckFifoParam+0xe8>
      break;
 8002c2a:	bf00      	nop
 8002c2c:	e006      	b.n	8002c3c <DMA_CheckFifoParam+0xe8>
      break;
 8002c2e:	bf00      	nop
 8002c30:	e004      	b.n	8002c3c <DMA_CheckFifoParam+0xe8>
      break;
 8002c32:	bf00      	nop
 8002c34:	e002      	b.n	8002c3c <DMA_CheckFifoParam+0xe8>
      break;   
 8002c36:	bf00      	nop
 8002c38:	e000      	b.n	8002c3c <DMA_CheckFifoParam+0xe8>
      break;
 8002c3a:	bf00      	nop
    }
  } 
  
  return status; 
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop

08002c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b089      	sub	sp, #36	@ 0x24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c62:	2300      	movs	r3, #0
 8002c64:	61fb      	str	r3, [r7, #28]
 8002c66:	e165      	b.n	8002f34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c68:	2201      	movs	r2, #1
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	f040 8154 	bne.w	8002f2e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d005      	beq.n	8002c9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d130      	bne.n	8002d00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	2203      	movs	r2, #3
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68da      	ldr	r2, [r3, #12]
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	f003 0201 	and.w	r2, r3, #1
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	d017      	beq.n	8002d3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	2203      	movs	r2, #3
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4013      	ands	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d123      	bne.n	8002d90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	08da      	lsrs	r2, r3, #3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3208      	adds	r2, #8
 8002d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	220f      	movs	r2, #15
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	08da      	lsrs	r2, r3, #3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	3208      	adds	r2, #8
 8002d8a:	69b9      	ldr	r1, [r7, #24]
 8002d8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4013      	ands	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 0203 	and.w	r2, r3, #3
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 80ae 	beq.w	8002f2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	4b5d      	ldr	r3, [pc, #372]	@ (8002f4c <HAL_GPIO_Init+0x300>)
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dda:	4a5c      	ldr	r2, [pc, #368]	@ (8002f4c <HAL_GPIO_Init+0x300>)
 8002ddc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002de0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002de2:	4b5a      	ldr	r3, [pc, #360]	@ (8002f4c <HAL_GPIO_Init+0x300>)
 8002de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dee:	4a58      	ldr	r2, [pc, #352]	@ (8002f50 <HAL_GPIO_Init+0x304>)
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	089b      	lsrs	r3, r3, #2
 8002df4:	3302      	adds	r3, #2
 8002df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	220f      	movs	r2, #15
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a4f      	ldr	r2, [pc, #316]	@ (8002f54 <HAL_GPIO_Init+0x308>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d025      	beq.n	8002e66 <HAL_GPIO_Init+0x21a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a4e      	ldr	r2, [pc, #312]	@ (8002f58 <HAL_GPIO_Init+0x30c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d01f      	beq.n	8002e62 <HAL_GPIO_Init+0x216>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a4d      	ldr	r2, [pc, #308]	@ (8002f5c <HAL_GPIO_Init+0x310>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d019      	beq.n	8002e5e <HAL_GPIO_Init+0x212>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a4c      	ldr	r2, [pc, #304]	@ (8002f60 <HAL_GPIO_Init+0x314>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d013      	beq.n	8002e5a <HAL_GPIO_Init+0x20e>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a4b      	ldr	r2, [pc, #300]	@ (8002f64 <HAL_GPIO_Init+0x318>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d00d      	beq.n	8002e56 <HAL_GPIO_Init+0x20a>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a4a      	ldr	r2, [pc, #296]	@ (8002f68 <HAL_GPIO_Init+0x31c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d007      	beq.n	8002e52 <HAL_GPIO_Init+0x206>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a49      	ldr	r2, [pc, #292]	@ (8002f6c <HAL_GPIO_Init+0x320>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d101      	bne.n	8002e4e <HAL_GPIO_Init+0x202>
 8002e4a:	2306      	movs	r3, #6
 8002e4c:	e00c      	b.n	8002e68 <HAL_GPIO_Init+0x21c>
 8002e4e:	2307      	movs	r3, #7
 8002e50:	e00a      	b.n	8002e68 <HAL_GPIO_Init+0x21c>
 8002e52:	2305      	movs	r3, #5
 8002e54:	e008      	b.n	8002e68 <HAL_GPIO_Init+0x21c>
 8002e56:	2304      	movs	r3, #4
 8002e58:	e006      	b.n	8002e68 <HAL_GPIO_Init+0x21c>
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e004      	b.n	8002e68 <HAL_GPIO_Init+0x21c>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e002      	b.n	8002e68 <HAL_GPIO_Init+0x21c>
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <HAL_GPIO_Init+0x21c>
 8002e66:	2300      	movs	r3, #0
 8002e68:	69fa      	ldr	r2, [r7, #28]
 8002e6a:	f002 0203 	and.w	r2, r2, #3
 8002e6e:	0092      	lsls	r2, r2, #2
 8002e70:	4093      	lsls	r3, r2
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e78:	4935      	ldr	r1, [pc, #212]	@ (8002f50 <HAL_GPIO_Init+0x304>)
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	089b      	lsrs	r3, r3, #2
 8002e7e:	3302      	adds	r3, #2
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e86:	4b3a      	ldr	r3, [pc, #232]	@ (8002f70 <HAL_GPIO_Init+0x324>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4013      	ands	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002eaa:	4a31      	ldr	r2, [pc, #196]	@ (8002f70 <HAL_GPIO_Init+0x324>)
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002eb0:	4b2f      	ldr	r3, [pc, #188]	@ (8002f70 <HAL_GPIO_Init+0x324>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ed4:	4a26      	ldr	r2, [pc, #152]	@ (8002f70 <HAL_GPIO_Init+0x324>)
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eda:	4b25      	ldr	r3, [pc, #148]	@ (8002f70 <HAL_GPIO_Init+0x324>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002efe:	4a1c      	ldr	r2, [pc, #112]	@ (8002f70 <HAL_GPIO_Init+0x324>)
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f04:	4b1a      	ldr	r3, [pc, #104]	@ (8002f70 <HAL_GPIO_Init+0x324>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4013      	ands	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f28:	4a11      	ldr	r2, [pc, #68]	@ (8002f70 <HAL_GPIO_Init+0x324>)
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3301      	adds	r3, #1
 8002f32:	61fb      	str	r3, [r7, #28]
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	2b0f      	cmp	r3, #15
 8002f38:	f67f ae96 	bls.w	8002c68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f3c:	bf00      	nop
 8002f3e:	bf00      	nop
 8002f40:	3724      	adds	r7, #36	@ 0x24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	40013800 	.word	0x40013800
 8002f54:	40020000 	.word	0x40020000
 8002f58:	40020400 	.word	0x40020400
 8002f5c:	40020800 	.word	0x40020800
 8002f60:	40020c00 	.word	0x40020c00
 8002f64:	40021000 	.word	0x40021000
 8002f68:	40021400 	.word	0x40021400
 8002f6c:	40021800 	.word	0x40021800
 8002f70:	40013c00 	.word	0x40013c00

08002f74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	807b      	strh	r3, [r7, #2]
 8002f80:	4613      	mov	r3, r2
 8002f82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f84:	787b      	ldrb	r3, [r7, #1]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f8a:	887a      	ldrh	r2, [r7, #2]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f90:	e003      	b.n	8002f9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f92:	887b      	ldrh	r3, [r7, #2]
 8002f94:	041a      	lsls	r2, r3, #16
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	619a      	str	r2, [r3, #24]
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
	...

08002fa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e0cc      	b.n	8003156 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fbc:	4b68      	ldr	r3, [pc, #416]	@ (8003160 <HAL_RCC_ClockConfig+0x1b8>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 030f 	and.w	r3, r3, #15
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d90c      	bls.n	8002fe4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fca:	4b65      	ldr	r3, [pc, #404]	@ (8003160 <HAL_RCC_ClockConfig+0x1b8>)
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd2:	4b63      	ldr	r3, [pc, #396]	@ (8003160 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d001      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0b8      	b.n	8003156 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d020      	beq.n	8003032 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d005      	beq.n	8003008 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ffc:	4b59      	ldr	r3, [pc, #356]	@ (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	4a58      	ldr	r2, [pc, #352]	@ (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8003002:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003006:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0308 	and.w	r3, r3, #8
 8003010:	2b00      	cmp	r3, #0
 8003012:	d005      	beq.n	8003020 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003014:	4b53      	ldr	r3, [pc, #332]	@ (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	4a52      	ldr	r2, [pc, #328]	@ (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 800301a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800301e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003020:	4b50      	ldr	r3, [pc, #320]	@ (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	494d      	ldr	r1, [pc, #308]	@ (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 800302e:	4313      	orrs	r3, r2
 8003030:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d044      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d107      	bne.n	8003056 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003046:	4b47      	ldr	r3, [pc, #284]	@ (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d119      	bne.n	8003086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e07f      	b.n	8003156 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2b02      	cmp	r3, #2
 800305c:	d003      	beq.n	8003066 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003062:	2b03      	cmp	r3, #3
 8003064:	d107      	bne.n	8003076 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003066:	4b3f      	ldr	r3, [pc, #252]	@ (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d109      	bne.n	8003086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e06f      	b.n	8003156 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003076:	4b3b      	ldr	r3, [pc, #236]	@ (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e067      	b.n	8003156 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003086:	4b37      	ldr	r3, [pc, #220]	@ (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f023 0203 	bic.w	r2, r3, #3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	4934      	ldr	r1, [pc, #208]	@ (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8003094:	4313      	orrs	r3, r2
 8003096:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003098:	f7fe fb9a 	bl	80017d0 <HAL_GetTick>
 800309c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800309e:	e00a      	b.n	80030b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a0:	f7fe fb96 	bl	80017d0 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e04f      	b.n	8003156 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b6:	4b2b      	ldr	r3, [pc, #172]	@ (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 020c 	and.w	r2, r3, #12
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d1eb      	bne.n	80030a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030c8:	4b25      	ldr	r3, [pc, #148]	@ (8003160 <HAL_RCC_ClockConfig+0x1b8>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 030f 	and.w	r3, r3, #15
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d20c      	bcs.n	80030f0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d6:	4b22      	ldr	r3, [pc, #136]	@ (8003160 <HAL_RCC_ClockConfig+0x1b8>)
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030de:	4b20      	ldr	r3, [pc, #128]	@ (8003160 <HAL_RCC_ClockConfig+0x1b8>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d001      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e032      	b.n	8003156 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d008      	beq.n	800310e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030fc:	4b19      	ldr	r3, [pc, #100]	@ (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	4916      	ldr	r1, [pc, #88]	@ (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	4313      	orrs	r3, r2
 800310c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0308 	and.w	r3, r3, #8
 8003116:	2b00      	cmp	r3, #0
 8003118:	d009      	beq.n	800312e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800311a:	4b12      	ldr	r3, [pc, #72]	@ (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	490e      	ldr	r1, [pc, #56]	@ (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	4313      	orrs	r3, r2
 800312c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800312e:	f000 f855 	bl	80031dc <HAL_RCC_GetSysClockFreq>
 8003132:	4602      	mov	r2, r0
 8003134:	4b0b      	ldr	r3, [pc, #44]	@ (8003164 <HAL_RCC_ClockConfig+0x1bc>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	091b      	lsrs	r3, r3, #4
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	490a      	ldr	r1, [pc, #40]	@ (8003168 <HAL_RCC_ClockConfig+0x1c0>)
 8003140:	5ccb      	ldrb	r3, [r1, r3]
 8003142:	fa22 f303 	lsr.w	r3, r2, r3
 8003146:	4a09      	ldr	r2, [pc, #36]	@ (800316c <HAL_RCC_ClockConfig+0x1c4>)
 8003148:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800314a:	4b09      	ldr	r3, [pc, #36]	@ (8003170 <HAL_RCC_ClockConfig+0x1c8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f7fe fafa 	bl	8001748 <HAL_InitTick>

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40023c00 	.word	0x40023c00
 8003164:	40023800 	.word	0x40023800
 8003168:	08006130 	.word	0x08006130
 800316c:	20000008 	.word	0x20000008
 8003170:	2000000c 	.word	0x2000000c

08003174 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003178:	4b03      	ldr	r3, [pc, #12]	@ (8003188 <HAL_RCC_GetHCLKFreq+0x14>)
 800317a:	681b      	ldr	r3, [r3, #0]
}
 800317c:	4618      	mov	r0, r3
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	20000008 	.word	0x20000008

0800318c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003190:	f7ff fff0 	bl	8003174 <HAL_RCC_GetHCLKFreq>
 8003194:	4602      	mov	r2, r0
 8003196:	4b05      	ldr	r3, [pc, #20]	@ (80031ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	0a9b      	lsrs	r3, r3, #10
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	4903      	ldr	r1, [pc, #12]	@ (80031b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031a2:	5ccb      	ldrb	r3, [r1, r3]
 80031a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40023800 	.word	0x40023800
 80031b0:	08006140 	.word	0x08006140

080031b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031b8:	f7ff ffdc 	bl	8003174 <HAL_RCC_GetHCLKFreq>
 80031bc:	4602      	mov	r2, r0
 80031be:	4b05      	ldr	r3, [pc, #20]	@ (80031d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	0b5b      	lsrs	r3, r3, #13
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	4903      	ldr	r1, [pc, #12]	@ (80031d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ca:	5ccb      	ldrb	r3, [r1, r3]
 80031cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40023800 	.word	0x40023800
 80031d8:	08006140 	.word	0x08006140

080031dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031e0:	b0a6      	sub	sp, #152	@ 0x98
 80031e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003202:	4bc8      	ldr	r3, [pc, #800]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x348>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 030c 	and.w	r3, r3, #12
 800320a:	2b0c      	cmp	r3, #12
 800320c:	f200 817e 	bhi.w	800350c <HAL_RCC_GetSysClockFreq+0x330>
 8003210:	a201      	add	r2, pc, #4	@ (adr r2, 8003218 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003216:	bf00      	nop
 8003218:	0800324d 	.word	0x0800324d
 800321c:	0800350d 	.word	0x0800350d
 8003220:	0800350d 	.word	0x0800350d
 8003224:	0800350d 	.word	0x0800350d
 8003228:	08003255 	.word	0x08003255
 800322c:	0800350d 	.word	0x0800350d
 8003230:	0800350d 	.word	0x0800350d
 8003234:	0800350d 	.word	0x0800350d
 8003238:	0800325d 	.word	0x0800325d
 800323c:	0800350d 	.word	0x0800350d
 8003240:	0800350d 	.word	0x0800350d
 8003244:	0800350d 	.word	0x0800350d
 8003248:	080033c7 	.word	0x080033c7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800324c:	4bb6      	ldr	r3, [pc, #728]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x34c>)
 800324e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003252:	e15f      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003254:	4bb5      	ldr	r3, [pc, #724]	@ (800352c <HAL_RCC_GetSysClockFreq+0x350>)
 8003256:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800325a:	e15b      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800325c:	4bb1      	ldr	r3, [pc, #708]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x348>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003264:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003268:	4bae      	ldr	r3, [pc, #696]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x348>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d031      	beq.n	80032d8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003274:	4bab      	ldr	r3, [pc, #684]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x348>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	099b      	lsrs	r3, r3, #6
 800327a:	2200      	movs	r2, #0
 800327c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800327e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003280:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003286:	663b      	str	r3, [r7, #96]	@ 0x60
 8003288:	2300      	movs	r3, #0
 800328a:	667b      	str	r3, [r7, #100]	@ 0x64
 800328c:	4ba7      	ldr	r3, [pc, #668]	@ (800352c <HAL_RCC_GetSysClockFreq+0x350>)
 800328e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003292:	462a      	mov	r2, r5
 8003294:	fb03 f202 	mul.w	r2, r3, r2
 8003298:	2300      	movs	r3, #0
 800329a:	4621      	mov	r1, r4
 800329c:	fb01 f303 	mul.w	r3, r1, r3
 80032a0:	4413      	add	r3, r2
 80032a2:	4aa2      	ldr	r2, [pc, #648]	@ (800352c <HAL_RCC_GetSysClockFreq+0x350>)
 80032a4:	4621      	mov	r1, r4
 80032a6:	fba1 1202 	umull	r1, r2, r1, r2
 80032aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80032ac:	460a      	mov	r2, r1
 80032ae:	67ba      	str	r2, [r7, #120]	@ 0x78
 80032b0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80032b2:	4413      	add	r3, r2
 80032b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80032b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032ba:	2200      	movs	r2, #0
 80032bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80032be:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80032c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80032c4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80032c8:	f7fd fc3c 	bl	8000b44 <__aeabi_uldivmod>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4613      	mov	r3, r2
 80032d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80032d6:	e064      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032d8:	4b92      	ldr	r3, [pc, #584]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x348>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	099b      	lsrs	r3, r3, #6
 80032de:	2200      	movs	r2, #0
 80032e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80032e2:	657a      	str	r2, [r7, #84]	@ 0x54
 80032e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032ec:	2300      	movs	r3, #0
 80032ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032f0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80032f4:	4622      	mov	r2, r4
 80032f6:	462b      	mov	r3, r5
 80032f8:	f04f 0000 	mov.w	r0, #0
 80032fc:	f04f 0100 	mov.w	r1, #0
 8003300:	0159      	lsls	r1, r3, #5
 8003302:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003306:	0150      	lsls	r0, r2, #5
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	4621      	mov	r1, r4
 800330e:	1a51      	subs	r1, r2, r1
 8003310:	6139      	str	r1, [r7, #16]
 8003312:	4629      	mov	r1, r5
 8003314:	eb63 0301 	sbc.w	r3, r3, r1
 8003318:	617b      	str	r3, [r7, #20]
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	f04f 0300 	mov.w	r3, #0
 8003322:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003326:	4659      	mov	r1, fp
 8003328:	018b      	lsls	r3, r1, #6
 800332a:	4651      	mov	r1, sl
 800332c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003330:	4651      	mov	r1, sl
 8003332:	018a      	lsls	r2, r1, #6
 8003334:	4651      	mov	r1, sl
 8003336:	ebb2 0801 	subs.w	r8, r2, r1
 800333a:	4659      	mov	r1, fp
 800333c:	eb63 0901 	sbc.w	r9, r3, r1
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	f04f 0300 	mov.w	r3, #0
 8003348:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800334c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003350:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003354:	4690      	mov	r8, r2
 8003356:	4699      	mov	r9, r3
 8003358:	4623      	mov	r3, r4
 800335a:	eb18 0303 	adds.w	r3, r8, r3
 800335e:	60bb      	str	r3, [r7, #8]
 8003360:	462b      	mov	r3, r5
 8003362:	eb49 0303 	adc.w	r3, r9, r3
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	f04f 0300 	mov.w	r3, #0
 8003370:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003374:	4629      	mov	r1, r5
 8003376:	028b      	lsls	r3, r1, #10
 8003378:	4621      	mov	r1, r4
 800337a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800337e:	4621      	mov	r1, r4
 8003380:	028a      	lsls	r2, r1, #10
 8003382:	4610      	mov	r0, r2
 8003384:	4619      	mov	r1, r3
 8003386:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800338a:	2200      	movs	r2, #0
 800338c:	643b      	str	r3, [r7, #64]	@ 0x40
 800338e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003390:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003394:	f7fd fbd6 	bl	8000b44 <__aeabi_uldivmod>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4613      	mov	r3, r2
 800339e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80033a2:	4b60      	ldr	r3, [pc, #384]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x348>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	0c1b      	lsrs	r3, r3, #16
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	3301      	adds	r3, #1
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80033b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80033b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80033c4:	e0a6      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033c6:	4b57      	ldr	r3, [pc, #348]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x348>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033d2:	4b54      	ldr	r3, [pc, #336]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x348>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d02a      	beq.n	8003434 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033de:	4b51      	ldr	r3, [pc, #324]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x348>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	099b      	lsrs	r3, r3, #6
 80033e4:	2200      	movs	r2, #0
 80033e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80033ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033f0:	2100      	movs	r1, #0
 80033f2:	4b4e      	ldr	r3, [pc, #312]	@ (800352c <HAL_RCC_GetSysClockFreq+0x350>)
 80033f4:	fb03 f201 	mul.w	r2, r3, r1
 80033f8:	2300      	movs	r3, #0
 80033fa:	fb00 f303 	mul.w	r3, r0, r3
 80033fe:	4413      	add	r3, r2
 8003400:	4a4a      	ldr	r2, [pc, #296]	@ (800352c <HAL_RCC_GetSysClockFreq+0x350>)
 8003402:	fba0 1202 	umull	r1, r2, r0, r2
 8003406:	677a      	str	r2, [r7, #116]	@ 0x74
 8003408:	460a      	mov	r2, r1
 800340a:	673a      	str	r2, [r7, #112]	@ 0x70
 800340c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800340e:	4413      	add	r3, r2
 8003410:	677b      	str	r3, [r7, #116]	@ 0x74
 8003412:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003416:	2200      	movs	r2, #0
 8003418:	633b      	str	r3, [r7, #48]	@ 0x30
 800341a:	637a      	str	r2, [r7, #52]	@ 0x34
 800341c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003420:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003424:	f7fd fb8e 	bl	8000b44 <__aeabi_uldivmod>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4613      	mov	r3, r2
 800342e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003432:	e05b      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003434:	4b3b      	ldr	r3, [pc, #236]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x348>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	099b      	lsrs	r3, r3, #6
 800343a:	2200      	movs	r2, #0
 800343c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800343e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003446:	623b      	str	r3, [r7, #32]
 8003448:	2300      	movs	r3, #0
 800344a:	627b      	str	r3, [r7, #36]	@ 0x24
 800344c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003450:	4642      	mov	r2, r8
 8003452:	464b      	mov	r3, r9
 8003454:	f04f 0000 	mov.w	r0, #0
 8003458:	f04f 0100 	mov.w	r1, #0
 800345c:	0159      	lsls	r1, r3, #5
 800345e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003462:	0150      	lsls	r0, r2, #5
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	4641      	mov	r1, r8
 800346a:	ebb2 0a01 	subs.w	sl, r2, r1
 800346e:	4649      	mov	r1, r9
 8003470:	eb63 0b01 	sbc.w	fp, r3, r1
 8003474:	f04f 0200 	mov.w	r2, #0
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003480:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003484:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003488:	ebb2 040a 	subs.w	r4, r2, sl
 800348c:	eb63 050b 	sbc.w	r5, r3, fp
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	f04f 0300 	mov.w	r3, #0
 8003498:	00eb      	lsls	r3, r5, #3
 800349a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800349e:	00e2      	lsls	r2, r4, #3
 80034a0:	4614      	mov	r4, r2
 80034a2:	461d      	mov	r5, r3
 80034a4:	4643      	mov	r3, r8
 80034a6:	18e3      	adds	r3, r4, r3
 80034a8:	603b      	str	r3, [r7, #0]
 80034aa:	464b      	mov	r3, r9
 80034ac:	eb45 0303 	adc.w	r3, r5, r3
 80034b0:	607b      	str	r3, [r7, #4]
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034be:	4629      	mov	r1, r5
 80034c0:	028b      	lsls	r3, r1, #10
 80034c2:	4621      	mov	r1, r4
 80034c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034c8:	4621      	mov	r1, r4
 80034ca:	028a      	lsls	r2, r1, #10
 80034cc:	4610      	mov	r0, r2
 80034ce:	4619      	mov	r1, r3
 80034d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034d4:	2200      	movs	r2, #0
 80034d6:	61bb      	str	r3, [r7, #24]
 80034d8:	61fa      	str	r2, [r7, #28]
 80034da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034de:	f7fd fb31 	bl	8000b44 <__aeabi_uldivmod>
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	4613      	mov	r3, r2
 80034e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80034ec:	4b0d      	ldr	r3, [pc, #52]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x348>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	0f1b      	lsrs	r3, r3, #28
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80034fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80034fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003502:	fbb2 f3f3 	udiv	r3, r2, r3
 8003506:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800350a:	e003      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800350c:	4b06      	ldr	r3, [pc, #24]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x34c>)
 800350e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003512:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003514:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003518:	4618      	mov	r0, r3
 800351a:	3798      	adds	r7, #152	@ 0x98
 800351c:	46bd      	mov	sp, r7
 800351e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003522:	bf00      	nop
 8003524:	40023800 	.word	0x40023800
 8003528:	00f42400 	.word	0x00f42400
 800352c:	017d7840 	.word	0x017d7840

08003530 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e28d      	b.n	8003a5e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 8083 	beq.w	8003656 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003550:	4b94      	ldr	r3, [pc, #592]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 030c 	and.w	r3, r3, #12
 8003558:	2b04      	cmp	r3, #4
 800355a:	d019      	beq.n	8003590 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800355c:	4b91      	ldr	r3, [pc, #580]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 030c 	and.w	r3, r3, #12
        || \
 8003564:	2b08      	cmp	r3, #8
 8003566:	d106      	bne.n	8003576 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003568:	4b8e      	ldr	r3, [pc, #568]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003570:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003574:	d00c      	beq.n	8003590 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003576:	4b8b      	ldr	r3, [pc, #556]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800357e:	2b0c      	cmp	r3, #12
 8003580:	d112      	bne.n	80035a8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003582:	4b88      	ldr	r3, [pc, #544]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800358a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800358e:	d10b      	bne.n	80035a8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003590:	4b84      	ldr	r3, [pc, #528]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d05b      	beq.n	8003654 <HAL_RCC_OscConfig+0x124>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d157      	bne.n	8003654 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e25a      	b.n	8003a5e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035b0:	d106      	bne.n	80035c0 <HAL_RCC_OscConfig+0x90>
 80035b2:	4b7c      	ldr	r3, [pc, #496]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a7b      	ldr	r2, [pc, #492]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 80035b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	e01d      	b.n	80035fc <HAL_RCC_OscConfig+0xcc>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035c8:	d10c      	bne.n	80035e4 <HAL_RCC_OscConfig+0xb4>
 80035ca:	4b76      	ldr	r3, [pc, #472]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a75      	ldr	r2, [pc, #468]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 80035d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	4b73      	ldr	r3, [pc, #460]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a72      	ldr	r2, [pc, #456]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 80035dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	e00b      	b.n	80035fc <HAL_RCC_OscConfig+0xcc>
 80035e4:	4b6f      	ldr	r3, [pc, #444]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a6e      	ldr	r2, [pc, #440]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 80035ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035ee:	6013      	str	r3, [r2, #0]
 80035f0:	4b6c      	ldr	r3, [pc, #432]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a6b      	ldr	r2, [pc, #428]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 80035f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d013      	beq.n	800362c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003604:	f7fe f8e4 	bl	80017d0 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800360c:	f7fe f8e0 	bl	80017d0 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b64      	cmp	r3, #100	@ 0x64
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e21f      	b.n	8003a5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361e:	4b61      	ldr	r3, [pc, #388]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0f0      	beq.n	800360c <HAL_RCC_OscConfig+0xdc>
 800362a:	e014      	b.n	8003656 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362c:	f7fe f8d0 	bl	80017d0 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003634:	f7fe f8cc 	bl	80017d0 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b64      	cmp	r3, #100	@ 0x64
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e20b      	b.n	8003a5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003646:	4b57      	ldr	r3, [pc, #348]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1f0      	bne.n	8003634 <HAL_RCC_OscConfig+0x104>
 8003652:	e000      	b.n	8003656 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d06f      	beq.n	8003742 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003662:	4b50      	ldr	r3, [pc, #320]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 030c 	and.w	r3, r3, #12
 800366a:	2b00      	cmp	r3, #0
 800366c:	d017      	beq.n	800369e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800366e:	4b4d      	ldr	r3, [pc, #308]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 030c 	and.w	r3, r3, #12
        || \
 8003676:	2b08      	cmp	r3, #8
 8003678:	d105      	bne.n	8003686 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800367a:	4b4a      	ldr	r3, [pc, #296]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00b      	beq.n	800369e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003686:	4b47      	ldr	r3, [pc, #284]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800368e:	2b0c      	cmp	r3, #12
 8003690:	d11c      	bne.n	80036cc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003692:	4b44      	ldr	r3, [pc, #272]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d116      	bne.n	80036cc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800369e:	4b41      	ldr	r3, [pc, #260]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d005      	beq.n	80036b6 <HAL_RCC_OscConfig+0x186>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d001      	beq.n	80036b6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e1d3      	b.n	8003a5e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b6:	4b3b      	ldr	r3, [pc, #236]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	4937      	ldr	r1, [pc, #220]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ca:	e03a      	b.n	8003742 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d020      	beq.n	8003716 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036d4:	4b34      	ldr	r3, [pc, #208]	@ (80037a8 <HAL_RCC_OscConfig+0x278>)
 80036d6:	2201      	movs	r2, #1
 80036d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036da:	f7fe f879 	bl	80017d0 <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e0:	e008      	b.n	80036f4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036e2:	f7fe f875 	bl	80017d0 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e1b4      	b.n	8003a5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f4:	4b2b      	ldr	r3, [pc, #172]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0f0      	beq.n	80036e2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003700:	4b28      	ldr	r3, [pc, #160]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	4925      	ldr	r1, [pc, #148]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 8003710:	4313      	orrs	r3, r2
 8003712:	600b      	str	r3, [r1, #0]
 8003714:	e015      	b.n	8003742 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003716:	4b24      	ldr	r3, [pc, #144]	@ (80037a8 <HAL_RCC_OscConfig+0x278>)
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371c:	f7fe f858 	bl	80017d0 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003724:	f7fe f854 	bl	80017d0 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e193      	b.n	8003a5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003736:	4b1b      	ldr	r3, [pc, #108]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f0      	bne.n	8003724 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0308 	and.w	r3, r3, #8
 800374a:	2b00      	cmp	r3, #0
 800374c:	d036      	beq.n	80037bc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d016      	beq.n	8003784 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003756:	4b15      	ldr	r3, [pc, #84]	@ (80037ac <HAL_RCC_OscConfig+0x27c>)
 8003758:	2201      	movs	r2, #1
 800375a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375c:	f7fe f838 	bl	80017d0 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003764:	f7fe f834 	bl	80017d0 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e173      	b.n	8003a5e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003776:	4b0b      	ldr	r3, [pc, #44]	@ (80037a4 <HAL_RCC_OscConfig+0x274>)
 8003778:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0f0      	beq.n	8003764 <HAL_RCC_OscConfig+0x234>
 8003782:	e01b      	b.n	80037bc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003784:	4b09      	ldr	r3, [pc, #36]	@ (80037ac <HAL_RCC_OscConfig+0x27c>)
 8003786:	2200      	movs	r2, #0
 8003788:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800378a:	f7fe f821 	bl	80017d0 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003790:	e00e      	b.n	80037b0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003792:	f7fe f81d 	bl	80017d0 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d907      	bls.n	80037b0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e15c      	b.n	8003a5e <HAL_RCC_OscConfig+0x52e>
 80037a4:	40023800 	.word	0x40023800
 80037a8:	42470000 	.word	0x42470000
 80037ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b0:	4b8a      	ldr	r3, [pc, #552]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 80037b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1ea      	bne.n	8003792 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 8097 	beq.w	80038f8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ca:	2300      	movs	r3, #0
 80037cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ce:	4b83      	ldr	r3, [pc, #524]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 80037d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10f      	bne.n	80037fa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037da:	2300      	movs	r3, #0
 80037dc:	60bb      	str	r3, [r7, #8]
 80037de:	4b7f      	ldr	r3, [pc, #508]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 80037e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e2:	4a7e      	ldr	r2, [pc, #504]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 80037e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80037ea:	4b7c      	ldr	r3, [pc, #496]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037f2:	60bb      	str	r3, [r7, #8]
 80037f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037f6:	2301      	movs	r3, #1
 80037f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037fa:	4b79      	ldr	r3, [pc, #484]	@ (80039e0 <HAL_RCC_OscConfig+0x4b0>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003802:	2b00      	cmp	r3, #0
 8003804:	d118      	bne.n	8003838 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003806:	4b76      	ldr	r3, [pc, #472]	@ (80039e0 <HAL_RCC_OscConfig+0x4b0>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a75      	ldr	r2, [pc, #468]	@ (80039e0 <HAL_RCC_OscConfig+0x4b0>)
 800380c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003812:	f7fd ffdd 	bl	80017d0 <HAL_GetTick>
 8003816:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003818:	e008      	b.n	800382c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800381a:	f7fd ffd9 	bl	80017d0 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e118      	b.n	8003a5e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800382c:	4b6c      	ldr	r3, [pc, #432]	@ (80039e0 <HAL_RCC_OscConfig+0x4b0>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003834:	2b00      	cmp	r3, #0
 8003836:	d0f0      	beq.n	800381a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d106      	bne.n	800384e <HAL_RCC_OscConfig+0x31e>
 8003840:	4b66      	ldr	r3, [pc, #408]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 8003842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003844:	4a65      	ldr	r2, [pc, #404]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 8003846:	f043 0301 	orr.w	r3, r3, #1
 800384a:	6713      	str	r3, [r2, #112]	@ 0x70
 800384c:	e01c      	b.n	8003888 <HAL_RCC_OscConfig+0x358>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	2b05      	cmp	r3, #5
 8003854:	d10c      	bne.n	8003870 <HAL_RCC_OscConfig+0x340>
 8003856:	4b61      	ldr	r3, [pc, #388]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 8003858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800385a:	4a60      	ldr	r2, [pc, #384]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 800385c:	f043 0304 	orr.w	r3, r3, #4
 8003860:	6713      	str	r3, [r2, #112]	@ 0x70
 8003862:	4b5e      	ldr	r3, [pc, #376]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 8003864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003866:	4a5d      	ldr	r2, [pc, #372]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 8003868:	f043 0301 	orr.w	r3, r3, #1
 800386c:	6713      	str	r3, [r2, #112]	@ 0x70
 800386e:	e00b      	b.n	8003888 <HAL_RCC_OscConfig+0x358>
 8003870:	4b5a      	ldr	r3, [pc, #360]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 8003872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003874:	4a59      	ldr	r2, [pc, #356]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 8003876:	f023 0301 	bic.w	r3, r3, #1
 800387a:	6713      	str	r3, [r2, #112]	@ 0x70
 800387c:	4b57      	ldr	r3, [pc, #348]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 800387e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003880:	4a56      	ldr	r2, [pc, #344]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 8003882:	f023 0304 	bic.w	r3, r3, #4
 8003886:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d015      	beq.n	80038bc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003890:	f7fd ff9e 	bl	80017d0 <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003896:	e00a      	b.n	80038ae <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003898:	f7fd ff9a 	bl	80017d0 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e0d7      	b.n	8003a5e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ae:	4b4b      	ldr	r3, [pc, #300]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 80038b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0ee      	beq.n	8003898 <HAL_RCC_OscConfig+0x368>
 80038ba:	e014      	b.n	80038e6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038bc:	f7fd ff88 	bl	80017d0 <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038c2:	e00a      	b.n	80038da <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c4:	f7fd ff84 	bl	80017d0 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e0c1      	b.n	8003a5e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038da:	4b40      	ldr	r3, [pc, #256]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 80038dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1ee      	bne.n	80038c4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038e6:	7dfb      	ldrb	r3, [r7, #23]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d105      	bne.n	80038f8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ec:	4b3b      	ldr	r3, [pc, #236]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 80038ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f0:	4a3a      	ldr	r2, [pc, #232]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 80038f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 80ad 	beq.w	8003a5c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003902:	4b36      	ldr	r3, [pc, #216]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 030c 	and.w	r3, r3, #12
 800390a:	2b08      	cmp	r3, #8
 800390c:	d060      	beq.n	80039d0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	2b02      	cmp	r3, #2
 8003914:	d145      	bne.n	80039a2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003916:	4b33      	ldr	r3, [pc, #204]	@ (80039e4 <HAL_RCC_OscConfig+0x4b4>)
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391c:	f7fd ff58 	bl	80017d0 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003924:	f7fd ff54 	bl	80017d0 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e093      	b.n	8003a5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003936:	4b29      	ldr	r3, [pc, #164]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f0      	bne.n	8003924 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	69da      	ldr	r2, [r3, #28]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003950:	019b      	lsls	r3, r3, #6
 8003952:	431a      	orrs	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003958:	085b      	lsrs	r3, r3, #1
 800395a:	3b01      	subs	r3, #1
 800395c:	041b      	lsls	r3, r3, #16
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003964:	061b      	lsls	r3, r3, #24
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396c:	071b      	lsls	r3, r3, #28
 800396e:	491b      	ldr	r1, [pc, #108]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 8003970:	4313      	orrs	r3, r2
 8003972:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003974:	4b1b      	ldr	r3, [pc, #108]	@ (80039e4 <HAL_RCC_OscConfig+0x4b4>)
 8003976:	2201      	movs	r2, #1
 8003978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397a:	f7fd ff29 	bl	80017d0 <HAL_GetTick>
 800397e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003980:	e008      	b.n	8003994 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003982:	f7fd ff25 	bl	80017d0 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e064      	b.n	8003a5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003994:	4b11      	ldr	r3, [pc, #68]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0f0      	beq.n	8003982 <HAL_RCC_OscConfig+0x452>
 80039a0:	e05c      	b.n	8003a5c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a2:	4b10      	ldr	r3, [pc, #64]	@ (80039e4 <HAL_RCC_OscConfig+0x4b4>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a8:	f7fd ff12 	bl	80017d0 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b0:	f7fd ff0e 	bl	80017d0 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e04d      	b.n	8003a5e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c2:	4b06      	ldr	r3, [pc, #24]	@ (80039dc <HAL_RCC_OscConfig+0x4ac>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1f0      	bne.n	80039b0 <HAL_RCC_OscConfig+0x480>
 80039ce:	e045      	b.n	8003a5c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d107      	bne.n	80039e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e040      	b.n	8003a5e <HAL_RCC_OscConfig+0x52e>
 80039dc:	40023800 	.word	0x40023800
 80039e0:	40007000 	.word	0x40007000
 80039e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003a68 <HAL_RCC_OscConfig+0x538>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d030      	beq.n	8003a58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d129      	bne.n	8003a58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d122      	bne.n	8003a58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a18:	4013      	ands	r3, r2
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d119      	bne.n	8003a58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a2e:	085b      	lsrs	r3, r3, #1
 8003a30:	3b01      	subs	r3, #1
 8003a32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d10f      	bne.n	8003a58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d107      	bne.n	8003a58 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a52:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d001      	beq.n	8003a5c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e000      	b.n	8003a5e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40023800 	.word	0x40023800

08003a6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e041      	b.n	8003b02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d106      	bne.n	8003a98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7fd fd34 	bl	8001500 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3304      	adds	r3, #4
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4610      	mov	r0, r2
 8003aac:	f000 f9b6 	bl	8003e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
	...

08003b0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d001      	beq.n	8003b24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e04e      	b.n	8003bc2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0201 	orr.w	r2, r2, #1
 8003b3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a23      	ldr	r2, [pc, #140]	@ (8003bd0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d022      	beq.n	8003b8c <HAL_TIM_Base_Start_IT+0x80>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b4e:	d01d      	beq.n	8003b8c <HAL_TIM_Base_Start_IT+0x80>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a1f      	ldr	r2, [pc, #124]	@ (8003bd4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d018      	beq.n	8003b8c <HAL_TIM_Base_Start_IT+0x80>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a1e      	ldr	r2, [pc, #120]	@ (8003bd8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d013      	beq.n	8003b8c <HAL_TIM_Base_Start_IT+0x80>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a1c      	ldr	r2, [pc, #112]	@ (8003bdc <HAL_TIM_Base_Start_IT+0xd0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d00e      	beq.n	8003b8c <HAL_TIM_Base_Start_IT+0x80>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a1b      	ldr	r2, [pc, #108]	@ (8003be0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d009      	beq.n	8003b8c <HAL_TIM_Base_Start_IT+0x80>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a19      	ldr	r2, [pc, #100]	@ (8003be4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d004      	beq.n	8003b8c <HAL_TIM_Base_Start_IT+0x80>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a18      	ldr	r2, [pc, #96]	@ (8003be8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d111      	bne.n	8003bb0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 0307 	and.w	r3, r3, #7
 8003b96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2b06      	cmp	r3, #6
 8003b9c:	d010      	beq.n	8003bc0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f042 0201 	orr.w	r2, r2, #1
 8003bac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bae:	e007      	b.n	8003bc0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0201 	orr.w	r2, r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	40010000 	.word	0x40010000
 8003bd4:	40000400 	.word	0x40000400
 8003bd8:	40000800 	.word	0x40000800
 8003bdc:	40000c00 	.word	0x40000c00
 8003be0:	40010400 	.word	0x40010400
 8003be4:	40014000 	.word	0x40014000
 8003be8:	40001800 	.word	0x40001800

08003bec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d020      	beq.n	8003c50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d01b      	beq.n	8003c50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f06f 0202 	mvn.w	r2, #2
 8003c20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	f003 0303 	and.w	r3, r3, #3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f8d2 	bl	8003de0 <HAL_TIM_IC_CaptureCallback>
 8003c3c:	e005      	b.n	8003c4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f8c4 	bl	8003dcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f8d5 	bl	8003df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	f003 0304 	and.w	r3, r3, #4
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d020      	beq.n	8003c9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d01b      	beq.n	8003c9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f06f 0204 	mvn.w	r2, #4
 8003c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2202      	movs	r2, #2
 8003c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f8ac 	bl	8003de0 <HAL_TIM_IC_CaptureCallback>
 8003c88:	e005      	b.n	8003c96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f89e 	bl	8003dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f8af 	bl	8003df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d020      	beq.n	8003ce8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f003 0308 	and.w	r3, r3, #8
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d01b      	beq.n	8003ce8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f06f 0208 	mvn.w	r2, #8
 8003cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2204      	movs	r2, #4
 8003cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	f003 0303 	and.w	r3, r3, #3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f886 	bl	8003de0 <HAL_TIM_IC_CaptureCallback>
 8003cd4:	e005      	b.n	8003ce2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f878 	bl	8003dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 f889 	bl	8003df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	f003 0310 	and.w	r3, r3, #16
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d020      	beq.n	8003d34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f003 0310 	and.w	r3, r3, #16
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d01b      	beq.n	8003d34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f06f 0210 	mvn.w	r2, #16
 8003d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2208      	movs	r2, #8
 8003d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f860 	bl	8003de0 <HAL_TIM_IC_CaptureCallback>
 8003d20:	e005      	b.n	8003d2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f852 	bl	8003dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f863 	bl	8003df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00c      	beq.n	8003d58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d007      	beq.n	8003d58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f06f 0201 	mvn.w	r2, #1
 8003d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7fd fab8 	bl	80012c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00c      	beq.n	8003d7c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d007      	beq.n	8003d7c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f906 	bl	8003f88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00c      	beq.n	8003da0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d007      	beq.n	8003da0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 f834 	bl	8003e08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	f003 0320 	and.w	r3, r3, #32
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00c      	beq.n	8003dc4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d007      	beq.n	8003dc4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f06f 0220 	mvn.w	r2, #32
 8003dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f8d8 	bl	8003f74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dc4:	bf00      	nop
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a46      	ldr	r2, [pc, #280]	@ (8003f48 <TIM_Base_SetConfig+0x12c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d013      	beq.n	8003e5c <TIM_Base_SetConfig+0x40>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e3a:	d00f      	beq.n	8003e5c <TIM_Base_SetConfig+0x40>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a43      	ldr	r2, [pc, #268]	@ (8003f4c <TIM_Base_SetConfig+0x130>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d00b      	beq.n	8003e5c <TIM_Base_SetConfig+0x40>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a42      	ldr	r2, [pc, #264]	@ (8003f50 <TIM_Base_SetConfig+0x134>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d007      	beq.n	8003e5c <TIM_Base_SetConfig+0x40>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a41      	ldr	r2, [pc, #260]	@ (8003f54 <TIM_Base_SetConfig+0x138>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d003      	beq.n	8003e5c <TIM_Base_SetConfig+0x40>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a40      	ldr	r2, [pc, #256]	@ (8003f58 <TIM_Base_SetConfig+0x13c>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d108      	bne.n	8003e6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a35      	ldr	r2, [pc, #212]	@ (8003f48 <TIM_Base_SetConfig+0x12c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d02b      	beq.n	8003ece <TIM_Base_SetConfig+0xb2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e7c:	d027      	beq.n	8003ece <TIM_Base_SetConfig+0xb2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a32      	ldr	r2, [pc, #200]	@ (8003f4c <TIM_Base_SetConfig+0x130>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d023      	beq.n	8003ece <TIM_Base_SetConfig+0xb2>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a31      	ldr	r2, [pc, #196]	@ (8003f50 <TIM_Base_SetConfig+0x134>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d01f      	beq.n	8003ece <TIM_Base_SetConfig+0xb2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a30      	ldr	r2, [pc, #192]	@ (8003f54 <TIM_Base_SetConfig+0x138>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d01b      	beq.n	8003ece <TIM_Base_SetConfig+0xb2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a2f      	ldr	r2, [pc, #188]	@ (8003f58 <TIM_Base_SetConfig+0x13c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d017      	beq.n	8003ece <TIM_Base_SetConfig+0xb2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a2e      	ldr	r2, [pc, #184]	@ (8003f5c <TIM_Base_SetConfig+0x140>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d013      	beq.n	8003ece <TIM_Base_SetConfig+0xb2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a2d      	ldr	r2, [pc, #180]	@ (8003f60 <TIM_Base_SetConfig+0x144>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d00f      	beq.n	8003ece <TIM_Base_SetConfig+0xb2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a2c      	ldr	r2, [pc, #176]	@ (8003f64 <TIM_Base_SetConfig+0x148>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d00b      	beq.n	8003ece <TIM_Base_SetConfig+0xb2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a2b      	ldr	r2, [pc, #172]	@ (8003f68 <TIM_Base_SetConfig+0x14c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d007      	beq.n	8003ece <TIM_Base_SetConfig+0xb2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a2a      	ldr	r2, [pc, #168]	@ (8003f6c <TIM_Base_SetConfig+0x150>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d003      	beq.n	8003ece <TIM_Base_SetConfig+0xb2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a29      	ldr	r2, [pc, #164]	@ (8003f70 <TIM_Base_SetConfig+0x154>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d108      	bne.n	8003ee0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a10      	ldr	r2, [pc, #64]	@ (8003f48 <TIM_Base_SetConfig+0x12c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d003      	beq.n	8003f14 <TIM_Base_SetConfig+0xf8>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a12      	ldr	r2, [pc, #72]	@ (8003f58 <TIM_Base_SetConfig+0x13c>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d103      	bne.n	8003f1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	691a      	ldr	r2, [r3, #16]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d105      	bne.n	8003f3a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	f023 0201 	bic.w	r2, r3, #1
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	611a      	str	r2, [r3, #16]
  }
}
 8003f3a:	bf00      	nop
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	40010000 	.word	0x40010000
 8003f4c:	40000400 	.word	0x40000400
 8003f50:	40000800 	.word	0x40000800
 8003f54:	40000c00 	.word	0x40000c00
 8003f58:	40010400 	.word	0x40010400
 8003f5c:	40014000 	.word	0x40014000
 8003f60:	40014400 	.word	0x40014400
 8003f64:	40014800 	.word	0x40014800
 8003f68:	40001800 	.word	0x40001800
 8003f6c:	40001c00 	.word	0x40001c00
 8003f70:	40002000 	.word	0x40002000

08003f74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e042      	b.n	8004034 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d106      	bne.n	8003fc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7fd fac4 	bl	8001550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2224      	movs	r2, #36	@ 0x24
 8003fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 fdc7 	bl	8004b74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	691a      	ldr	r2, [r3, #16]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ff4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	695a      	ldr	r2, [r3, #20]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004004:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68da      	ldr	r2, [r3, #12]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004014:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2220      	movs	r2, #32
 8004028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3708      	adds	r7, #8
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b08a      	sub	sp, #40	@ 0x28
 8004040:	af02      	add	r7, sp, #8
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	603b      	str	r3, [r7, #0]
 8004048:	4613      	mov	r3, r2
 800404a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b20      	cmp	r3, #32
 800405a:	d175      	bne.n	8004148 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <HAL_UART_Transmit+0x2c>
 8004062:	88fb      	ldrh	r3, [r7, #6]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e06e      	b.n	800414a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2221      	movs	r2, #33	@ 0x21
 8004076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800407a:	f7fd fba9 	bl	80017d0 <HAL_GetTick>
 800407e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	88fa      	ldrh	r2, [r7, #6]
 8004084:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	88fa      	ldrh	r2, [r7, #6]
 800408a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004094:	d108      	bne.n	80040a8 <HAL_UART_Transmit+0x6c>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d104      	bne.n	80040a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800409e:	2300      	movs	r3, #0
 80040a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	61bb      	str	r3, [r7, #24]
 80040a6:	e003      	b.n	80040b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040ac:	2300      	movs	r3, #0
 80040ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040b0:	e02e      	b.n	8004110 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2200      	movs	r2, #0
 80040ba:	2180      	movs	r1, #128	@ 0x80
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 fb29 	bl	8004714 <UART_WaitOnFlagUntilTimeout>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d005      	beq.n	80040d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2220      	movs	r2, #32
 80040cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e03a      	b.n	800414a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10b      	bne.n	80040f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	3302      	adds	r3, #2
 80040ee:	61bb      	str	r3, [r7, #24]
 80040f0:	e007      	b.n	8004102 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	781a      	ldrb	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	3301      	adds	r3, #1
 8004100:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004106:	b29b      	uxth	r3, r3
 8004108:	3b01      	subs	r3, #1
 800410a:	b29a      	uxth	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004114:	b29b      	uxth	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1cb      	bne.n	80040b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2200      	movs	r2, #0
 8004122:	2140      	movs	r1, #64	@ 0x40
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 faf5 	bl	8004714 <UART_WaitOnFlagUntilTimeout>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d005      	beq.n	800413c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2220      	movs	r2, #32
 8004134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e006      	b.n	800414a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2220      	movs	r2, #32
 8004140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004144:	2300      	movs	r3, #0
 8004146:	e000      	b.n	800414a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004148:	2302      	movs	r3, #2
  }
}
 800414a:	4618      	mov	r0, r3
 800414c:	3720      	adds	r7, #32
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b084      	sub	sp, #16
 8004156:	af00      	add	r7, sp, #0
 8004158:	60f8      	str	r0, [r7, #12]
 800415a:	60b9      	str	r1, [r7, #8]
 800415c:	4613      	mov	r3, r2
 800415e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b20      	cmp	r3, #32
 800416a:	d112      	bne.n	8004192 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <HAL_UART_Receive_IT+0x26>
 8004172:	88fb      	ldrh	r3, [r7, #6]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e00b      	b.n	8004194 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004182:	88fb      	ldrh	r3, [r7, #6]
 8004184:	461a      	mov	r2, r3
 8004186:	68b9      	ldr	r1, [r7, #8]
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 fb1c 	bl	80047c6 <UART_Start_Receive_IT>
 800418e:	4603      	mov	r3, r0
 8004190:	e000      	b.n	8004194 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004192:	2302      	movs	r3, #2
  }
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b0ba      	sub	sp, #232	@ 0xe8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80041c2:	2300      	movs	r3, #0
 80041c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041d2:	f003 030f 	and.w	r3, r3, #15
 80041d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80041da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10f      	bne.n	8004202 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041e6:	f003 0320 	and.w	r3, r3, #32
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d009      	beq.n	8004202 <HAL_UART_IRQHandler+0x66>
 80041ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041f2:	f003 0320 	and.w	r3, r3, #32
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 fbfc 	bl	80049f8 <UART_Receive_IT>
      return;
 8004200:	e25b      	b.n	80046ba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004202:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 80de 	beq.w	80043c8 <HAL_UART_IRQHandler+0x22c>
 800420c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b00      	cmp	r3, #0
 8004216:	d106      	bne.n	8004226 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800421c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 80d1 	beq.w	80043c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00b      	beq.n	800424a <HAL_UART_IRQHandler+0xae>
 8004232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800423a:	2b00      	cmp	r3, #0
 800423c:	d005      	beq.n	800424a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004242:	f043 0201 	orr.w	r2, r3, #1
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800424a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00b      	beq.n	800426e <HAL_UART_IRQHandler+0xd2>
 8004256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d005      	beq.n	800426e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004266:	f043 0202 	orr.w	r2, r3, #2
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800426e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00b      	beq.n	8004292 <HAL_UART_IRQHandler+0xf6>
 800427a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	d005      	beq.n	8004292 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800428a:	f043 0204 	orr.w	r2, r3, #4
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004296:	f003 0308 	and.w	r3, r3, #8
 800429a:	2b00      	cmp	r3, #0
 800429c:	d011      	beq.n	80042c2 <HAL_UART_IRQHandler+0x126>
 800429e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042a2:	f003 0320 	and.w	r3, r3, #32
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d105      	bne.n	80042b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80042aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d005      	beq.n	80042c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ba:	f043 0208 	orr.w	r2, r3, #8
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 81f2 	beq.w	80046b0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042d0:	f003 0320 	and.w	r3, r3, #32
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d008      	beq.n	80042ea <HAL_UART_IRQHandler+0x14e>
 80042d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042dc:	f003 0320 	and.w	r3, r3, #32
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d002      	beq.n	80042ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 fb87 	bl	80049f8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f4:	2b40      	cmp	r3, #64	@ 0x40
 80042f6:	bf0c      	ite	eq
 80042f8:	2301      	moveq	r3, #1
 80042fa:	2300      	movne	r3, #0
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004306:	f003 0308 	and.w	r3, r3, #8
 800430a:	2b00      	cmp	r3, #0
 800430c:	d103      	bne.n	8004316 <HAL_UART_IRQHandler+0x17a>
 800430e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004312:	2b00      	cmp	r3, #0
 8004314:	d04f      	beq.n	80043b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 fa8f 	bl	800483a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004326:	2b40      	cmp	r3, #64	@ 0x40
 8004328:	d141      	bne.n	80043ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	3314      	adds	r3, #20
 8004330:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004334:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004338:	e853 3f00 	ldrex	r3, [r3]
 800433c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004340:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004344:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004348:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	3314      	adds	r3, #20
 8004352:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004356:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800435a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004362:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004366:	e841 2300 	strex	r3, r2, [r1]
 800436a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800436e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1d9      	bne.n	800432a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800437a:	2b00      	cmp	r3, #0
 800437c:	d013      	beq.n	80043a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004382:	4a7e      	ldr	r2, [pc, #504]	@ (800457c <HAL_UART_IRQHandler+0x3e0>)
 8004384:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800438a:	4618      	mov	r0, r3
 800438c:	f7fe f9d2 	bl	8002734 <HAL_DMA_Abort_IT>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d016      	beq.n	80043c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800439a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80043a0:	4610      	mov	r0, r2
 80043a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a4:	e00e      	b.n	80043c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f99e 	bl	80046e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043ac:	e00a      	b.n	80043c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f99a 	bl	80046e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b4:	e006      	b.n	80043c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f996 	bl	80046e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80043c2:	e175      	b.n	80046b0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c4:	bf00      	nop
    return;
 80043c6:	e173      	b.n	80046b0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	f040 814f 	bne.w	8004670 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80043d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043d6:	f003 0310 	and.w	r3, r3, #16
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 8148 	beq.w	8004670 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80043e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043e4:	f003 0310 	and.w	r3, r3, #16
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 8141 	beq.w	8004670 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043ee:	2300      	movs	r3, #0
 80043f0:	60bb      	str	r3, [r7, #8]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	60bb      	str	r3, [r7, #8]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	60bb      	str	r3, [r7, #8]
 8004402:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800440e:	2b40      	cmp	r3, #64	@ 0x40
 8004410:	f040 80b6 	bne.w	8004580 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004420:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 8145 	beq.w	80046b4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800442e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004432:	429a      	cmp	r2, r3
 8004434:	f080 813e 	bcs.w	80046b4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800443e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800444a:	f000 8088 	beq.w	800455e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	330c      	adds	r3, #12
 8004454:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004458:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800445c:	e853 3f00 	ldrex	r3, [r3]
 8004460:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004464:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004468:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800446c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	330c      	adds	r3, #12
 8004476:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800447a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800447e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004482:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004486:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800448a:	e841 2300 	strex	r3, r2, [r1]
 800448e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004492:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1d9      	bne.n	800444e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	3314      	adds	r3, #20
 80044a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044a4:	e853 3f00 	ldrex	r3, [r3]
 80044a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80044aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044ac:	f023 0301 	bic.w	r3, r3, #1
 80044b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	3314      	adds	r3, #20
 80044ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80044be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80044c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80044c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80044ca:	e841 2300 	strex	r3, r2, [r1]
 80044ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80044d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1e1      	bne.n	800449a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	3314      	adds	r3, #20
 80044dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044e0:	e853 3f00 	ldrex	r3, [r3]
 80044e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80044e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	3314      	adds	r3, #20
 80044f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80044fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80044fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004500:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004502:	e841 2300 	strex	r3, r2, [r1]
 8004506:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004508:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1e3      	bne.n	80044d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2220      	movs	r2, #32
 8004512:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	330c      	adds	r3, #12
 8004522:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004524:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004526:	e853 3f00 	ldrex	r3, [r3]
 800452a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800452c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800452e:	f023 0310 	bic.w	r3, r3, #16
 8004532:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	330c      	adds	r3, #12
 800453c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004540:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004542:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004544:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004546:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004548:	e841 2300 	strex	r3, r2, [r1]
 800454c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800454e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1e3      	bne.n	800451c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004558:	4618      	mov	r0, r3
 800455a:	f7fe f87b 	bl	8002654 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2202      	movs	r2, #2
 8004562:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800456c:	b29b      	uxth	r3, r3
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	b29b      	uxth	r3, r3
 8004572:	4619      	mov	r1, r3
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f8c1 	bl	80046fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800457a:	e09b      	b.n	80046b4 <HAL_UART_IRQHandler+0x518>
 800457c:	08004901 	.word	0x08004901
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004588:	b29b      	uxth	r3, r3
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004594:	b29b      	uxth	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 808e 	beq.w	80046b8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800459c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 8089 	beq.w	80046b8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	330c      	adds	r3, #12
 80045ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b0:	e853 3f00 	ldrex	r3, [r3]
 80045b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	330c      	adds	r3, #12
 80045c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80045ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80045cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045d2:	e841 2300 	strex	r3, r2, [r1]
 80045d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1e3      	bne.n	80045a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3314      	adds	r3, #20
 80045e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e8:	e853 3f00 	ldrex	r3, [r3]
 80045ec:	623b      	str	r3, [r7, #32]
   return(result);
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	f023 0301 	bic.w	r3, r3, #1
 80045f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	3314      	adds	r3, #20
 80045fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004602:	633a      	str	r2, [r7, #48]	@ 0x30
 8004604:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004606:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004608:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800460a:	e841 2300 	strex	r3, r2, [r1]
 800460e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1e3      	bne.n	80045de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2220      	movs	r2, #32
 800461a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	330c      	adds	r3, #12
 800462a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	e853 3f00 	ldrex	r3, [r3]
 8004632:	60fb      	str	r3, [r7, #12]
   return(result);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 0310 	bic.w	r3, r3, #16
 800463a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	330c      	adds	r3, #12
 8004644:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004648:	61fa      	str	r2, [r7, #28]
 800464a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464c:	69b9      	ldr	r1, [r7, #24]
 800464e:	69fa      	ldr	r2, [r7, #28]
 8004650:	e841 2300 	strex	r3, r2, [r1]
 8004654:	617b      	str	r3, [r7, #20]
   return(result);
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1e3      	bne.n	8004624 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004662:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004666:	4619      	mov	r1, r3
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f847 	bl	80046fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800466e:	e023      	b.n	80046b8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004674:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004678:	2b00      	cmp	r3, #0
 800467a:	d009      	beq.n	8004690 <HAL_UART_IRQHandler+0x4f4>
 800467c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004680:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f94d 	bl	8004928 <UART_Transmit_IT>
    return;
 800468e:	e014      	b.n	80046ba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00e      	beq.n	80046ba <HAL_UART_IRQHandler+0x51e>
 800469c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d008      	beq.n	80046ba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f98d 	bl	80049c8 <UART_EndTransmit_IT>
    return;
 80046ae:	e004      	b.n	80046ba <HAL_UART_IRQHandler+0x51e>
    return;
 80046b0:	bf00      	nop
 80046b2:	e002      	b.n	80046ba <HAL_UART_IRQHandler+0x51e>
      return;
 80046b4:	bf00      	nop
 80046b6:	e000      	b.n	80046ba <HAL_UART_IRQHandler+0x51e>
      return;
 80046b8:	bf00      	nop
  }
}
 80046ba:	37e8      	adds	r7, #232	@ 0xe8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	460b      	mov	r3, r1
 8004706:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	603b      	str	r3, [r7, #0]
 8004720:	4613      	mov	r3, r2
 8004722:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004724:	e03b      	b.n	800479e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004726:	6a3b      	ldr	r3, [r7, #32]
 8004728:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800472c:	d037      	beq.n	800479e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800472e:	f7fd f84f 	bl	80017d0 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	6a3a      	ldr	r2, [r7, #32]
 800473a:	429a      	cmp	r2, r3
 800473c:	d302      	bcc.n	8004744 <UART_WaitOnFlagUntilTimeout+0x30>
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d101      	bne.n	8004748 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e03a      	b.n	80047be <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f003 0304 	and.w	r3, r3, #4
 8004752:	2b00      	cmp	r3, #0
 8004754:	d023      	beq.n	800479e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b80      	cmp	r3, #128	@ 0x80
 800475a:	d020      	beq.n	800479e <UART_WaitOnFlagUntilTimeout+0x8a>
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	2b40      	cmp	r3, #64	@ 0x40
 8004760:	d01d      	beq.n	800479e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0308 	and.w	r3, r3, #8
 800476c:	2b08      	cmp	r3, #8
 800476e:	d116      	bne.n	800479e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004770:	2300      	movs	r3, #0
 8004772:	617b      	str	r3, [r7, #20]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	617b      	str	r3, [r7, #20]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	617b      	str	r3, [r7, #20]
 8004784:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 f857 	bl	800483a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2208      	movs	r2, #8
 8004790:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e00f      	b.n	80047be <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	4013      	ands	r3, r2
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	bf0c      	ite	eq
 80047ae:	2301      	moveq	r3, #1
 80047b0:	2300      	movne	r3, #0
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	461a      	mov	r2, r3
 80047b6:	79fb      	ldrb	r3, [r7, #7]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d0b4      	beq.n	8004726 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3718      	adds	r7, #24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b085      	sub	sp, #20
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	60f8      	str	r0, [r7, #12]
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	4613      	mov	r3, r2
 80047d2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	88fa      	ldrh	r2, [r7, #6]
 80047de:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	88fa      	ldrh	r2, [r7, #6]
 80047e4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2222      	movs	r2, #34	@ 0x22
 80047f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d007      	beq.n	800480c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68da      	ldr	r2, [r3, #12]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800480a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	695a      	ldr	r2, [r3, #20]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 0201 	orr.w	r2, r2, #1
 800481a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0220 	orr.w	r2, r2, #32
 800482a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800483a:	b480      	push	{r7}
 800483c:	b095      	sub	sp, #84	@ 0x54
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	330c      	adds	r3, #12
 8004848:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800484c:	e853 3f00 	ldrex	r3, [r3]
 8004850:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004854:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004858:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	330c      	adds	r3, #12
 8004860:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004862:	643a      	str	r2, [r7, #64]	@ 0x40
 8004864:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004866:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004868:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800486a:	e841 2300 	strex	r3, r2, [r1]
 800486e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1e5      	bne.n	8004842 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	3314      	adds	r3, #20
 800487c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	e853 3f00 	ldrex	r3, [r3]
 8004884:	61fb      	str	r3, [r7, #28]
   return(result);
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	f023 0301 	bic.w	r3, r3, #1
 800488c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	3314      	adds	r3, #20
 8004894:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004896:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004898:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800489c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800489e:	e841 2300 	strex	r3, r2, [r1]
 80048a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1e5      	bne.n	8004876 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d119      	bne.n	80048e6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	330c      	adds	r3, #12
 80048b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	e853 3f00 	ldrex	r3, [r3]
 80048c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	f023 0310 	bic.w	r3, r3, #16
 80048c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	330c      	adds	r3, #12
 80048d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048d2:	61ba      	str	r2, [r7, #24]
 80048d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d6:	6979      	ldr	r1, [r7, #20]
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	e841 2300 	strex	r3, r2, [r1]
 80048de:	613b      	str	r3, [r7, #16]
   return(result);
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1e5      	bne.n	80048b2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2220      	movs	r2, #32
 80048ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80048f4:	bf00      	nop
 80048f6:	3754      	adds	r7, #84	@ 0x54
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800490c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f7ff fee4 	bl	80046e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004920:	bf00      	nop
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b21      	cmp	r3, #33	@ 0x21
 800493a:	d13e      	bne.n	80049ba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004944:	d114      	bne.n	8004970 <UART_Transmit_IT+0x48>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d110      	bne.n	8004970 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	461a      	mov	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004962:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	1c9a      	adds	r2, r3, #2
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	621a      	str	r2, [r3, #32]
 800496e:	e008      	b.n	8004982 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	1c59      	adds	r1, r3, #1
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	6211      	str	r1, [r2, #32]
 800497a:	781a      	ldrb	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004986:	b29b      	uxth	r3, r3
 8004988:	3b01      	subs	r3, #1
 800498a:	b29b      	uxth	r3, r3
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	4619      	mov	r1, r3
 8004990:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10f      	bne.n	80049b6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68da      	ldr	r2, [r3, #12]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68da      	ldr	r2, [r3, #12]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049b6:	2300      	movs	r3, #0
 80049b8:	e000      	b.n	80049bc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049ba:	2302      	movs	r3, #2
  }
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3714      	adds	r7, #20
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049de:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2220      	movs	r2, #32
 80049e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7ff fe69 	bl	80046c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b08c      	sub	sp, #48	@ 0x30
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b22      	cmp	r3, #34	@ 0x22
 8004a0a:	f040 80ae 	bne.w	8004b6a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a16:	d117      	bne.n	8004a48 <UART_Receive_IT+0x50>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d113      	bne.n	8004a48 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a20:	2300      	movs	r3, #0
 8004a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a28:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a3a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a40:	1c9a      	adds	r2, r3, #2
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a46:	e026      	b.n	8004a96 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a5a:	d007      	beq.n	8004a6c <UART_Receive_IT+0x74>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10a      	bne.n	8004a7a <UART_Receive_IT+0x82>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d106      	bne.n	8004a7a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a76:	701a      	strb	r2, [r3, #0]
 8004a78:	e008      	b.n	8004a8c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a8a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d15d      	bne.n	8004b66 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68da      	ldr	r2, [r3, #12]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0220 	bic.w	r2, r2, #32
 8004ab8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ac8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	695a      	ldr	r2, [r3, #20]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f022 0201 	bic.w	r2, r2, #1
 8004ad8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2220      	movs	r2, #32
 8004ade:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d135      	bne.n	8004b5c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	330c      	adds	r3, #12
 8004afc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	e853 3f00 	ldrex	r3, [r3]
 8004b04:	613b      	str	r3, [r7, #16]
   return(result);
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	f023 0310 	bic.w	r3, r3, #16
 8004b0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	330c      	adds	r3, #12
 8004b14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b16:	623a      	str	r2, [r7, #32]
 8004b18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1a:	69f9      	ldr	r1, [r7, #28]
 8004b1c:	6a3a      	ldr	r2, [r7, #32]
 8004b1e:	e841 2300 	strex	r3, r2, [r1]
 8004b22:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1e5      	bne.n	8004af6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0310 	and.w	r3, r3, #16
 8004b34:	2b10      	cmp	r3, #16
 8004b36:	d10a      	bne.n	8004b4e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b38:	2300      	movs	r3, #0
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	60fb      	str	r3, [r7, #12]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b52:	4619      	mov	r1, r3
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f7ff fdd1 	bl	80046fc <HAL_UARTEx_RxEventCallback>
 8004b5a:	e002      	b.n	8004b62 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff fdb9 	bl	80046d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b62:	2300      	movs	r3, #0
 8004b64:	e002      	b.n	8004b6c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004b66:	2300      	movs	r3, #0
 8004b68:	e000      	b.n	8004b6c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004b6a:	2302      	movs	r3, #2
  }
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3730      	adds	r7, #48	@ 0x30
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b78:	b0c0      	sub	sp, #256	@ 0x100
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b90:	68d9      	ldr	r1, [r3, #12]
 8004b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	ea40 0301 	orr.w	r3, r0, r1
 8004b9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba2:	689a      	ldr	r2, [r3, #8]
 8004ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	431a      	orrs	r2, r3
 8004bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004bcc:	f021 010c 	bic.w	r1, r1, #12
 8004bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004bda:	430b      	orrs	r3, r1
 8004bdc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bee:	6999      	ldr	r1, [r3, #24]
 8004bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	ea40 0301 	orr.w	r3, r0, r1
 8004bfa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	4b8f      	ldr	r3, [pc, #572]	@ (8004e40 <UART_SetConfig+0x2cc>)
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d005      	beq.n	8004c14 <UART_SetConfig+0xa0>
 8004c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	4b8d      	ldr	r3, [pc, #564]	@ (8004e44 <UART_SetConfig+0x2d0>)
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d104      	bne.n	8004c1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c14:	f7fe face 	bl	80031b4 <HAL_RCC_GetPCLK2Freq>
 8004c18:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c1c:	e003      	b.n	8004c26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c1e:	f7fe fab5 	bl	800318c <HAL_RCC_GetPCLK1Freq>
 8004c22:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c2a:	69db      	ldr	r3, [r3, #28]
 8004c2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c30:	f040 810c 	bne.w	8004e4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c3e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c46:	4622      	mov	r2, r4
 8004c48:	462b      	mov	r3, r5
 8004c4a:	1891      	adds	r1, r2, r2
 8004c4c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c4e:	415b      	adcs	r3, r3
 8004c50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c56:	4621      	mov	r1, r4
 8004c58:	eb12 0801 	adds.w	r8, r2, r1
 8004c5c:	4629      	mov	r1, r5
 8004c5e:	eb43 0901 	adc.w	r9, r3, r1
 8004c62:	f04f 0200 	mov.w	r2, #0
 8004c66:	f04f 0300 	mov.w	r3, #0
 8004c6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c76:	4690      	mov	r8, r2
 8004c78:	4699      	mov	r9, r3
 8004c7a:	4623      	mov	r3, r4
 8004c7c:	eb18 0303 	adds.w	r3, r8, r3
 8004c80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c84:	462b      	mov	r3, r5
 8004c86:	eb49 0303 	adc.w	r3, r9, r3
 8004c8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c9a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	18db      	adds	r3, r3, r3
 8004ca6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ca8:	4613      	mov	r3, r2
 8004caa:	eb42 0303 	adc.w	r3, r2, r3
 8004cae:	657b      	str	r3, [r7, #84]	@ 0x54
 8004cb0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004cb4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004cb8:	f7fb ff44 	bl	8000b44 <__aeabi_uldivmod>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	4b61      	ldr	r3, [pc, #388]	@ (8004e48 <UART_SetConfig+0x2d4>)
 8004cc2:	fba3 2302 	umull	r2, r3, r3, r2
 8004cc6:	095b      	lsrs	r3, r3, #5
 8004cc8:	011c      	lsls	r4, r3, #4
 8004cca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004cd4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004cd8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004cdc:	4642      	mov	r2, r8
 8004cde:	464b      	mov	r3, r9
 8004ce0:	1891      	adds	r1, r2, r2
 8004ce2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004ce4:	415b      	adcs	r3, r3
 8004ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ce8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004cec:	4641      	mov	r1, r8
 8004cee:	eb12 0a01 	adds.w	sl, r2, r1
 8004cf2:	4649      	mov	r1, r9
 8004cf4:	eb43 0b01 	adc.w	fp, r3, r1
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	f04f 0300 	mov.w	r3, #0
 8004d00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d0c:	4692      	mov	sl, r2
 8004d0e:	469b      	mov	fp, r3
 8004d10:	4643      	mov	r3, r8
 8004d12:	eb1a 0303 	adds.w	r3, sl, r3
 8004d16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d1a:	464b      	mov	r3, r9
 8004d1c:	eb4b 0303 	adc.w	r3, fp, r3
 8004d20:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d30:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	18db      	adds	r3, r3, r3
 8004d3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d3e:	4613      	mov	r3, r2
 8004d40:	eb42 0303 	adc.w	r3, r2, r3
 8004d44:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d4e:	f7fb fef9 	bl	8000b44 <__aeabi_uldivmod>
 8004d52:	4602      	mov	r2, r0
 8004d54:	460b      	mov	r3, r1
 8004d56:	4611      	mov	r1, r2
 8004d58:	4b3b      	ldr	r3, [pc, #236]	@ (8004e48 <UART_SetConfig+0x2d4>)
 8004d5a:	fba3 2301 	umull	r2, r3, r3, r1
 8004d5e:	095b      	lsrs	r3, r3, #5
 8004d60:	2264      	movs	r2, #100	@ 0x64
 8004d62:	fb02 f303 	mul.w	r3, r2, r3
 8004d66:	1acb      	subs	r3, r1, r3
 8004d68:	00db      	lsls	r3, r3, #3
 8004d6a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d6e:	4b36      	ldr	r3, [pc, #216]	@ (8004e48 <UART_SetConfig+0x2d4>)
 8004d70:	fba3 2302 	umull	r2, r3, r3, r2
 8004d74:	095b      	lsrs	r3, r3, #5
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d7c:	441c      	add	r4, r3
 8004d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d82:	2200      	movs	r2, #0
 8004d84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d88:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d90:	4642      	mov	r2, r8
 8004d92:	464b      	mov	r3, r9
 8004d94:	1891      	adds	r1, r2, r2
 8004d96:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d98:	415b      	adcs	r3, r3
 8004d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004da0:	4641      	mov	r1, r8
 8004da2:	1851      	adds	r1, r2, r1
 8004da4:	6339      	str	r1, [r7, #48]	@ 0x30
 8004da6:	4649      	mov	r1, r9
 8004da8:	414b      	adcs	r3, r1
 8004daa:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dac:	f04f 0200 	mov.w	r2, #0
 8004db0:	f04f 0300 	mov.w	r3, #0
 8004db4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004db8:	4659      	mov	r1, fp
 8004dba:	00cb      	lsls	r3, r1, #3
 8004dbc:	4651      	mov	r1, sl
 8004dbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dc2:	4651      	mov	r1, sl
 8004dc4:	00ca      	lsls	r2, r1, #3
 8004dc6:	4610      	mov	r0, r2
 8004dc8:	4619      	mov	r1, r3
 8004dca:	4603      	mov	r3, r0
 8004dcc:	4642      	mov	r2, r8
 8004dce:	189b      	adds	r3, r3, r2
 8004dd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004dd4:	464b      	mov	r3, r9
 8004dd6:	460a      	mov	r2, r1
 8004dd8:	eb42 0303 	adc.w	r3, r2, r3
 8004ddc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004dec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004df0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004df4:	460b      	mov	r3, r1
 8004df6:	18db      	adds	r3, r3, r3
 8004df8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	eb42 0303 	adc.w	r3, r2, r3
 8004e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004e0a:	f7fb fe9b 	bl	8000b44 <__aeabi_uldivmod>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	460b      	mov	r3, r1
 8004e12:	4b0d      	ldr	r3, [pc, #52]	@ (8004e48 <UART_SetConfig+0x2d4>)
 8004e14:	fba3 1302 	umull	r1, r3, r3, r2
 8004e18:	095b      	lsrs	r3, r3, #5
 8004e1a:	2164      	movs	r1, #100	@ 0x64
 8004e1c:	fb01 f303 	mul.w	r3, r1, r3
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	3332      	adds	r3, #50	@ 0x32
 8004e26:	4a08      	ldr	r2, [pc, #32]	@ (8004e48 <UART_SetConfig+0x2d4>)
 8004e28:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2c:	095b      	lsrs	r3, r3, #5
 8004e2e:	f003 0207 	and.w	r2, r3, #7
 8004e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4422      	add	r2, r4
 8004e3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e3c:	e106      	b.n	800504c <UART_SetConfig+0x4d8>
 8004e3e:	bf00      	nop
 8004e40:	40011000 	.word	0x40011000
 8004e44:	40011400 	.word	0x40011400
 8004e48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e50:	2200      	movs	r2, #0
 8004e52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e56:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e5e:	4642      	mov	r2, r8
 8004e60:	464b      	mov	r3, r9
 8004e62:	1891      	adds	r1, r2, r2
 8004e64:	6239      	str	r1, [r7, #32]
 8004e66:	415b      	adcs	r3, r3
 8004e68:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e6e:	4641      	mov	r1, r8
 8004e70:	1854      	adds	r4, r2, r1
 8004e72:	4649      	mov	r1, r9
 8004e74:	eb43 0501 	adc.w	r5, r3, r1
 8004e78:	f04f 0200 	mov.w	r2, #0
 8004e7c:	f04f 0300 	mov.w	r3, #0
 8004e80:	00eb      	lsls	r3, r5, #3
 8004e82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e86:	00e2      	lsls	r2, r4, #3
 8004e88:	4614      	mov	r4, r2
 8004e8a:	461d      	mov	r5, r3
 8004e8c:	4643      	mov	r3, r8
 8004e8e:	18e3      	adds	r3, r4, r3
 8004e90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e94:	464b      	mov	r3, r9
 8004e96:	eb45 0303 	adc.w	r3, r5, r3
 8004e9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004eaa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004eae:	f04f 0200 	mov.w	r2, #0
 8004eb2:	f04f 0300 	mov.w	r3, #0
 8004eb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004eba:	4629      	mov	r1, r5
 8004ebc:	008b      	lsls	r3, r1, #2
 8004ebe:	4621      	mov	r1, r4
 8004ec0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ec4:	4621      	mov	r1, r4
 8004ec6:	008a      	lsls	r2, r1, #2
 8004ec8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004ecc:	f7fb fe3a 	bl	8000b44 <__aeabi_uldivmod>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4b60      	ldr	r3, [pc, #384]	@ (8005058 <UART_SetConfig+0x4e4>)
 8004ed6:	fba3 2302 	umull	r2, r3, r3, r2
 8004eda:	095b      	lsrs	r3, r3, #5
 8004edc:	011c      	lsls	r4, r3, #4
 8004ede:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ee8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004eec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ef0:	4642      	mov	r2, r8
 8004ef2:	464b      	mov	r3, r9
 8004ef4:	1891      	adds	r1, r2, r2
 8004ef6:	61b9      	str	r1, [r7, #24]
 8004ef8:	415b      	adcs	r3, r3
 8004efa:	61fb      	str	r3, [r7, #28]
 8004efc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f00:	4641      	mov	r1, r8
 8004f02:	1851      	adds	r1, r2, r1
 8004f04:	6139      	str	r1, [r7, #16]
 8004f06:	4649      	mov	r1, r9
 8004f08:	414b      	adcs	r3, r1
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	f04f 0200 	mov.w	r2, #0
 8004f10:	f04f 0300 	mov.w	r3, #0
 8004f14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f18:	4659      	mov	r1, fp
 8004f1a:	00cb      	lsls	r3, r1, #3
 8004f1c:	4651      	mov	r1, sl
 8004f1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f22:	4651      	mov	r1, sl
 8004f24:	00ca      	lsls	r2, r1, #3
 8004f26:	4610      	mov	r0, r2
 8004f28:	4619      	mov	r1, r3
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	4642      	mov	r2, r8
 8004f2e:	189b      	adds	r3, r3, r2
 8004f30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f34:	464b      	mov	r3, r9
 8004f36:	460a      	mov	r2, r1
 8004f38:	eb42 0303 	adc.w	r3, r2, r3
 8004f3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f4c:	f04f 0200 	mov.w	r2, #0
 8004f50:	f04f 0300 	mov.w	r3, #0
 8004f54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f58:	4649      	mov	r1, r9
 8004f5a:	008b      	lsls	r3, r1, #2
 8004f5c:	4641      	mov	r1, r8
 8004f5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f62:	4641      	mov	r1, r8
 8004f64:	008a      	lsls	r2, r1, #2
 8004f66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f6a:	f7fb fdeb 	bl	8000b44 <__aeabi_uldivmod>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	460b      	mov	r3, r1
 8004f72:	4611      	mov	r1, r2
 8004f74:	4b38      	ldr	r3, [pc, #224]	@ (8005058 <UART_SetConfig+0x4e4>)
 8004f76:	fba3 2301 	umull	r2, r3, r3, r1
 8004f7a:	095b      	lsrs	r3, r3, #5
 8004f7c:	2264      	movs	r2, #100	@ 0x64
 8004f7e:	fb02 f303 	mul.w	r3, r2, r3
 8004f82:	1acb      	subs	r3, r1, r3
 8004f84:	011b      	lsls	r3, r3, #4
 8004f86:	3332      	adds	r3, #50	@ 0x32
 8004f88:	4a33      	ldr	r2, [pc, #204]	@ (8005058 <UART_SetConfig+0x4e4>)
 8004f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8e:	095b      	lsrs	r3, r3, #5
 8004f90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f94:	441c      	add	r4, r3
 8004f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f9e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004fa0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004fa4:	4642      	mov	r2, r8
 8004fa6:	464b      	mov	r3, r9
 8004fa8:	1891      	adds	r1, r2, r2
 8004faa:	60b9      	str	r1, [r7, #8]
 8004fac:	415b      	adcs	r3, r3
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fb4:	4641      	mov	r1, r8
 8004fb6:	1851      	adds	r1, r2, r1
 8004fb8:	6039      	str	r1, [r7, #0]
 8004fba:	4649      	mov	r1, r9
 8004fbc:	414b      	adcs	r3, r1
 8004fbe:	607b      	str	r3, [r7, #4]
 8004fc0:	f04f 0200 	mov.w	r2, #0
 8004fc4:	f04f 0300 	mov.w	r3, #0
 8004fc8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fcc:	4659      	mov	r1, fp
 8004fce:	00cb      	lsls	r3, r1, #3
 8004fd0:	4651      	mov	r1, sl
 8004fd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fd6:	4651      	mov	r1, sl
 8004fd8:	00ca      	lsls	r2, r1, #3
 8004fda:	4610      	mov	r0, r2
 8004fdc:	4619      	mov	r1, r3
 8004fde:	4603      	mov	r3, r0
 8004fe0:	4642      	mov	r2, r8
 8004fe2:	189b      	adds	r3, r3, r2
 8004fe4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fe6:	464b      	mov	r3, r9
 8004fe8:	460a      	mov	r2, r1
 8004fea:	eb42 0303 	adc.w	r3, r2, r3
 8004fee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ffa:	667a      	str	r2, [r7, #100]	@ 0x64
 8004ffc:	f04f 0200 	mov.w	r2, #0
 8005000:	f04f 0300 	mov.w	r3, #0
 8005004:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005008:	4649      	mov	r1, r9
 800500a:	008b      	lsls	r3, r1, #2
 800500c:	4641      	mov	r1, r8
 800500e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005012:	4641      	mov	r1, r8
 8005014:	008a      	lsls	r2, r1, #2
 8005016:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800501a:	f7fb fd93 	bl	8000b44 <__aeabi_uldivmod>
 800501e:	4602      	mov	r2, r0
 8005020:	460b      	mov	r3, r1
 8005022:	4b0d      	ldr	r3, [pc, #52]	@ (8005058 <UART_SetConfig+0x4e4>)
 8005024:	fba3 1302 	umull	r1, r3, r3, r2
 8005028:	095b      	lsrs	r3, r3, #5
 800502a:	2164      	movs	r1, #100	@ 0x64
 800502c:	fb01 f303 	mul.w	r3, r1, r3
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	011b      	lsls	r3, r3, #4
 8005034:	3332      	adds	r3, #50	@ 0x32
 8005036:	4a08      	ldr	r2, [pc, #32]	@ (8005058 <UART_SetConfig+0x4e4>)
 8005038:	fba2 2303 	umull	r2, r3, r2, r3
 800503c:	095b      	lsrs	r3, r3, #5
 800503e:	f003 020f 	and.w	r2, r3, #15
 8005042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4422      	add	r2, r4
 800504a:	609a      	str	r2, [r3, #8]
}
 800504c:	bf00      	nop
 800504e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005052:	46bd      	mov	sp, r7
 8005054:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005058:	51eb851f 	.word	0x51eb851f

0800505c <memset>:
 800505c:	4402      	add	r2, r0
 800505e:	4603      	mov	r3, r0
 8005060:	4293      	cmp	r3, r2
 8005062:	d100      	bne.n	8005066 <memset+0xa>
 8005064:	4770      	bx	lr
 8005066:	f803 1b01 	strb.w	r1, [r3], #1
 800506a:	e7f9      	b.n	8005060 <memset+0x4>

0800506c <__libc_init_array>:
 800506c:	b570      	push	{r4, r5, r6, lr}
 800506e:	4d0d      	ldr	r5, [pc, #52]	@ (80050a4 <__libc_init_array+0x38>)
 8005070:	4c0d      	ldr	r4, [pc, #52]	@ (80050a8 <__libc_init_array+0x3c>)
 8005072:	1b64      	subs	r4, r4, r5
 8005074:	10a4      	asrs	r4, r4, #2
 8005076:	2600      	movs	r6, #0
 8005078:	42a6      	cmp	r6, r4
 800507a:	d109      	bne.n	8005090 <__libc_init_array+0x24>
 800507c:	4d0b      	ldr	r5, [pc, #44]	@ (80050ac <__libc_init_array+0x40>)
 800507e:	4c0c      	ldr	r4, [pc, #48]	@ (80050b0 <__libc_init_array+0x44>)
 8005080:	f001 f84a 	bl	8006118 <_init>
 8005084:	1b64      	subs	r4, r4, r5
 8005086:	10a4      	asrs	r4, r4, #2
 8005088:	2600      	movs	r6, #0
 800508a:	42a6      	cmp	r6, r4
 800508c:	d105      	bne.n	800509a <__libc_init_array+0x2e>
 800508e:	bd70      	pop	{r4, r5, r6, pc}
 8005090:	f855 3b04 	ldr.w	r3, [r5], #4
 8005094:	4798      	blx	r3
 8005096:	3601      	adds	r6, #1
 8005098:	e7ee      	b.n	8005078 <__libc_init_array+0xc>
 800509a:	f855 3b04 	ldr.w	r3, [r5], #4
 800509e:	4798      	blx	r3
 80050a0:	3601      	adds	r6, #1
 80050a2:	e7f2      	b.n	800508a <__libc_init_array+0x1e>
 80050a4:	08006330 	.word	0x08006330
 80050a8:	08006330 	.word	0x08006330
 80050ac:	08006330 	.word	0x08006330
 80050b0:	08006334 	.word	0x08006334
 80050b4:	00000000 	.word	0x00000000

080050b8 <sin>:
 80050b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80050ba:	ec53 2b10 	vmov	r2, r3, d0
 80050be:	4826      	ldr	r0, [pc, #152]	@ (8005158 <sin+0xa0>)
 80050c0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80050c4:	4281      	cmp	r1, r0
 80050c6:	d807      	bhi.n	80050d8 <sin+0x20>
 80050c8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8005150 <sin+0x98>
 80050cc:	2000      	movs	r0, #0
 80050ce:	b005      	add	sp, #20
 80050d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80050d4:	f000 be60 	b.w	8005d98 <__kernel_sin>
 80050d8:	4820      	ldr	r0, [pc, #128]	@ (800515c <sin+0xa4>)
 80050da:	4281      	cmp	r1, r0
 80050dc:	d908      	bls.n	80050f0 <sin+0x38>
 80050de:	4610      	mov	r0, r2
 80050e0:	4619      	mov	r1, r3
 80050e2:	f7fb f895 	bl	8000210 <__aeabi_dsub>
 80050e6:	ec41 0b10 	vmov	d0, r0, r1
 80050ea:	b005      	add	sp, #20
 80050ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80050f0:	4668      	mov	r0, sp
 80050f2:	f000 f835 	bl	8005160 <__ieee754_rem_pio2>
 80050f6:	f000 0003 	and.w	r0, r0, #3
 80050fa:	2801      	cmp	r0, #1
 80050fc:	d00c      	beq.n	8005118 <sin+0x60>
 80050fe:	2802      	cmp	r0, #2
 8005100:	d011      	beq.n	8005126 <sin+0x6e>
 8005102:	b9e8      	cbnz	r0, 8005140 <sin+0x88>
 8005104:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005108:	ed9d 0b00 	vldr	d0, [sp]
 800510c:	2001      	movs	r0, #1
 800510e:	f000 fe43 	bl	8005d98 <__kernel_sin>
 8005112:	ec51 0b10 	vmov	r0, r1, d0
 8005116:	e7e6      	b.n	80050e6 <sin+0x2e>
 8005118:	ed9d 1b02 	vldr	d1, [sp, #8]
 800511c:	ed9d 0b00 	vldr	d0, [sp]
 8005120:	f000 fd72 	bl	8005c08 <__kernel_cos>
 8005124:	e7f5      	b.n	8005112 <sin+0x5a>
 8005126:	ed9d 1b02 	vldr	d1, [sp, #8]
 800512a:	ed9d 0b00 	vldr	d0, [sp]
 800512e:	2001      	movs	r0, #1
 8005130:	f000 fe32 	bl	8005d98 <__kernel_sin>
 8005134:	ec53 2b10 	vmov	r2, r3, d0
 8005138:	4610      	mov	r0, r2
 800513a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800513e:	e7d2      	b.n	80050e6 <sin+0x2e>
 8005140:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005144:	ed9d 0b00 	vldr	d0, [sp]
 8005148:	f000 fd5e 	bl	8005c08 <__kernel_cos>
 800514c:	e7f2      	b.n	8005134 <sin+0x7c>
 800514e:	bf00      	nop
	...
 8005158:	3fe921fb 	.word	0x3fe921fb
 800515c:	7fefffff 	.word	0x7fefffff

08005160 <__ieee754_rem_pio2>:
 8005160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005164:	ec57 6b10 	vmov	r6, r7, d0
 8005168:	4bc5      	ldr	r3, [pc, #788]	@ (8005480 <__ieee754_rem_pio2+0x320>)
 800516a:	b08d      	sub	sp, #52	@ 0x34
 800516c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005170:	4598      	cmp	r8, r3
 8005172:	4604      	mov	r4, r0
 8005174:	9704      	str	r7, [sp, #16]
 8005176:	d807      	bhi.n	8005188 <__ieee754_rem_pio2+0x28>
 8005178:	2200      	movs	r2, #0
 800517a:	2300      	movs	r3, #0
 800517c:	ed80 0b00 	vstr	d0, [r0]
 8005180:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005184:	2500      	movs	r5, #0
 8005186:	e028      	b.n	80051da <__ieee754_rem_pio2+0x7a>
 8005188:	4bbe      	ldr	r3, [pc, #760]	@ (8005484 <__ieee754_rem_pio2+0x324>)
 800518a:	4598      	cmp	r8, r3
 800518c:	d878      	bhi.n	8005280 <__ieee754_rem_pio2+0x120>
 800518e:	9b04      	ldr	r3, [sp, #16]
 8005190:	4dbd      	ldr	r5, [pc, #756]	@ (8005488 <__ieee754_rem_pio2+0x328>)
 8005192:	2b00      	cmp	r3, #0
 8005194:	4630      	mov	r0, r6
 8005196:	a3ac      	add	r3, pc, #688	@ (adr r3, 8005448 <__ieee754_rem_pio2+0x2e8>)
 8005198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519c:	4639      	mov	r1, r7
 800519e:	dd38      	ble.n	8005212 <__ieee754_rem_pio2+0xb2>
 80051a0:	f7fb f836 	bl	8000210 <__aeabi_dsub>
 80051a4:	45a8      	cmp	r8, r5
 80051a6:	4606      	mov	r6, r0
 80051a8:	460f      	mov	r7, r1
 80051aa:	d01a      	beq.n	80051e2 <__ieee754_rem_pio2+0x82>
 80051ac:	a3a8      	add	r3, pc, #672	@ (adr r3, 8005450 <__ieee754_rem_pio2+0x2f0>)
 80051ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b2:	f7fb f82d 	bl	8000210 <__aeabi_dsub>
 80051b6:	4602      	mov	r2, r0
 80051b8:	460b      	mov	r3, r1
 80051ba:	4680      	mov	r8, r0
 80051bc:	4689      	mov	r9, r1
 80051be:	4630      	mov	r0, r6
 80051c0:	4639      	mov	r1, r7
 80051c2:	f7fb f825 	bl	8000210 <__aeabi_dsub>
 80051c6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8005450 <__ieee754_rem_pio2+0x2f0>)
 80051c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051cc:	f7fb f820 	bl	8000210 <__aeabi_dsub>
 80051d0:	e9c4 8900 	strd	r8, r9, [r4]
 80051d4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80051d8:	2501      	movs	r5, #1
 80051da:	4628      	mov	r0, r5
 80051dc:	b00d      	add	sp, #52	@ 0x34
 80051de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051e2:	a39d      	add	r3, pc, #628	@ (adr r3, 8005458 <__ieee754_rem_pio2+0x2f8>)
 80051e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e8:	f7fb f812 	bl	8000210 <__aeabi_dsub>
 80051ec:	a39c      	add	r3, pc, #624	@ (adr r3, 8005460 <__ieee754_rem_pio2+0x300>)
 80051ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f2:	4606      	mov	r6, r0
 80051f4:	460f      	mov	r7, r1
 80051f6:	f7fb f80b 	bl	8000210 <__aeabi_dsub>
 80051fa:	4602      	mov	r2, r0
 80051fc:	460b      	mov	r3, r1
 80051fe:	4680      	mov	r8, r0
 8005200:	4689      	mov	r9, r1
 8005202:	4630      	mov	r0, r6
 8005204:	4639      	mov	r1, r7
 8005206:	f7fb f803 	bl	8000210 <__aeabi_dsub>
 800520a:	a395      	add	r3, pc, #596	@ (adr r3, 8005460 <__ieee754_rem_pio2+0x300>)
 800520c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005210:	e7dc      	b.n	80051cc <__ieee754_rem_pio2+0x6c>
 8005212:	f7fa ffff 	bl	8000214 <__adddf3>
 8005216:	45a8      	cmp	r8, r5
 8005218:	4606      	mov	r6, r0
 800521a:	460f      	mov	r7, r1
 800521c:	d018      	beq.n	8005250 <__ieee754_rem_pio2+0xf0>
 800521e:	a38c      	add	r3, pc, #560	@ (adr r3, 8005450 <__ieee754_rem_pio2+0x2f0>)
 8005220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005224:	f7fa fff6 	bl	8000214 <__adddf3>
 8005228:	4602      	mov	r2, r0
 800522a:	460b      	mov	r3, r1
 800522c:	4680      	mov	r8, r0
 800522e:	4689      	mov	r9, r1
 8005230:	4630      	mov	r0, r6
 8005232:	4639      	mov	r1, r7
 8005234:	f7fa ffec 	bl	8000210 <__aeabi_dsub>
 8005238:	a385      	add	r3, pc, #532	@ (adr r3, 8005450 <__ieee754_rem_pio2+0x2f0>)
 800523a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523e:	f7fa ffe9 	bl	8000214 <__adddf3>
 8005242:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005246:	e9c4 8900 	strd	r8, r9, [r4]
 800524a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800524e:	e7c4      	b.n	80051da <__ieee754_rem_pio2+0x7a>
 8005250:	a381      	add	r3, pc, #516	@ (adr r3, 8005458 <__ieee754_rem_pio2+0x2f8>)
 8005252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005256:	f7fa ffdd 	bl	8000214 <__adddf3>
 800525a:	a381      	add	r3, pc, #516	@ (adr r3, 8005460 <__ieee754_rem_pio2+0x300>)
 800525c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005260:	4606      	mov	r6, r0
 8005262:	460f      	mov	r7, r1
 8005264:	f7fa ffd6 	bl	8000214 <__adddf3>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	4680      	mov	r8, r0
 800526e:	4689      	mov	r9, r1
 8005270:	4630      	mov	r0, r6
 8005272:	4639      	mov	r1, r7
 8005274:	f7fa ffcc 	bl	8000210 <__aeabi_dsub>
 8005278:	a379      	add	r3, pc, #484	@ (adr r3, 8005460 <__ieee754_rem_pio2+0x300>)
 800527a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527e:	e7de      	b.n	800523e <__ieee754_rem_pio2+0xde>
 8005280:	4b82      	ldr	r3, [pc, #520]	@ (800548c <__ieee754_rem_pio2+0x32c>)
 8005282:	4598      	cmp	r8, r3
 8005284:	f200 80d1 	bhi.w	800542a <__ieee754_rem_pio2+0x2ca>
 8005288:	f000 fe40 	bl	8005f0c <fabs>
 800528c:	ec57 6b10 	vmov	r6, r7, d0
 8005290:	a375      	add	r3, pc, #468	@ (adr r3, 8005468 <__ieee754_rem_pio2+0x308>)
 8005292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005296:	4630      	mov	r0, r6
 8005298:	4639      	mov	r1, r7
 800529a:	f7fb f971 	bl	8000580 <__aeabi_dmul>
 800529e:	4b7c      	ldr	r3, [pc, #496]	@ (8005490 <__ieee754_rem_pio2+0x330>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	f7fa ffb7 	bl	8000214 <__adddf3>
 80052a6:	f7fb fc05 	bl	8000ab4 <__aeabi_d2iz>
 80052aa:	4605      	mov	r5, r0
 80052ac:	f7fb f8fe 	bl	80004ac <__aeabi_i2d>
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80052b8:	a363      	add	r3, pc, #396	@ (adr r3, 8005448 <__ieee754_rem_pio2+0x2e8>)
 80052ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052be:	f7fb f95f 	bl	8000580 <__aeabi_dmul>
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	4630      	mov	r0, r6
 80052c8:	4639      	mov	r1, r7
 80052ca:	f7fa ffa1 	bl	8000210 <__aeabi_dsub>
 80052ce:	a360      	add	r3, pc, #384	@ (adr r3, 8005450 <__ieee754_rem_pio2+0x2f0>)
 80052d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d4:	4682      	mov	sl, r0
 80052d6:	468b      	mov	fp, r1
 80052d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052dc:	f7fb f950 	bl	8000580 <__aeabi_dmul>
 80052e0:	2d1f      	cmp	r5, #31
 80052e2:	4606      	mov	r6, r0
 80052e4:	460f      	mov	r7, r1
 80052e6:	dc0c      	bgt.n	8005302 <__ieee754_rem_pio2+0x1a2>
 80052e8:	4b6a      	ldr	r3, [pc, #424]	@ (8005494 <__ieee754_rem_pio2+0x334>)
 80052ea:	1e6a      	subs	r2, r5, #1
 80052ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052f0:	4543      	cmp	r3, r8
 80052f2:	d006      	beq.n	8005302 <__ieee754_rem_pio2+0x1a2>
 80052f4:	4632      	mov	r2, r6
 80052f6:	463b      	mov	r3, r7
 80052f8:	4650      	mov	r0, sl
 80052fa:	4659      	mov	r1, fp
 80052fc:	f7fa ff88 	bl	8000210 <__aeabi_dsub>
 8005300:	e00e      	b.n	8005320 <__ieee754_rem_pio2+0x1c0>
 8005302:	463b      	mov	r3, r7
 8005304:	4632      	mov	r2, r6
 8005306:	4650      	mov	r0, sl
 8005308:	4659      	mov	r1, fp
 800530a:	f7fa ff81 	bl	8000210 <__aeabi_dsub>
 800530e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005312:	9305      	str	r3, [sp, #20]
 8005314:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005318:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800531c:	2b10      	cmp	r3, #16
 800531e:	dc02      	bgt.n	8005326 <__ieee754_rem_pio2+0x1c6>
 8005320:	e9c4 0100 	strd	r0, r1, [r4]
 8005324:	e039      	b.n	800539a <__ieee754_rem_pio2+0x23a>
 8005326:	a34c      	add	r3, pc, #304	@ (adr r3, 8005458 <__ieee754_rem_pio2+0x2f8>)
 8005328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005330:	f7fb f926 	bl	8000580 <__aeabi_dmul>
 8005334:	4606      	mov	r6, r0
 8005336:	460f      	mov	r7, r1
 8005338:	4602      	mov	r2, r0
 800533a:	460b      	mov	r3, r1
 800533c:	4650      	mov	r0, sl
 800533e:	4659      	mov	r1, fp
 8005340:	f7fa ff66 	bl	8000210 <__aeabi_dsub>
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	4680      	mov	r8, r0
 800534a:	4689      	mov	r9, r1
 800534c:	4650      	mov	r0, sl
 800534e:	4659      	mov	r1, fp
 8005350:	f7fa ff5e 	bl	8000210 <__aeabi_dsub>
 8005354:	4632      	mov	r2, r6
 8005356:	463b      	mov	r3, r7
 8005358:	f7fa ff5a 	bl	8000210 <__aeabi_dsub>
 800535c:	a340      	add	r3, pc, #256	@ (adr r3, 8005460 <__ieee754_rem_pio2+0x300>)
 800535e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005362:	4606      	mov	r6, r0
 8005364:	460f      	mov	r7, r1
 8005366:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800536a:	f7fb f909 	bl	8000580 <__aeabi_dmul>
 800536e:	4632      	mov	r2, r6
 8005370:	463b      	mov	r3, r7
 8005372:	f7fa ff4d 	bl	8000210 <__aeabi_dsub>
 8005376:	4602      	mov	r2, r0
 8005378:	460b      	mov	r3, r1
 800537a:	4606      	mov	r6, r0
 800537c:	460f      	mov	r7, r1
 800537e:	4640      	mov	r0, r8
 8005380:	4649      	mov	r1, r9
 8005382:	f7fa ff45 	bl	8000210 <__aeabi_dsub>
 8005386:	9a05      	ldr	r2, [sp, #20]
 8005388:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b31      	cmp	r3, #49	@ 0x31
 8005390:	dc20      	bgt.n	80053d4 <__ieee754_rem_pio2+0x274>
 8005392:	e9c4 0100 	strd	r0, r1, [r4]
 8005396:	46c2      	mov	sl, r8
 8005398:	46cb      	mov	fp, r9
 800539a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800539e:	4650      	mov	r0, sl
 80053a0:	4642      	mov	r2, r8
 80053a2:	464b      	mov	r3, r9
 80053a4:	4659      	mov	r1, fp
 80053a6:	f7fa ff33 	bl	8000210 <__aeabi_dsub>
 80053aa:	463b      	mov	r3, r7
 80053ac:	4632      	mov	r2, r6
 80053ae:	f7fa ff2f 	bl	8000210 <__aeabi_dsub>
 80053b2:	9b04      	ldr	r3, [sp, #16]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80053ba:	f6bf af0e 	bge.w	80051da <__ieee754_rem_pio2+0x7a>
 80053be:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80053c2:	6063      	str	r3, [r4, #4]
 80053c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80053c8:	f8c4 8000 	str.w	r8, [r4]
 80053cc:	60a0      	str	r0, [r4, #8]
 80053ce:	60e3      	str	r3, [r4, #12]
 80053d0:	426d      	negs	r5, r5
 80053d2:	e702      	b.n	80051da <__ieee754_rem_pio2+0x7a>
 80053d4:	a326      	add	r3, pc, #152	@ (adr r3, 8005470 <__ieee754_rem_pio2+0x310>)
 80053d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053de:	f7fb f8cf 	bl	8000580 <__aeabi_dmul>
 80053e2:	4606      	mov	r6, r0
 80053e4:	460f      	mov	r7, r1
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	4640      	mov	r0, r8
 80053ec:	4649      	mov	r1, r9
 80053ee:	f7fa ff0f 	bl	8000210 <__aeabi_dsub>
 80053f2:	4602      	mov	r2, r0
 80053f4:	460b      	mov	r3, r1
 80053f6:	4682      	mov	sl, r0
 80053f8:	468b      	mov	fp, r1
 80053fa:	4640      	mov	r0, r8
 80053fc:	4649      	mov	r1, r9
 80053fe:	f7fa ff07 	bl	8000210 <__aeabi_dsub>
 8005402:	4632      	mov	r2, r6
 8005404:	463b      	mov	r3, r7
 8005406:	f7fa ff03 	bl	8000210 <__aeabi_dsub>
 800540a:	a31b      	add	r3, pc, #108	@ (adr r3, 8005478 <__ieee754_rem_pio2+0x318>)
 800540c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005410:	4606      	mov	r6, r0
 8005412:	460f      	mov	r7, r1
 8005414:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005418:	f7fb f8b2 	bl	8000580 <__aeabi_dmul>
 800541c:	4632      	mov	r2, r6
 800541e:	463b      	mov	r3, r7
 8005420:	f7fa fef6 	bl	8000210 <__aeabi_dsub>
 8005424:	4606      	mov	r6, r0
 8005426:	460f      	mov	r7, r1
 8005428:	e764      	b.n	80052f4 <__ieee754_rem_pio2+0x194>
 800542a:	4b1b      	ldr	r3, [pc, #108]	@ (8005498 <__ieee754_rem_pio2+0x338>)
 800542c:	4598      	cmp	r8, r3
 800542e:	d935      	bls.n	800549c <__ieee754_rem_pio2+0x33c>
 8005430:	4632      	mov	r2, r6
 8005432:	463b      	mov	r3, r7
 8005434:	4630      	mov	r0, r6
 8005436:	4639      	mov	r1, r7
 8005438:	f7fa feea 	bl	8000210 <__aeabi_dsub>
 800543c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005440:	e9c4 0100 	strd	r0, r1, [r4]
 8005444:	e69e      	b.n	8005184 <__ieee754_rem_pio2+0x24>
 8005446:	bf00      	nop
 8005448:	54400000 	.word	0x54400000
 800544c:	3ff921fb 	.word	0x3ff921fb
 8005450:	1a626331 	.word	0x1a626331
 8005454:	3dd0b461 	.word	0x3dd0b461
 8005458:	1a600000 	.word	0x1a600000
 800545c:	3dd0b461 	.word	0x3dd0b461
 8005460:	2e037073 	.word	0x2e037073
 8005464:	3ba3198a 	.word	0x3ba3198a
 8005468:	6dc9c883 	.word	0x6dc9c883
 800546c:	3fe45f30 	.word	0x3fe45f30
 8005470:	2e000000 	.word	0x2e000000
 8005474:	3ba3198a 	.word	0x3ba3198a
 8005478:	252049c1 	.word	0x252049c1
 800547c:	397b839a 	.word	0x397b839a
 8005480:	3fe921fb 	.word	0x3fe921fb
 8005484:	4002d97b 	.word	0x4002d97b
 8005488:	3ff921fb 	.word	0x3ff921fb
 800548c:	413921fb 	.word	0x413921fb
 8005490:	3fe00000 	.word	0x3fe00000
 8005494:	08006150 	.word	0x08006150
 8005498:	7fefffff 	.word	0x7fefffff
 800549c:	ea4f 5528 	mov.w	r5, r8, asr #20
 80054a0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80054a4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80054a8:	4630      	mov	r0, r6
 80054aa:	460f      	mov	r7, r1
 80054ac:	f7fb fb02 	bl	8000ab4 <__aeabi_d2iz>
 80054b0:	f7fa fffc 	bl	80004ac <__aeabi_i2d>
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	4630      	mov	r0, r6
 80054ba:	4639      	mov	r1, r7
 80054bc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80054c0:	f7fa fea6 	bl	8000210 <__aeabi_dsub>
 80054c4:	4b22      	ldr	r3, [pc, #136]	@ (8005550 <__ieee754_rem_pio2+0x3f0>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	f7fb f85a 	bl	8000580 <__aeabi_dmul>
 80054cc:	460f      	mov	r7, r1
 80054ce:	4606      	mov	r6, r0
 80054d0:	f7fb faf0 	bl	8000ab4 <__aeabi_d2iz>
 80054d4:	f7fa ffea 	bl	80004ac <__aeabi_i2d>
 80054d8:	4602      	mov	r2, r0
 80054da:	460b      	mov	r3, r1
 80054dc:	4630      	mov	r0, r6
 80054de:	4639      	mov	r1, r7
 80054e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80054e4:	f7fa fe94 	bl	8000210 <__aeabi_dsub>
 80054e8:	4b19      	ldr	r3, [pc, #100]	@ (8005550 <__ieee754_rem_pio2+0x3f0>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	f7fb f848 	bl	8000580 <__aeabi_dmul>
 80054f0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80054f4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80054f8:	f04f 0803 	mov.w	r8, #3
 80054fc:	2600      	movs	r6, #0
 80054fe:	2700      	movs	r7, #0
 8005500:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005504:	4632      	mov	r2, r6
 8005506:	463b      	mov	r3, r7
 8005508:	46c2      	mov	sl, r8
 800550a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800550e:	f7fb fa9f 	bl	8000a50 <__aeabi_dcmpeq>
 8005512:	2800      	cmp	r0, #0
 8005514:	d1f4      	bne.n	8005500 <__ieee754_rem_pio2+0x3a0>
 8005516:	4b0f      	ldr	r3, [pc, #60]	@ (8005554 <__ieee754_rem_pio2+0x3f4>)
 8005518:	9301      	str	r3, [sp, #4]
 800551a:	2302      	movs	r3, #2
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	462a      	mov	r2, r5
 8005520:	4653      	mov	r3, sl
 8005522:	4621      	mov	r1, r4
 8005524:	a806      	add	r0, sp, #24
 8005526:	f000 f817 	bl	8005558 <__kernel_rem_pio2>
 800552a:	9b04      	ldr	r3, [sp, #16]
 800552c:	2b00      	cmp	r3, #0
 800552e:	4605      	mov	r5, r0
 8005530:	f6bf ae53 	bge.w	80051da <__ieee754_rem_pio2+0x7a>
 8005534:	e9d4 2100 	ldrd	r2, r1, [r4]
 8005538:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800553c:	e9c4 2300 	strd	r2, r3, [r4]
 8005540:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8005544:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005548:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800554c:	e740      	b.n	80053d0 <__ieee754_rem_pio2+0x270>
 800554e:	bf00      	nop
 8005550:	41700000 	.word	0x41700000
 8005554:	080061d0 	.word	0x080061d0

08005558 <__kernel_rem_pio2>:
 8005558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800555c:	ed2d 8b02 	vpush	{d8}
 8005560:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8005564:	f112 0f14 	cmn.w	r2, #20
 8005568:	9306      	str	r3, [sp, #24]
 800556a:	9104      	str	r1, [sp, #16]
 800556c:	4bbe      	ldr	r3, [pc, #760]	@ (8005868 <__kernel_rem_pio2+0x310>)
 800556e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8005570:	9008      	str	r0, [sp, #32]
 8005572:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	9b06      	ldr	r3, [sp, #24]
 800557a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800557e:	bfa8      	it	ge
 8005580:	1ed4      	subge	r4, r2, #3
 8005582:	9305      	str	r3, [sp, #20]
 8005584:	bfb2      	itee	lt
 8005586:	2400      	movlt	r4, #0
 8005588:	2318      	movge	r3, #24
 800558a:	fb94 f4f3 	sdivge	r4, r4, r3
 800558e:	f06f 0317 	mvn.w	r3, #23
 8005592:	fb04 3303 	mla	r3, r4, r3, r3
 8005596:	eb03 0b02 	add.w	fp, r3, r2
 800559a:	9b00      	ldr	r3, [sp, #0]
 800559c:	9a05      	ldr	r2, [sp, #20]
 800559e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8005858 <__kernel_rem_pio2+0x300>
 80055a2:	eb03 0802 	add.w	r8, r3, r2
 80055a6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80055a8:	1aa7      	subs	r7, r4, r2
 80055aa:	ae20      	add	r6, sp, #128	@ 0x80
 80055ac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80055b0:	2500      	movs	r5, #0
 80055b2:	4545      	cmp	r5, r8
 80055b4:	dd13      	ble.n	80055de <__kernel_rem_pio2+0x86>
 80055b6:	9b06      	ldr	r3, [sp, #24]
 80055b8:	aa20      	add	r2, sp, #128	@ 0x80
 80055ba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80055be:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80055c2:	f04f 0800 	mov.w	r8, #0
 80055c6:	9b00      	ldr	r3, [sp, #0]
 80055c8:	4598      	cmp	r8, r3
 80055ca:	dc31      	bgt.n	8005630 <__kernel_rem_pio2+0xd8>
 80055cc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8005858 <__kernel_rem_pio2+0x300>
 80055d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80055d8:	462f      	mov	r7, r5
 80055da:	2600      	movs	r6, #0
 80055dc:	e01b      	b.n	8005616 <__kernel_rem_pio2+0xbe>
 80055de:	42ef      	cmn	r7, r5
 80055e0:	d407      	bmi.n	80055f2 <__kernel_rem_pio2+0x9a>
 80055e2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80055e6:	f7fa ff61 	bl	80004ac <__aeabi_i2d>
 80055ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 80055ee:	3501      	adds	r5, #1
 80055f0:	e7df      	b.n	80055b2 <__kernel_rem_pio2+0x5a>
 80055f2:	ec51 0b18 	vmov	r0, r1, d8
 80055f6:	e7f8      	b.n	80055ea <__kernel_rem_pio2+0x92>
 80055f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055fc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005600:	f7fa ffbe 	bl	8000580 <__aeabi_dmul>
 8005604:	4602      	mov	r2, r0
 8005606:	460b      	mov	r3, r1
 8005608:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800560c:	f7fa fe02 	bl	8000214 <__adddf3>
 8005610:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005614:	3601      	adds	r6, #1
 8005616:	9b05      	ldr	r3, [sp, #20]
 8005618:	429e      	cmp	r6, r3
 800561a:	f1a7 0708 	sub.w	r7, r7, #8
 800561e:	ddeb      	ble.n	80055f8 <__kernel_rem_pio2+0xa0>
 8005620:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005624:	f108 0801 	add.w	r8, r8, #1
 8005628:	ecaa 7b02 	vstmia	sl!, {d7}
 800562c:	3508      	adds	r5, #8
 800562e:	e7ca      	b.n	80055c6 <__kernel_rem_pio2+0x6e>
 8005630:	9b00      	ldr	r3, [sp, #0]
 8005632:	f8dd 8000 	ldr.w	r8, [sp]
 8005636:	aa0c      	add	r2, sp, #48	@ 0x30
 8005638:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800563c:	930a      	str	r3, [sp, #40]	@ 0x28
 800563e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005640:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005644:	9309      	str	r3, [sp, #36]	@ 0x24
 8005646:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800564a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800564c:	ab98      	add	r3, sp, #608	@ 0x260
 800564e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005652:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8005656:	ed8d 7b02 	vstr	d7, [sp, #8]
 800565a:	ac0c      	add	r4, sp, #48	@ 0x30
 800565c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800565e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8005662:	46a1      	mov	r9, r4
 8005664:	46c2      	mov	sl, r8
 8005666:	f1ba 0f00 	cmp.w	sl, #0
 800566a:	f1a5 0508 	sub.w	r5, r5, #8
 800566e:	dc77      	bgt.n	8005760 <__kernel_rem_pio2+0x208>
 8005670:	4658      	mov	r0, fp
 8005672:	ed9d 0b02 	vldr	d0, [sp, #8]
 8005676:	f000 fc53 	bl	8005f20 <scalbn>
 800567a:	ec57 6b10 	vmov	r6, r7, d0
 800567e:	2200      	movs	r2, #0
 8005680:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8005684:	4630      	mov	r0, r6
 8005686:	4639      	mov	r1, r7
 8005688:	f7fa ff7a 	bl	8000580 <__aeabi_dmul>
 800568c:	ec41 0b10 	vmov	d0, r0, r1
 8005690:	f000 fcc6 	bl	8006020 <floor>
 8005694:	4b75      	ldr	r3, [pc, #468]	@ (800586c <__kernel_rem_pio2+0x314>)
 8005696:	ec51 0b10 	vmov	r0, r1, d0
 800569a:	2200      	movs	r2, #0
 800569c:	f7fa ff70 	bl	8000580 <__aeabi_dmul>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4630      	mov	r0, r6
 80056a6:	4639      	mov	r1, r7
 80056a8:	f7fa fdb2 	bl	8000210 <__aeabi_dsub>
 80056ac:	460f      	mov	r7, r1
 80056ae:	4606      	mov	r6, r0
 80056b0:	f7fb fa00 	bl	8000ab4 <__aeabi_d2iz>
 80056b4:	9002      	str	r0, [sp, #8]
 80056b6:	f7fa fef9 	bl	80004ac <__aeabi_i2d>
 80056ba:	4602      	mov	r2, r0
 80056bc:	460b      	mov	r3, r1
 80056be:	4630      	mov	r0, r6
 80056c0:	4639      	mov	r1, r7
 80056c2:	f7fa fda5 	bl	8000210 <__aeabi_dsub>
 80056c6:	f1bb 0f00 	cmp.w	fp, #0
 80056ca:	4606      	mov	r6, r0
 80056cc:	460f      	mov	r7, r1
 80056ce:	dd6c      	ble.n	80057aa <__kernel_rem_pio2+0x252>
 80056d0:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 80056d4:	ab0c      	add	r3, sp, #48	@ 0x30
 80056d6:	9d02      	ldr	r5, [sp, #8]
 80056d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80056dc:	f1cb 0018 	rsb	r0, fp, #24
 80056e0:	fa43 f200 	asr.w	r2, r3, r0
 80056e4:	4415      	add	r5, r2
 80056e6:	4082      	lsls	r2, r0
 80056e8:	1a9b      	subs	r3, r3, r2
 80056ea:	aa0c      	add	r2, sp, #48	@ 0x30
 80056ec:	9502      	str	r5, [sp, #8]
 80056ee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80056f2:	f1cb 0217 	rsb	r2, fp, #23
 80056f6:	fa43 f902 	asr.w	r9, r3, r2
 80056fa:	f1b9 0f00 	cmp.w	r9, #0
 80056fe:	dd64      	ble.n	80057ca <__kernel_rem_pio2+0x272>
 8005700:	9b02      	ldr	r3, [sp, #8]
 8005702:	2200      	movs	r2, #0
 8005704:	3301      	adds	r3, #1
 8005706:	9302      	str	r3, [sp, #8]
 8005708:	4615      	mov	r5, r2
 800570a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800570e:	4590      	cmp	r8, r2
 8005710:	f300 80b8 	bgt.w	8005884 <__kernel_rem_pio2+0x32c>
 8005714:	f1bb 0f00 	cmp.w	fp, #0
 8005718:	dd07      	ble.n	800572a <__kernel_rem_pio2+0x1d2>
 800571a:	f1bb 0f01 	cmp.w	fp, #1
 800571e:	f000 80bf 	beq.w	80058a0 <__kernel_rem_pio2+0x348>
 8005722:	f1bb 0f02 	cmp.w	fp, #2
 8005726:	f000 80c6 	beq.w	80058b6 <__kernel_rem_pio2+0x35e>
 800572a:	f1b9 0f02 	cmp.w	r9, #2
 800572e:	d14c      	bne.n	80057ca <__kernel_rem_pio2+0x272>
 8005730:	4632      	mov	r2, r6
 8005732:	463b      	mov	r3, r7
 8005734:	494e      	ldr	r1, [pc, #312]	@ (8005870 <__kernel_rem_pio2+0x318>)
 8005736:	2000      	movs	r0, #0
 8005738:	f7fa fd6a 	bl	8000210 <__aeabi_dsub>
 800573c:	4606      	mov	r6, r0
 800573e:	460f      	mov	r7, r1
 8005740:	2d00      	cmp	r5, #0
 8005742:	d042      	beq.n	80057ca <__kernel_rem_pio2+0x272>
 8005744:	4658      	mov	r0, fp
 8005746:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8005860 <__kernel_rem_pio2+0x308>
 800574a:	f000 fbe9 	bl	8005f20 <scalbn>
 800574e:	4630      	mov	r0, r6
 8005750:	4639      	mov	r1, r7
 8005752:	ec53 2b10 	vmov	r2, r3, d0
 8005756:	f7fa fd5b 	bl	8000210 <__aeabi_dsub>
 800575a:	4606      	mov	r6, r0
 800575c:	460f      	mov	r7, r1
 800575e:	e034      	b.n	80057ca <__kernel_rem_pio2+0x272>
 8005760:	4b44      	ldr	r3, [pc, #272]	@ (8005874 <__kernel_rem_pio2+0x31c>)
 8005762:	2200      	movs	r2, #0
 8005764:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005768:	f7fa ff0a 	bl	8000580 <__aeabi_dmul>
 800576c:	f7fb f9a2 	bl	8000ab4 <__aeabi_d2iz>
 8005770:	f7fa fe9c 	bl	80004ac <__aeabi_i2d>
 8005774:	4b40      	ldr	r3, [pc, #256]	@ (8005878 <__kernel_rem_pio2+0x320>)
 8005776:	2200      	movs	r2, #0
 8005778:	4606      	mov	r6, r0
 800577a:	460f      	mov	r7, r1
 800577c:	f7fa ff00 	bl	8000580 <__aeabi_dmul>
 8005780:	4602      	mov	r2, r0
 8005782:	460b      	mov	r3, r1
 8005784:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005788:	f7fa fd42 	bl	8000210 <__aeabi_dsub>
 800578c:	f7fb f992 	bl	8000ab4 <__aeabi_d2iz>
 8005790:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005794:	f849 0b04 	str.w	r0, [r9], #4
 8005798:	4639      	mov	r1, r7
 800579a:	4630      	mov	r0, r6
 800579c:	f7fa fd3a 	bl	8000214 <__adddf3>
 80057a0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80057a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057a8:	e75d      	b.n	8005666 <__kernel_rem_pio2+0x10e>
 80057aa:	d107      	bne.n	80057bc <__kernel_rem_pio2+0x264>
 80057ac:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80057b0:	aa0c      	add	r2, sp, #48	@ 0x30
 80057b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057b6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80057ba:	e79e      	b.n	80056fa <__kernel_rem_pio2+0x1a2>
 80057bc:	4b2f      	ldr	r3, [pc, #188]	@ (800587c <__kernel_rem_pio2+0x324>)
 80057be:	2200      	movs	r2, #0
 80057c0:	f7fb f964 	bl	8000a8c <__aeabi_dcmpge>
 80057c4:	2800      	cmp	r0, #0
 80057c6:	d143      	bne.n	8005850 <__kernel_rem_pio2+0x2f8>
 80057c8:	4681      	mov	r9, r0
 80057ca:	2200      	movs	r2, #0
 80057cc:	2300      	movs	r3, #0
 80057ce:	4630      	mov	r0, r6
 80057d0:	4639      	mov	r1, r7
 80057d2:	f7fb f93d 	bl	8000a50 <__aeabi_dcmpeq>
 80057d6:	2800      	cmp	r0, #0
 80057d8:	f000 80bf 	beq.w	800595a <__kernel_rem_pio2+0x402>
 80057dc:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80057e0:	2200      	movs	r2, #0
 80057e2:	9900      	ldr	r1, [sp, #0]
 80057e4:	428b      	cmp	r3, r1
 80057e6:	da6e      	bge.n	80058c6 <__kernel_rem_pio2+0x36e>
 80057e8:	2a00      	cmp	r2, #0
 80057ea:	f000 8089 	beq.w	8005900 <__kernel_rem_pio2+0x3a8>
 80057ee:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80057f2:	ab0c      	add	r3, sp, #48	@ 0x30
 80057f4:	f1ab 0b18 	sub.w	fp, fp, #24
 80057f8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0f6      	beq.n	80057ee <__kernel_rem_pio2+0x296>
 8005800:	4658      	mov	r0, fp
 8005802:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8005860 <__kernel_rem_pio2+0x308>
 8005806:	f000 fb8b 	bl	8005f20 <scalbn>
 800580a:	f108 0301 	add.w	r3, r8, #1
 800580e:	00da      	lsls	r2, r3, #3
 8005810:	9205      	str	r2, [sp, #20]
 8005812:	ec55 4b10 	vmov	r4, r5, d0
 8005816:	aa70      	add	r2, sp, #448	@ 0x1c0
 8005818:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8005874 <__kernel_rem_pio2+0x31c>
 800581c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8005820:	4646      	mov	r6, r8
 8005822:	f04f 0a00 	mov.w	sl, #0
 8005826:	2e00      	cmp	r6, #0
 8005828:	f280 80cf 	bge.w	80059ca <__kernel_rem_pio2+0x472>
 800582c:	4644      	mov	r4, r8
 800582e:	2c00      	cmp	r4, #0
 8005830:	f2c0 80fd 	blt.w	8005a2e <__kernel_rem_pio2+0x4d6>
 8005834:	4b12      	ldr	r3, [pc, #72]	@ (8005880 <__kernel_rem_pio2+0x328>)
 8005836:	461f      	mov	r7, r3
 8005838:	ab70      	add	r3, sp, #448	@ 0x1c0
 800583a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800583e:	9306      	str	r3, [sp, #24]
 8005840:	f04f 0a00 	mov.w	sl, #0
 8005844:	f04f 0b00 	mov.w	fp, #0
 8005848:	2600      	movs	r6, #0
 800584a:	eba8 0504 	sub.w	r5, r8, r4
 800584e:	e0e2      	b.n	8005a16 <__kernel_rem_pio2+0x4be>
 8005850:	f04f 0902 	mov.w	r9, #2
 8005854:	e754      	b.n	8005700 <__kernel_rem_pio2+0x1a8>
 8005856:	bf00      	nop
	...
 8005864:	3ff00000 	.word	0x3ff00000
 8005868:	08006318 	.word	0x08006318
 800586c:	40200000 	.word	0x40200000
 8005870:	3ff00000 	.word	0x3ff00000
 8005874:	3e700000 	.word	0x3e700000
 8005878:	41700000 	.word	0x41700000
 800587c:	3fe00000 	.word	0x3fe00000
 8005880:	080062d8 	.word	0x080062d8
 8005884:	f854 3b04 	ldr.w	r3, [r4], #4
 8005888:	b945      	cbnz	r5, 800589c <__kernel_rem_pio2+0x344>
 800588a:	b123      	cbz	r3, 8005896 <__kernel_rem_pio2+0x33e>
 800588c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8005890:	f844 3c04 	str.w	r3, [r4, #-4]
 8005894:	2301      	movs	r3, #1
 8005896:	3201      	adds	r2, #1
 8005898:	461d      	mov	r5, r3
 800589a:	e738      	b.n	800570e <__kernel_rem_pio2+0x1b6>
 800589c:	1acb      	subs	r3, r1, r3
 800589e:	e7f7      	b.n	8005890 <__kernel_rem_pio2+0x338>
 80058a0:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 80058a4:	ab0c      	add	r3, sp, #48	@ 0x30
 80058a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058aa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80058ae:	a90c      	add	r1, sp, #48	@ 0x30
 80058b0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80058b4:	e739      	b.n	800572a <__kernel_rem_pio2+0x1d2>
 80058b6:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 80058ba:	ab0c      	add	r3, sp, #48	@ 0x30
 80058bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058c0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80058c4:	e7f3      	b.n	80058ae <__kernel_rem_pio2+0x356>
 80058c6:	a90c      	add	r1, sp, #48	@ 0x30
 80058c8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80058cc:	3b01      	subs	r3, #1
 80058ce:	430a      	orrs	r2, r1
 80058d0:	e787      	b.n	80057e2 <__kernel_rem_pio2+0x28a>
 80058d2:	3401      	adds	r4, #1
 80058d4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80058d8:	2a00      	cmp	r2, #0
 80058da:	d0fa      	beq.n	80058d2 <__kernel_rem_pio2+0x37a>
 80058dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80058de:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80058e2:	eb0d 0503 	add.w	r5, sp, r3
 80058e6:	9b06      	ldr	r3, [sp, #24]
 80058e8:	aa20      	add	r2, sp, #128	@ 0x80
 80058ea:	4443      	add	r3, r8
 80058ec:	f108 0701 	add.w	r7, r8, #1
 80058f0:	3d98      	subs	r5, #152	@ 0x98
 80058f2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80058f6:	4444      	add	r4, r8
 80058f8:	42bc      	cmp	r4, r7
 80058fa:	da04      	bge.n	8005906 <__kernel_rem_pio2+0x3ae>
 80058fc:	46a0      	mov	r8, r4
 80058fe:	e6a2      	b.n	8005646 <__kernel_rem_pio2+0xee>
 8005900:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005902:	2401      	movs	r4, #1
 8005904:	e7e6      	b.n	80058d4 <__kernel_rem_pio2+0x37c>
 8005906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005908:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800590c:	f7fa fdce 	bl	80004ac <__aeabi_i2d>
 8005910:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8005bd8 <__kernel_rem_pio2+0x680>
 8005914:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005918:	ed8d 7b02 	vstr	d7, [sp, #8]
 800591c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005920:	46b2      	mov	sl, r6
 8005922:	f04f 0800 	mov.w	r8, #0
 8005926:	9b05      	ldr	r3, [sp, #20]
 8005928:	4598      	cmp	r8, r3
 800592a:	dd05      	ble.n	8005938 <__kernel_rem_pio2+0x3e0>
 800592c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005930:	3701      	adds	r7, #1
 8005932:	eca5 7b02 	vstmia	r5!, {d7}
 8005936:	e7df      	b.n	80058f8 <__kernel_rem_pio2+0x3a0>
 8005938:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800593c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005940:	f7fa fe1e 	bl	8000580 <__aeabi_dmul>
 8005944:	4602      	mov	r2, r0
 8005946:	460b      	mov	r3, r1
 8005948:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800594c:	f7fa fc62 	bl	8000214 <__adddf3>
 8005950:	f108 0801 	add.w	r8, r8, #1
 8005954:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005958:	e7e5      	b.n	8005926 <__kernel_rem_pio2+0x3ce>
 800595a:	f1cb 0000 	rsb	r0, fp, #0
 800595e:	ec47 6b10 	vmov	d0, r6, r7
 8005962:	f000 fadd 	bl	8005f20 <scalbn>
 8005966:	ec55 4b10 	vmov	r4, r5, d0
 800596a:	4b9d      	ldr	r3, [pc, #628]	@ (8005be0 <__kernel_rem_pio2+0x688>)
 800596c:	2200      	movs	r2, #0
 800596e:	4620      	mov	r0, r4
 8005970:	4629      	mov	r1, r5
 8005972:	f7fb f88b 	bl	8000a8c <__aeabi_dcmpge>
 8005976:	b300      	cbz	r0, 80059ba <__kernel_rem_pio2+0x462>
 8005978:	4b9a      	ldr	r3, [pc, #616]	@ (8005be4 <__kernel_rem_pio2+0x68c>)
 800597a:	2200      	movs	r2, #0
 800597c:	4620      	mov	r0, r4
 800597e:	4629      	mov	r1, r5
 8005980:	f7fa fdfe 	bl	8000580 <__aeabi_dmul>
 8005984:	f7fb f896 	bl	8000ab4 <__aeabi_d2iz>
 8005988:	4606      	mov	r6, r0
 800598a:	f7fa fd8f 	bl	80004ac <__aeabi_i2d>
 800598e:	4b94      	ldr	r3, [pc, #592]	@ (8005be0 <__kernel_rem_pio2+0x688>)
 8005990:	2200      	movs	r2, #0
 8005992:	f7fa fdf5 	bl	8000580 <__aeabi_dmul>
 8005996:	460b      	mov	r3, r1
 8005998:	4602      	mov	r2, r0
 800599a:	4629      	mov	r1, r5
 800599c:	4620      	mov	r0, r4
 800599e:	f7fa fc37 	bl	8000210 <__aeabi_dsub>
 80059a2:	f7fb f887 	bl	8000ab4 <__aeabi_d2iz>
 80059a6:	ab0c      	add	r3, sp, #48	@ 0x30
 80059a8:	f10b 0b18 	add.w	fp, fp, #24
 80059ac:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80059b0:	f108 0801 	add.w	r8, r8, #1
 80059b4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80059b8:	e722      	b.n	8005800 <__kernel_rem_pio2+0x2a8>
 80059ba:	4620      	mov	r0, r4
 80059bc:	4629      	mov	r1, r5
 80059be:	f7fb f879 	bl	8000ab4 <__aeabi_d2iz>
 80059c2:	ab0c      	add	r3, sp, #48	@ 0x30
 80059c4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80059c8:	e71a      	b.n	8005800 <__kernel_rem_pio2+0x2a8>
 80059ca:	ab0c      	add	r3, sp, #48	@ 0x30
 80059cc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80059d0:	f7fa fd6c 	bl	80004ac <__aeabi_i2d>
 80059d4:	4622      	mov	r2, r4
 80059d6:	462b      	mov	r3, r5
 80059d8:	f7fa fdd2 	bl	8000580 <__aeabi_dmul>
 80059dc:	4652      	mov	r2, sl
 80059de:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80059e2:	465b      	mov	r3, fp
 80059e4:	4620      	mov	r0, r4
 80059e6:	4629      	mov	r1, r5
 80059e8:	f7fa fdca 	bl	8000580 <__aeabi_dmul>
 80059ec:	3e01      	subs	r6, #1
 80059ee:	4604      	mov	r4, r0
 80059f0:	460d      	mov	r5, r1
 80059f2:	e718      	b.n	8005826 <__kernel_rem_pio2+0x2ce>
 80059f4:	9906      	ldr	r1, [sp, #24]
 80059f6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80059fa:	9106      	str	r1, [sp, #24]
 80059fc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8005a00:	f7fa fdbe 	bl	8000580 <__aeabi_dmul>
 8005a04:	4602      	mov	r2, r0
 8005a06:	460b      	mov	r3, r1
 8005a08:	4650      	mov	r0, sl
 8005a0a:	4659      	mov	r1, fp
 8005a0c:	f7fa fc02 	bl	8000214 <__adddf3>
 8005a10:	3601      	adds	r6, #1
 8005a12:	4682      	mov	sl, r0
 8005a14:	468b      	mov	fp, r1
 8005a16:	9b00      	ldr	r3, [sp, #0]
 8005a18:	429e      	cmp	r6, r3
 8005a1a:	dc01      	bgt.n	8005a20 <__kernel_rem_pio2+0x4c8>
 8005a1c:	42b5      	cmp	r5, r6
 8005a1e:	dae9      	bge.n	80059f4 <__kernel_rem_pio2+0x49c>
 8005a20:	ab48      	add	r3, sp, #288	@ 0x120
 8005a22:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005a26:	e9c5 ab00 	strd	sl, fp, [r5]
 8005a2a:	3c01      	subs	r4, #1
 8005a2c:	e6ff      	b.n	800582e <__kernel_rem_pio2+0x2d6>
 8005a2e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	dc0b      	bgt.n	8005a4c <__kernel_rem_pio2+0x4f4>
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	dc39      	bgt.n	8005aac <__kernel_rem_pio2+0x554>
 8005a38:	d05d      	beq.n	8005af6 <__kernel_rem_pio2+0x59e>
 8005a3a:	9b02      	ldr	r3, [sp, #8]
 8005a3c:	f003 0007 	and.w	r0, r3, #7
 8005a40:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8005a44:	ecbd 8b02 	vpop	{d8}
 8005a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a4c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8005a4e:	2b03      	cmp	r3, #3
 8005a50:	d1f3      	bne.n	8005a3a <__kernel_rem_pio2+0x4e2>
 8005a52:	9b05      	ldr	r3, [sp, #20]
 8005a54:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005a58:	eb0d 0403 	add.w	r4, sp, r3
 8005a5c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8005a60:	4625      	mov	r5, r4
 8005a62:	46c2      	mov	sl, r8
 8005a64:	f1ba 0f00 	cmp.w	sl, #0
 8005a68:	f1a5 0508 	sub.w	r5, r5, #8
 8005a6c:	dc6b      	bgt.n	8005b46 <__kernel_rem_pio2+0x5ee>
 8005a6e:	4645      	mov	r5, r8
 8005a70:	2d01      	cmp	r5, #1
 8005a72:	f1a4 0408 	sub.w	r4, r4, #8
 8005a76:	f300 8087 	bgt.w	8005b88 <__kernel_rem_pio2+0x630>
 8005a7a:	9c05      	ldr	r4, [sp, #20]
 8005a7c:	ab48      	add	r3, sp, #288	@ 0x120
 8005a7e:	441c      	add	r4, r3
 8005a80:	2000      	movs	r0, #0
 8005a82:	2100      	movs	r1, #0
 8005a84:	f1b8 0f01 	cmp.w	r8, #1
 8005a88:	f300 809c 	bgt.w	8005bc4 <__kernel_rem_pio2+0x66c>
 8005a8c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8005a90:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8005a94:	f1b9 0f00 	cmp.w	r9, #0
 8005a98:	f040 80a6 	bne.w	8005be8 <__kernel_rem_pio2+0x690>
 8005a9c:	9b04      	ldr	r3, [sp, #16]
 8005a9e:	e9c3 7800 	strd	r7, r8, [r3]
 8005aa2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005aa6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005aaa:	e7c6      	b.n	8005a3a <__kernel_rem_pio2+0x4e2>
 8005aac:	9d05      	ldr	r5, [sp, #20]
 8005aae:	ab48      	add	r3, sp, #288	@ 0x120
 8005ab0:	441d      	add	r5, r3
 8005ab2:	4644      	mov	r4, r8
 8005ab4:	2000      	movs	r0, #0
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	2c00      	cmp	r4, #0
 8005aba:	da35      	bge.n	8005b28 <__kernel_rem_pio2+0x5d0>
 8005abc:	f1b9 0f00 	cmp.w	r9, #0
 8005ac0:	d038      	beq.n	8005b34 <__kernel_rem_pio2+0x5dc>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005ac8:	9c04      	ldr	r4, [sp, #16]
 8005aca:	e9c4 2300 	strd	r2, r3, [r4]
 8005ace:	4602      	mov	r2, r0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8005ad6:	f7fa fb9b 	bl	8000210 <__aeabi_dsub>
 8005ada:	ad4a      	add	r5, sp, #296	@ 0x128
 8005adc:	2401      	movs	r4, #1
 8005ade:	45a0      	cmp	r8, r4
 8005ae0:	da2b      	bge.n	8005b3a <__kernel_rem_pio2+0x5e2>
 8005ae2:	f1b9 0f00 	cmp.w	r9, #0
 8005ae6:	d002      	beq.n	8005aee <__kernel_rem_pio2+0x596>
 8005ae8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005aec:	4619      	mov	r1, r3
 8005aee:	9b04      	ldr	r3, [sp, #16]
 8005af0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005af4:	e7a1      	b.n	8005a3a <__kernel_rem_pio2+0x4e2>
 8005af6:	9c05      	ldr	r4, [sp, #20]
 8005af8:	ab48      	add	r3, sp, #288	@ 0x120
 8005afa:	441c      	add	r4, r3
 8005afc:	2000      	movs	r0, #0
 8005afe:	2100      	movs	r1, #0
 8005b00:	f1b8 0f00 	cmp.w	r8, #0
 8005b04:	da09      	bge.n	8005b1a <__kernel_rem_pio2+0x5c2>
 8005b06:	f1b9 0f00 	cmp.w	r9, #0
 8005b0a:	d002      	beq.n	8005b12 <__kernel_rem_pio2+0x5ba>
 8005b0c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005b10:	4619      	mov	r1, r3
 8005b12:	9b04      	ldr	r3, [sp, #16]
 8005b14:	e9c3 0100 	strd	r0, r1, [r3]
 8005b18:	e78f      	b.n	8005a3a <__kernel_rem_pio2+0x4e2>
 8005b1a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005b1e:	f7fa fb79 	bl	8000214 <__adddf3>
 8005b22:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005b26:	e7eb      	b.n	8005b00 <__kernel_rem_pio2+0x5a8>
 8005b28:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8005b2c:	f7fa fb72 	bl	8000214 <__adddf3>
 8005b30:	3c01      	subs	r4, #1
 8005b32:	e7c1      	b.n	8005ab8 <__kernel_rem_pio2+0x560>
 8005b34:	4602      	mov	r2, r0
 8005b36:	460b      	mov	r3, r1
 8005b38:	e7c6      	b.n	8005ac8 <__kernel_rem_pio2+0x570>
 8005b3a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8005b3e:	f7fa fb69 	bl	8000214 <__adddf3>
 8005b42:	3401      	adds	r4, #1
 8005b44:	e7cb      	b.n	8005ade <__kernel_rem_pio2+0x586>
 8005b46:	ed95 7b00 	vldr	d7, [r5]
 8005b4a:	ed8d 7b00 	vstr	d7, [sp]
 8005b4e:	ed95 7b02 	vldr	d7, [r5, #8]
 8005b52:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b56:	ec53 2b17 	vmov	r2, r3, d7
 8005b5a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005b5e:	f7fa fb59 	bl	8000214 <__adddf3>
 8005b62:	4602      	mov	r2, r0
 8005b64:	460b      	mov	r3, r1
 8005b66:	4606      	mov	r6, r0
 8005b68:	460f      	mov	r7, r1
 8005b6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b6e:	f7fa fb4f 	bl	8000210 <__aeabi_dsub>
 8005b72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b76:	f7fa fb4d 	bl	8000214 <__adddf3>
 8005b7a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005b7e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8005b82:	e9c5 6700 	strd	r6, r7, [r5]
 8005b86:	e76d      	b.n	8005a64 <__kernel_rem_pio2+0x50c>
 8005b88:	ed94 7b00 	vldr	d7, [r4]
 8005b8c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8005b90:	ec51 0b17 	vmov	r0, r1, d7
 8005b94:	4652      	mov	r2, sl
 8005b96:	465b      	mov	r3, fp
 8005b98:	ed8d 7b00 	vstr	d7, [sp]
 8005b9c:	f7fa fb3a 	bl	8000214 <__adddf3>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	4606      	mov	r6, r0
 8005ba6:	460f      	mov	r7, r1
 8005ba8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bac:	f7fa fb30 	bl	8000210 <__aeabi_dsub>
 8005bb0:	4652      	mov	r2, sl
 8005bb2:	465b      	mov	r3, fp
 8005bb4:	f7fa fb2e 	bl	8000214 <__adddf3>
 8005bb8:	3d01      	subs	r5, #1
 8005bba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005bbe:	e9c4 6700 	strd	r6, r7, [r4]
 8005bc2:	e755      	b.n	8005a70 <__kernel_rem_pio2+0x518>
 8005bc4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005bc8:	f7fa fb24 	bl	8000214 <__adddf3>
 8005bcc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005bd0:	e758      	b.n	8005a84 <__kernel_rem_pio2+0x52c>
 8005bd2:	bf00      	nop
 8005bd4:	f3af 8000 	nop.w
	...
 8005be0:	41700000 	.word	0x41700000
 8005be4:	3e700000 	.word	0x3e700000
 8005be8:	9b04      	ldr	r3, [sp, #16]
 8005bea:	9a04      	ldr	r2, [sp, #16]
 8005bec:	601f      	str	r7, [r3, #0]
 8005bee:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8005bf2:	605c      	str	r4, [r3, #4]
 8005bf4:	609d      	str	r5, [r3, #8]
 8005bf6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005bfa:	60d3      	str	r3, [r2, #12]
 8005bfc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005c00:	6110      	str	r0, [r2, #16]
 8005c02:	6153      	str	r3, [r2, #20]
 8005c04:	e719      	b.n	8005a3a <__kernel_rem_pio2+0x4e2>
 8005c06:	bf00      	nop

08005c08 <__kernel_cos>:
 8005c08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c0c:	ec57 6b10 	vmov	r6, r7, d0
 8005c10:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005c14:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8005c18:	ed8d 1b00 	vstr	d1, [sp]
 8005c1c:	d206      	bcs.n	8005c2c <__kernel_cos+0x24>
 8005c1e:	4630      	mov	r0, r6
 8005c20:	4639      	mov	r1, r7
 8005c22:	f7fa ff47 	bl	8000ab4 <__aeabi_d2iz>
 8005c26:	2800      	cmp	r0, #0
 8005c28:	f000 8088 	beq.w	8005d3c <__kernel_cos+0x134>
 8005c2c:	4632      	mov	r2, r6
 8005c2e:	463b      	mov	r3, r7
 8005c30:	4630      	mov	r0, r6
 8005c32:	4639      	mov	r1, r7
 8005c34:	f7fa fca4 	bl	8000580 <__aeabi_dmul>
 8005c38:	4b51      	ldr	r3, [pc, #324]	@ (8005d80 <__kernel_cos+0x178>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	4604      	mov	r4, r0
 8005c3e:	460d      	mov	r5, r1
 8005c40:	f7fa fc9e 	bl	8000580 <__aeabi_dmul>
 8005c44:	a340      	add	r3, pc, #256	@ (adr r3, 8005d48 <__kernel_cos+0x140>)
 8005c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4a:	4682      	mov	sl, r0
 8005c4c:	468b      	mov	fp, r1
 8005c4e:	4620      	mov	r0, r4
 8005c50:	4629      	mov	r1, r5
 8005c52:	f7fa fc95 	bl	8000580 <__aeabi_dmul>
 8005c56:	a33e      	add	r3, pc, #248	@ (adr r3, 8005d50 <__kernel_cos+0x148>)
 8005c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5c:	f7fa fada 	bl	8000214 <__adddf3>
 8005c60:	4622      	mov	r2, r4
 8005c62:	462b      	mov	r3, r5
 8005c64:	f7fa fc8c 	bl	8000580 <__aeabi_dmul>
 8005c68:	a33b      	add	r3, pc, #236	@ (adr r3, 8005d58 <__kernel_cos+0x150>)
 8005c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6e:	f7fa facf 	bl	8000210 <__aeabi_dsub>
 8005c72:	4622      	mov	r2, r4
 8005c74:	462b      	mov	r3, r5
 8005c76:	f7fa fc83 	bl	8000580 <__aeabi_dmul>
 8005c7a:	a339      	add	r3, pc, #228	@ (adr r3, 8005d60 <__kernel_cos+0x158>)
 8005c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c80:	f7fa fac8 	bl	8000214 <__adddf3>
 8005c84:	4622      	mov	r2, r4
 8005c86:	462b      	mov	r3, r5
 8005c88:	f7fa fc7a 	bl	8000580 <__aeabi_dmul>
 8005c8c:	a336      	add	r3, pc, #216	@ (adr r3, 8005d68 <__kernel_cos+0x160>)
 8005c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c92:	f7fa fabd 	bl	8000210 <__aeabi_dsub>
 8005c96:	4622      	mov	r2, r4
 8005c98:	462b      	mov	r3, r5
 8005c9a:	f7fa fc71 	bl	8000580 <__aeabi_dmul>
 8005c9e:	a334      	add	r3, pc, #208	@ (adr r3, 8005d70 <__kernel_cos+0x168>)
 8005ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca4:	f7fa fab6 	bl	8000214 <__adddf3>
 8005ca8:	4622      	mov	r2, r4
 8005caa:	462b      	mov	r3, r5
 8005cac:	f7fa fc68 	bl	8000580 <__aeabi_dmul>
 8005cb0:	4622      	mov	r2, r4
 8005cb2:	462b      	mov	r3, r5
 8005cb4:	f7fa fc64 	bl	8000580 <__aeabi_dmul>
 8005cb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cbc:	4604      	mov	r4, r0
 8005cbe:	460d      	mov	r5, r1
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	4639      	mov	r1, r7
 8005cc4:	f7fa fc5c 	bl	8000580 <__aeabi_dmul>
 8005cc8:	460b      	mov	r3, r1
 8005cca:	4602      	mov	r2, r0
 8005ccc:	4629      	mov	r1, r5
 8005cce:	4620      	mov	r0, r4
 8005cd0:	f7fa fa9e 	bl	8000210 <__aeabi_dsub>
 8005cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8005d84 <__kernel_cos+0x17c>)
 8005cd6:	4598      	cmp	r8, r3
 8005cd8:	4606      	mov	r6, r0
 8005cda:	460f      	mov	r7, r1
 8005cdc:	d810      	bhi.n	8005d00 <__kernel_cos+0xf8>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	4650      	mov	r0, sl
 8005ce4:	4659      	mov	r1, fp
 8005ce6:	f7fa fa93 	bl	8000210 <__aeabi_dsub>
 8005cea:	460b      	mov	r3, r1
 8005cec:	4926      	ldr	r1, [pc, #152]	@ (8005d88 <__kernel_cos+0x180>)
 8005cee:	4602      	mov	r2, r0
 8005cf0:	2000      	movs	r0, #0
 8005cf2:	f7fa fa8d 	bl	8000210 <__aeabi_dsub>
 8005cf6:	ec41 0b10 	vmov	d0, r0, r1
 8005cfa:	b003      	add	sp, #12
 8005cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d00:	4b22      	ldr	r3, [pc, #136]	@ (8005d8c <__kernel_cos+0x184>)
 8005d02:	4921      	ldr	r1, [pc, #132]	@ (8005d88 <__kernel_cos+0x180>)
 8005d04:	4598      	cmp	r8, r3
 8005d06:	bf8c      	ite	hi
 8005d08:	4d21      	ldrhi	r5, [pc, #132]	@ (8005d90 <__kernel_cos+0x188>)
 8005d0a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8005d0e:	2400      	movs	r4, #0
 8005d10:	4622      	mov	r2, r4
 8005d12:	462b      	mov	r3, r5
 8005d14:	2000      	movs	r0, #0
 8005d16:	f7fa fa7b 	bl	8000210 <__aeabi_dsub>
 8005d1a:	4622      	mov	r2, r4
 8005d1c:	4680      	mov	r8, r0
 8005d1e:	4689      	mov	r9, r1
 8005d20:	462b      	mov	r3, r5
 8005d22:	4650      	mov	r0, sl
 8005d24:	4659      	mov	r1, fp
 8005d26:	f7fa fa73 	bl	8000210 <__aeabi_dsub>
 8005d2a:	4632      	mov	r2, r6
 8005d2c:	463b      	mov	r3, r7
 8005d2e:	f7fa fa6f 	bl	8000210 <__aeabi_dsub>
 8005d32:	4602      	mov	r2, r0
 8005d34:	460b      	mov	r3, r1
 8005d36:	4640      	mov	r0, r8
 8005d38:	4649      	mov	r1, r9
 8005d3a:	e7da      	b.n	8005cf2 <__kernel_cos+0xea>
 8005d3c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8005d78 <__kernel_cos+0x170>
 8005d40:	e7db      	b.n	8005cfa <__kernel_cos+0xf2>
 8005d42:	bf00      	nop
 8005d44:	f3af 8000 	nop.w
 8005d48:	be8838d4 	.word	0xbe8838d4
 8005d4c:	bda8fae9 	.word	0xbda8fae9
 8005d50:	bdb4b1c4 	.word	0xbdb4b1c4
 8005d54:	3e21ee9e 	.word	0x3e21ee9e
 8005d58:	809c52ad 	.word	0x809c52ad
 8005d5c:	3e927e4f 	.word	0x3e927e4f
 8005d60:	19cb1590 	.word	0x19cb1590
 8005d64:	3efa01a0 	.word	0x3efa01a0
 8005d68:	16c15177 	.word	0x16c15177
 8005d6c:	3f56c16c 	.word	0x3f56c16c
 8005d70:	5555554c 	.word	0x5555554c
 8005d74:	3fa55555 	.word	0x3fa55555
 8005d78:	00000000 	.word	0x00000000
 8005d7c:	3ff00000 	.word	0x3ff00000
 8005d80:	3fe00000 	.word	0x3fe00000
 8005d84:	3fd33332 	.word	0x3fd33332
 8005d88:	3ff00000 	.word	0x3ff00000
 8005d8c:	3fe90000 	.word	0x3fe90000
 8005d90:	3fd20000 	.word	0x3fd20000
 8005d94:	00000000 	.word	0x00000000

08005d98 <__kernel_sin>:
 8005d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d9c:	ec55 4b10 	vmov	r4, r5, d0
 8005da0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8005da4:	b085      	sub	sp, #20
 8005da6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8005daa:	ed8d 1b02 	vstr	d1, [sp, #8]
 8005dae:	4680      	mov	r8, r0
 8005db0:	d205      	bcs.n	8005dbe <__kernel_sin+0x26>
 8005db2:	4620      	mov	r0, r4
 8005db4:	4629      	mov	r1, r5
 8005db6:	f7fa fe7d 	bl	8000ab4 <__aeabi_d2iz>
 8005dba:	2800      	cmp	r0, #0
 8005dbc:	d052      	beq.n	8005e64 <__kernel_sin+0xcc>
 8005dbe:	4622      	mov	r2, r4
 8005dc0:	462b      	mov	r3, r5
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	4629      	mov	r1, r5
 8005dc6:	f7fa fbdb 	bl	8000580 <__aeabi_dmul>
 8005dca:	4682      	mov	sl, r0
 8005dcc:	468b      	mov	fp, r1
 8005dce:	4602      	mov	r2, r0
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	4629      	mov	r1, r5
 8005dd6:	f7fa fbd3 	bl	8000580 <__aeabi_dmul>
 8005dda:	a342      	add	r3, pc, #264	@ (adr r3, 8005ee4 <__kernel_sin+0x14c>)
 8005ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de0:	e9cd 0100 	strd	r0, r1, [sp]
 8005de4:	4650      	mov	r0, sl
 8005de6:	4659      	mov	r1, fp
 8005de8:	f7fa fbca 	bl	8000580 <__aeabi_dmul>
 8005dec:	a33f      	add	r3, pc, #252	@ (adr r3, 8005eec <__kernel_sin+0x154>)
 8005dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df2:	f7fa fa0d 	bl	8000210 <__aeabi_dsub>
 8005df6:	4652      	mov	r2, sl
 8005df8:	465b      	mov	r3, fp
 8005dfa:	f7fa fbc1 	bl	8000580 <__aeabi_dmul>
 8005dfe:	a33d      	add	r3, pc, #244	@ (adr r3, 8005ef4 <__kernel_sin+0x15c>)
 8005e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e04:	f7fa fa06 	bl	8000214 <__adddf3>
 8005e08:	4652      	mov	r2, sl
 8005e0a:	465b      	mov	r3, fp
 8005e0c:	f7fa fbb8 	bl	8000580 <__aeabi_dmul>
 8005e10:	a33a      	add	r3, pc, #232	@ (adr r3, 8005efc <__kernel_sin+0x164>)
 8005e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e16:	f7fa f9fb 	bl	8000210 <__aeabi_dsub>
 8005e1a:	4652      	mov	r2, sl
 8005e1c:	465b      	mov	r3, fp
 8005e1e:	f7fa fbaf 	bl	8000580 <__aeabi_dmul>
 8005e22:	a338      	add	r3, pc, #224	@ (adr r3, 8005f04 <__kernel_sin+0x16c>)
 8005e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e28:	f7fa f9f4 	bl	8000214 <__adddf3>
 8005e2c:	4606      	mov	r6, r0
 8005e2e:	460f      	mov	r7, r1
 8005e30:	f1b8 0f00 	cmp.w	r8, #0
 8005e34:	d11b      	bne.n	8005e6e <__kernel_sin+0xd6>
 8005e36:	4602      	mov	r2, r0
 8005e38:	460b      	mov	r3, r1
 8005e3a:	4650      	mov	r0, sl
 8005e3c:	4659      	mov	r1, fp
 8005e3e:	f7fa fb9f 	bl	8000580 <__aeabi_dmul>
 8005e42:	a325      	add	r3, pc, #148	@ (adr r3, 8005ed8 <__kernel_sin+0x140>)
 8005e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e48:	f7fa f9e2 	bl	8000210 <__aeabi_dsub>
 8005e4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e50:	f7fa fb96 	bl	8000580 <__aeabi_dmul>
 8005e54:	4602      	mov	r2, r0
 8005e56:	460b      	mov	r3, r1
 8005e58:	4620      	mov	r0, r4
 8005e5a:	4629      	mov	r1, r5
 8005e5c:	f7fa f9da 	bl	8000214 <__adddf3>
 8005e60:	4604      	mov	r4, r0
 8005e62:	460d      	mov	r5, r1
 8005e64:	ec45 4b10 	vmov	d0, r4, r5
 8005e68:	b005      	add	sp, #20
 8005e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e72:	4b1b      	ldr	r3, [pc, #108]	@ (8005ee0 <__kernel_sin+0x148>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	f7fa fb83 	bl	8000580 <__aeabi_dmul>
 8005e7a:	4632      	mov	r2, r6
 8005e7c:	4680      	mov	r8, r0
 8005e7e:	4689      	mov	r9, r1
 8005e80:	463b      	mov	r3, r7
 8005e82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e86:	f7fa fb7b 	bl	8000580 <__aeabi_dmul>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	4640      	mov	r0, r8
 8005e90:	4649      	mov	r1, r9
 8005e92:	f7fa f9bd 	bl	8000210 <__aeabi_dsub>
 8005e96:	4652      	mov	r2, sl
 8005e98:	465b      	mov	r3, fp
 8005e9a:	f7fa fb71 	bl	8000580 <__aeabi_dmul>
 8005e9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ea2:	f7fa f9b5 	bl	8000210 <__aeabi_dsub>
 8005ea6:	a30c      	add	r3, pc, #48	@ (adr r3, 8005ed8 <__kernel_sin+0x140>)
 8005ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eac:	4606      	mov	r6, r0
 8005eae:	460f      	mov	r7, r1
 8005eb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005eb4:	f7fa fb64 	bl	8000580 <__aeabi_dmul>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	460b      	mov	r3, r1
 8005ebc:	4630      	mov	r0, r6
 8005ebe:	4639      	mov	r1, r7
 8005ec0:	f7fa f9a8 	bl	8000214 <__adddf3>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	4620      	mov	r0, r4
 8005eca:	4629      	mov	r1, r5
 8005ecc:	f7fa f9a0 	bl	8000210 <__aeabi_dsub>
 8005ed0:	e7c6      	b.n	8005e60 <__kernel_sin+0xc8>
 8005ed2:	bf00      	nop
 8005ed4:	f3af 8000 	nop.w
 8005ed8:	55555549 	.word	0x55555549
 8005edc:	3fc55555 	.word	0x3fc55555
 8005ee0:	3fe00000 	.word	0x3fe00000
 8005ee4:	5acfd57c 	.word	0x5acfd57c
 8005ee8:	3de5d93a 	.word	0x3de5d93a
 8005eec:	8a2b9ceb 	.word	0x8a2b9ceb
 8005ef0:	3e5ae5e6 	.word	0x3e5ae5e6
 8005ef4:	57b1fe7d 	.word	0x57b1fe7d
 8005ef8:	3ec71de3 	.word	0x3ec71de3
 8005efc:	19c161d5 	.word	0x19c161d5
 8005f00:	3f2a01a0 	.word	0x3f2a01a0
 8005f04:	1110f8a6 	.word	0x1110f8a6
 8005f08:	3f811111 	.word	0x3f811111

08005f0c <fabs>:
 8005f0c:	ec51 0b10 	vmov	r0, r1, d0
 8005f10:	4602      	mov	r2, r0
 8005f12:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005f16:	ec43 2b10 	vmov	d0, r2, r3
 8005f1a:	4770      	bx	lr
 8005f1c:	0000      	movs	r0, r0
	...

08005f20 <scalbn>:
 8005f20:	b570      	push	{r4, r5, r6, lr}
 8005f22:	ec55 4b10 	vmov	r4, r5, d0
 8005f26:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8005f2a:	4606      	mov	r6, r0
 8005f2c:	462b      	mov	r3, r5
 8005f2e:	b991      	cbnz	r1, 8005f56 <scalbn+0x36>
 8005f30:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8005f34:	4323      	orrs	r3, r4
 8005f36:	d03d      	beq.n	8005fb4 <scalbn+0x94>
 8005f38:	4b35      	ldr	r3, [pc, #212]	@ (8006010 <scalbn+0xf0>)
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	4629      	mov	r1, r5
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f7fa fb1e 	bl	8000580 <__aeabi_dmul>
 8005f44:	4b33      	ldr	r3, [pc, #204]	@ (8006014 <scalbn+0xf4>)
 8005f46:	429e      	cmp	r6, r3
 8005f48:	4604      	mov	r4, r0
 8005f4a:	460d      	mov	r5, r1
 8005f4c:	da0f      	bge.n	8005f6e <scalbn+0x4e>
 8005f4e:	a328      	add	r3, pc, #160	@ (adr r3, 8005ff0 <scalbn+0xd0>)
 8005f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f54:	e01e      	b.n	8005f94 <scalbn+0x74>
 8005f56:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8005f5a:	4291      	cmp	r1, r2
 8005f5c:	d10b      	bne.n	8005f76 <scalbn+0x56>
 8005f5e:	4622      	mov	r2, r4
 8005f60:	4620      	mov	r0, r4
 8005f62:	4629      	mov	r1, r5
 8005f64:	f7fa f956 	bl	8000214 <__adddf3>
 8005f68:	4604      	mov	r4, r0
 8005f6a:	460d      	mov	r5, r1
 8005f6c:	e022      	b.n	8005fb4 <scalbn+0x94>
 8005f6e:	460b      	mov	r3, r1
 8005f70:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005f74:	3936      	subs	r1, #54	@ 0x36
 8005f76:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8005f7a:	4296      	cmp	r6, r2
 8005f7c:	dd0d      	ble.n	8005f9a <scalbn+0x7a>
 8005f7e:	2d00      	cmp	r5, #0
 8005f80:	a11d      	add	r1, pc, #116	@ (adr r1, 8005ff8 <scalbn+0xd8>)
 8005f82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f86:	da02      	bge.n	8005f8e <scalbn+0x6e>
 8005f88:	a11d      	add	r1, pc, #116	@ (adr r1, 8006000 <scalbn+0xe0>)
 8005f8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f8e:	a31a      	add	r3, pc, #104	@ (adr r3, 8005ff8 <scalbn+0xd8>)
 8005f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f94:	f7fa faf4 	bl	8000580 <__aeabi_dmul>
 8005f98:	e7e6      	b.n	8005f68 <scalbn+0x48>
 8005f9a:	1872      	adds	r2, r6, r1
 8005f9c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8005fa0:	428a      	cmp	r2, r1
 8005fa2:	dcec      	bgt.n	8005f7e <scalbn+0x5e>
 8005fa4:	2a00      	cmp	r2, #0
 8005fa6:	dd08      	ble.n	8005fba <scalbn+0x9a>
 8005fa8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005fac:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005fb0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005fb4:	ec45 4b10 	vmov	d0, r4, r5
 8005fb8:	bd70      	pop	{r4, r5, r6, pc}
 8005fba:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8005fbe:	da08      	bge.n	8005fd2 <scalbn+0xb2>
 8005fc0:	2d00      	cmp	r5, #0
 8005fc2:	a10b      	add	r1, pc, #44	@ (adr r1, 8005ff0 <scalbn+0xd0>)
 8005fc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fc8:	dac1      	bge.n	8005f4e <scalbn+0x2e>
 8005fca:	a10f      	add	r1, pc, #60	@ (adr r1, 8006008 <scalbn+0xe8>)
 8005fcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fd0:	e7bd      	b.n	8005f4e <scalbn+0x2e>
 8005fd2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005fd6:	3236      	adds	r2, #54	@ 0x36
 8005fd8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005fdc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8006018 <scalbn+0xf8>)
 8005fe4:	4629      	mov	r1, r5
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	e7d4      	b.n	8005f94 <scalbn+0x74>
 8005fea:	bf00      	nop
 8005fec:	f3af 8000 	nop.w
 8005ff0:	c2f8f359 	.word	0xc2f8f359
 8005ff4:	01a56e1f 	.word	0x01a56e1f
 8005ff8:	8800759c 	.word	0x8800759c
 8005ffc:	7e37e43c 	.word	0x7e37e43c
 8006000:	8800759c 	.word	0x8800759c
 8006004:	fe37e43c 	.word	0xfe37e43c
 8006008:	c2f8f359 	.word	0xc2f8f359
 800600c:	81a56e1f 	.word	0x81a56e1f
 8006010:	43500000 	.word	0x43500000
 8006014:	ffff3cb0 	.word	0xffff3cb0
 8006018:	3c900000 	.word	0x3c900000
 800601c:	00000000 	.word	0x00000000

08006020 <floor>:
 8006020:	ec51 0b10 	vmov	r0, r1, d0
 8006024:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800602c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8006030:	2e13      	cmp	r6, #19
 8006032:	460c      	mov	r4, r1
 8006034:	4605      	mov	r5, r0
 8006036:	4680      	mov	r8, r0
 8006038:	dc34      	bgt.n	80060a4 <floor+0x84>
 800603a:	2e00      	cmp	r6, #0
 800603c:	da17      	bge.n	800606e <floor+0x4e>
 800603e:	a332      	add	r3, pc, #200	@ (adr r3, 8006108 <floor+0xe8>)
 8006040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006044:	f7fa f8e6 	bl	8000214 <__adddf3>
 8006048:	2200      	movs	r2, #0
 800604a:	2300      	movs	r3, #0
 800604c:	f7fa fd28 	bl	8000aa0 <__aeabi_dcmpgt>
 8006050:	b150      	cbz	r0, 8006068 <floor+0x48>
 8006052:	2c00      	cmp	r4, #0
 8006054:	da55      	bge.n	8006102 <floor+0xe2>
 8006056:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800605a:	432c      	orrs	r4, r5
 800605c:	2500      	movs	r5, #0
 800605e:	42ac      	cmp	r4, r5
 8006060:	4c2b      	ldr	r4, [pc, #172]	@ (8006110 <floor+0xf0>)
 8006062:	bf08      	it	eq
 8006064:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8006068:	4621      	mov	r1, r4
 800606a:	4628      	mov	r0, r5
 800606c:	e023      	b.n	80060b6 <floor+0x96>
 800606e:	4f29      	ldr	r7, [pc, #164]	@ (8006114 <floor+0xf4>)
 8006070:	4137      	asrs	r7, r6
 8006072:	ea01 0307 	and.w	r3, r1, r7
 8006076:	4303      	orrs	r3, r0
 8006078:	d01d      	beq.n	80060b6 <floor+0x96>
 800607a:	a323      	add	r3, pc, #140	@ (adr r3, 8006108 <floor+0xe8>)
 800607c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006080:	f7fa f8c8 	bl	8000214 <__adddf3>
 8006084:	2200      	movs	r2, #0
 8006086:	2300      	movs	r3, #0
 8006088:	f7fa fd0a 	bl	8000aa0 <__aeabi_dcmpgt>
 800608c:	2800      	cmp	r0, #0
 800608e:	d0eb      	beq.n	8006068 <floor+0x48>
 8006090:	2c00      	cmp	r4, #0
 8006092:	bfbe      	ittt	lt
 8006094:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8006098:	4133      	asrlt	r3, r6
 800609a:	18e4      	addlt	r4, r4, r3
 800609c:	ea24 0407 	bic.w	r4, r4, r7
 80060a0:	2500      	movs	r5, #0
 80060a2:	e7e1      	b.n	8006068 <floor+0x48>
 80060a4:	2e33      	cmp	r6, #51	@ 0x33
 80060a6:	dd0a      	ble.n	80060be <floor+0x9e>
 80060a8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80060ac:	d103      	bne.n	80060b6 <floor+0x96>
 80060ae:	4602      	mov	r2, r0
 80060b0:	460b      	mov	r3, r1
 80060b2:	f7fa f8af 	bl	8000214 <__adddf3>
 80060b6:	ec41 0b10 	vmov	d0, r0, r1
 80060ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060be:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80060c2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80060c6:	40df      	lsrs	r7, r3
 80060c8:	4207      	tst	r7, r0
 80060ca:	d0f4      	beq.n	80060b6 <floor+0x96>
 80060cc:	a30e      	add	r3, pc, #56	@ (adr r3, 8006108 <floor+0xe8>)
 80060ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d2:	f7fa f89f 	bl	8000214 <__adddf3>
 80060d6:	2200      	movs	r2, #0
 80060d8:	2300      	movs	r3, #0
 80060da:	f7fa fce1 	bl	8000aa0 <__aeabi_dcmpgt>
 80060de:	2800      	cmp	r0, #0
 80060e0:	d0c2      	beq.n	8006068 <floor+0x48>
 80060e2:	2c00      	cmp	r4, #0
 80060e4:	da0a      	bge.n	80060fc <floor+0xdc>
 80060e6:	2e14      	cmp	r6, #20
 80060e8:	d101      	bne.n	80060ee <floor+0xce>
 80060ea:	3401      	adds	r4, #1
 80060ec:	e006      	b.n	80060fc <floor+0xdc>
 80060ee:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80060f2:	2301      	movs	r3, #1
 80060f4:	40b3      	lsls	r3, r6
 80060f6:	441d      	add	r5, r3
 80060f8:	4545      	cmp	r5, r8
 80060fa:	d3f6      	bcc.n	80060ea <floor+0xca>
 80060fc:	ea25 0507 	bic.w	r5, r5, r7
 8006100:	e7b2      	b.n	8006068 <floor+0x48>
 8006102:	2500      	movs	r5, #0
 8006104:	462c      	mov	r4, r5
 8006106:	e7af      	b.n	8006068 <floor+0x48>
 8006108:	8800759c 	.word	0x8800759c
 800610c:	7e37e43c 	.word	0x7e37e43c
 8006110:	bff00000 	.word	0xbff00000
 8006114:	000fffff 	.word	0x000fffff

08006118 <_init>:
 8006118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800611a:	bf00      	nop
 800611c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800611e:	bc08      	pop	{r3}
 8006120:	469e      	mov	lr, r3
 8006122:	4770      	bx	lr

08006124 <_fini>:
 8006124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006126:	bf00      	nop
 8006128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800612a:	bc08      	pop	{r3}
 800612c:	469e      	mov	lr, r3
 800612e:	4770      	bx	lr
