
Lab 3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052f8  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  080054c0  080054c0  000064c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056b0  080056b0  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  080056b0  080056b0  000066b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056b8  080056b8  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056b8  080056b8  000066b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080056bc  080056bc  000066bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080056c0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  2000000c  080056cc  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  080056cc  0000712c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e619  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002014  00000000  00000000  00015655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  00017670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a9b  00000000  00000000  000183f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021582  00000000  00000000  00018e93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb11  00000000  00000000  0003a415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce948  00000000  00000000  00049f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011886e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d04  00000000  00000000  001188b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0011c5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080054a8 	.word	0x080054a8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080054a8 	.word	0x080054a8

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_uldivmod>:
 8000b44:	b953      	cbnz	r3, 8000b5c <__aeabi_uldivmod+0x18>
 8000b46:	b94a      	cbnz	r2, 8000b5c <__aeabi_uldivmod+0x18>
 8000b48:	2900      	cmp	r1, #0
 8000b4a:	bf08      	it	eq
 8000b4c:	2800      	cmpeq	r0, #0
 8000b4e:	bf1c      	itt	ne
 8000b50:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b54:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b58:	f000 b96a 	b.w	8000e30 <__aeabi_idiv0>
 8000b5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b64:	f000 f806 	bl	8000b74 <__udivmoddi4>
 8000b68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b70:	b004      	add	sp, #16
 8000b72:	4770      	bx	lr

08000b74 <__udivmoddi4>:
 8000b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b78:	9d08      	ldr	r5, [sp, #32]
 8000b7a:	460c      	mov	r4, r1
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d14e      	bne.n	8000c1e <__udivmoddi4+0xaa>
 8000b80:	4694      	mov	ip, r2
 8000b82:	458c      	cmp	ip, r1
 8000b84:	4686      	mov	lr, r0
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	d962      	bls.n	8000c52 <__udivmoddi4+0xde>
 8000b8c:	b14a      	cbz	r2, 8000ba2 <__udivmoddi4+0x2e>
 8000b8e:	f1c2 0320 	rsb	r3, r2, #32
 8000b92:	4091      	lsls	r1, r2
 8000b94:	fa20 f303 	lsr.w	r3, r0, r3
 8000b98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b9c:	4319      	orrs	r1, r3
 8000b9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ba2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba6:	fa1f f68c 	uxth.w	r6, ip
 8000baa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bb2:	fb07 1114 	mls	r1, r7, r4, r1
 8000bb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bba:	fb04 f106 	mul.w	r1, r4, r6
 8000bbe:	4299      	cmp	r1, r3
 8000bc0:	d90a      	bls.n	8000bd8 <__udivmoddi4+0x64>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000bca:	f080 8112 	bcs.w	8000df2 <__udivmoddi4+0x27e>
 8000bce:	4299      	cmp	r1, r3
 8000bd0:	f240 810f 	bls.w	8000df2 <__udivmoddi4+0x27e>
 8000bd4:	3c02      	subs	r4, #2
 8000bd6:	4463      	add	r3, ip
 8000bd8:	1a59      	subs	r1, r3, r1
 8000bda:	fa1f f38e 	uxth.w	r3, lr
 8000bde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be2:	fb07 1110 	mls	r1, r7, r0, r1
 8000be6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bea:	fb00 f606 	mul.w	r6, r0, r6
 8000bee:	429e      	cmp	r6, r3
 8000bf0:	d90a      	bls.n	8000c08 <__udivmoddi4+0x94>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000bfa:	f080 80fc 	bcs.w	8000df6 <__udivmoddi4+0x282>
 8000bfe:	429e      	cmp	r6, r3
 8000c00:	f240 80f9 	bls.w	8000df6 <__udivmoddi4+0x282>
 8000c04:	4463      	add	r3, ip
 8000c06:	3802      	subs	r0, #2
 8000c08:	1b9b      	subs	r3, r3, r6
 8000c0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c0e:	2100      	movs	r1, #0
 8000c10:	b11d      	cbz	r5, 8000c1a <__udivmoddi4+0xa6>
 8000c12:	40d3      	lsrs	r3, r2
 8000c14:	2200      	movs	r2, #0
 8000c16:	e9c5 3200 	strd	r3, r2, [r5]
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	428b      	cmp	r3, r1
 8000c20:	d905      	bls.n	8000c2e <__udivmoddi4+0xba>
 8000c22:	b10d      	cbz	r5, 8000c28 <__udivmoddi4+0xb4>
 8000c24:	e9c5 0100 	strd	r0, r1, [r5]
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4608      	mov	r0, r1
 8000c2c:	e7f5      	b.n	8000c1a <__udivmoddi4+0xa6>
 8000c2e:	fab3 f183 	clz	r1, r3
 8000c32:	2900      	cmp	r1, #0
 8000c34:	d146      	bne.n	8000cc4 <__udivmoddi4+0x150>
 8000c36:	42a3      	cmp	r3, r4
 8000c38:	d302      	bcc.n	8000c40 <__udivmoddi4+0xcc>
 8000c3a:	4290      	cmp	r0, r2
 8000c3c:	f0c0 80f0 	bcc.w	8000e20 <__udivmoddi4+0x2ac>
 8000c40:	1a86      	subs	r6, r0, r2
 8000c42:	eb64 0303 	sbc.w	r3, r4, r3
 8000c46:	2001      	movs	r0, #1
 8000c48:	2d00      	cmp	r5, #0
 8000c4a:	d0e6      	beq.n	8000c1a <__udivmoddi4+0xa6>
 8000c4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c50:	e7e3      	b.n	8000c1a <__udivmoddi4+0xa6>
 8000c52:	2a00      	cmp	r2, #0
 8000c54:	f040 8090 	bne.w	8000d78 <__udivmoddi4+0x204>
 8000c58:	eba1 040c 	sub.w	r4, r1, ip
 8000c5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c60:	fa1f f78c 	uxth.w	r7, ip
 8000c64:	2101      	movs	r1, #1
 8000c66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c76:	fb07 f006 	mul.w	r0, r7, r6
 8000c7a:	4298      	cmp	r0, r3
 8000c7c:	d908      	bls.n	8000c90 <__udivmoddi4+0x11c>
 8000c7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c82:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0x11a>
 8000c88:	4298      	cmp	r0, r3
 8000c8a:	f200 80cd 	bhi.w	8000e28 <__udivmoddi4+0x2b4>
 8000c8e:	4626      	mov	r6, r4
 8000c90:	1a1c      	subs	r4, r3, r0
 8000c92:	fa1f f38e 	uxth.w	r3, lr
 8000c96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ca2:	fb00 f707 	mul.w	r7, r0, r7
 8000ca6:	429f      	cmp	r7, r3
 8000ca8:	d908      	bls.n	8000cbc <__udivmoddi4+0x148>
 8000caa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cae:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x146>
 8000cb4:	429f      	cmp	r7, r3
 8000cb6:	f200 80b0 	bhi.w	8000e1a <__udivmoddi4+0x2a6>
 8000cba:	4620      	mov	r0, r4
 8000cbc:	1bdb      	subs	r3, r3, r7
 8000cbe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cc2:	e7a5      	b.n	8000c10 <__udivmoddi4+0x9c>
 8000cc4:	f1c1 0620 	rsb	r6, r1, #32
 8000cc8:	408b      	lsls	r3, r1
 8000cca:	fa22 f706 	lsr.w	r7, r2, r6
 8000cce:	431f      	orrs	r7, r3
 8000cd0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cd4:	fa04 f301 	lsl.w	r3, r4, r1
 8000cd8:	ea43 030c 	orr.w	r3, r3, ip
 8000cdc:	40f4      	lsrs	r4, r6
 8000cde:	fa00 f801 	lsl.w	r8, r0, r1
 8000ce2:	0c38      	lsrs	r0, r7, #16
 8000ce4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ce8:	fbb4 fef0 	udiv	lr, r4, r0
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fb00 441e 	mls	r4, r0, lr, r4
 8000cf4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cf8:	fb0e f90c 	mul.w	r9, lr, ip
 8000cfc:	45a1      	cmp	r9, r4
 8000cfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x1a6>
 8000d04:	193c      	adds	r4, r7, r4
 8000d06:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d0a:	f080 8084 	bcs.w	8000e16 <__udivmoddi4+0x2a2>
 8000d0e:	45a1      	cmp	r9, r4
 8000d10:	f240 8081 	bls.w	8000e16 <__udivmoddi4+0x2a2>
 8000d14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d18:	443c      	add	r4, r7
 8000d1a:	eba4 0409 	sub.w	r4, r4, r9
 8000d1e:	fa1f f983 	uxth.w	r9, r3
 8000d22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d26:	fb00 4413 	mls	r4, r0, r3, r4
 8000d2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d32:	45a4      	cmp	ip, r4
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x1d2>
 8000d36:	193c      	adds	r4, r7, r4
 8000d38:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000d3c:	d267      	bcs.n	8000e0e <__udivmoddi4+0x29a>
 8000d3e:	45a4      	cmp	ip, r4
 8000d40:	d965      	bls.n	8000e0e <__udivmoddi4+0x29a>
 8000d42:	3b02      	subs	r3, #2
 8000d44:	443c      	add	r4, r7
 8000d46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d4e:	eba4 040c 	sub.w	r4, r4, ip
 8000d52:	429c      	cmp	r4, r3
 8000d54:	46ce      	mov	lr, r9
 8000d56:	469c      	mov	ip, r3
 8000d58:	d351      	bcc.n	8000dfe <__udivmoddi4+0x28a>
 8000d5a:	d04e      	beq.n	8000dfa <__udivmoddi4+0x286>
 8000d5c:	b155      	cbz	r5, 8000d74 <__udivmoddi4+0x200>
 8000d5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d62:	eb64 040c 	sbc.w	r4, r4, ip
 8000d66:	fa04 f606 	lsl.w	r6, r4, r6
 8000d6a:	40cb      	lsrs	r3, r1
 8000d6c:	431e      	orrs	r6, r3
 8000d6e:	40cc      	lsrs	r4, r1
 8000d70:	e9c5 6400 	strd	r6, r4, [r5]
 8000d74:	2100      	movs	r1, #0
 8000d76:	e750      	b.n	8000c1a <__udivmoddi4+0xa6>
 8000d78:	f1c2 0320 	rsb	r3, r2, #32
 8000d7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d84:	fa24 f303 	lsr.w	r3, r4, r3
 8000d88:	4094      	lsls	r4, r2
 8000d8a:	430c      	orrs	r4, r1
 8000d8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d94:	fa1f f78c 	uxth.w	r7, ip
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da6:	fb00 f107 	mul.w	r1, r0, r7
 8000daa:	4299      	cmp	r1, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x24c>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000db6:	d22c      	bcs.n	8000e12 <__udivmoddi4+0x29e>
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d92a      	bls.n	8000e12 <__udivmoddi4+0x29e>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	4463      	add	r3, ip
 8000dc0:	1a5b      	subs	r3, r3, r1
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000dcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd0:	fb01 f307 	mul.w	r3, r1, r7
 8000dd4:	42a3      	cmp	r3, r4
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x276>
 8000dd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ddc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000de0:	d213      	bcs.n	8000e0a <__udivmoddi4+0x296>
 8000de2:	42a3      	cmp	r3, r4
 8000de4:	d911      	bls.n	8000e0a <__udivmoddi4+0x296>
 8000de6:	3902      	subs	r1, #2
 8000de8:	4464      	add	r4, ip
 8000dea:	1ae4      	subs	r4, r4, r3
 8000dec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000df0:	e739      	b.n	8000c66 <__udivmoddi4+0xf2>
 8000df2:	4604      	mov	r4, r0
 8000df4:	e6f0      	b.n	8000bd8 <__udivmoddi4+0x64>
 8000df6:	4608      	mov	r0, r1
 8000df8:	e706      	b.n	8000c08 <__udivmoddi4+0x94>
 8000dfa:	45c8      	cmp	r8, r9
 8000dfc:	d2ae      	bcs.n	8000d5c <__udivmoddi4+0x1e8>
 8000dfe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e02:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e06:	3801      	subs	r0, #1
 8000e08:	e7a8      	b.n	8000d5c <__udivmoddi4+0x1e8>
 8000e0a:	4631      	mov	r1, r6
 8000e0c:	e7ed      	b.n	8000dea <__udivmoddi4+0x276>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	e799      	b.n	8000d46 <__udivmoddi4+0x1d2>
 8000e12:	4630      	mov	r0, r6
 8000e14:	e7d4      	b.n	8000dc0 <__udivmoddi4+0x24c>
 8000e16:	46d6      	mov	lr, sl
 8000e18:	e77f      	b.n	8000d1a <__udivmoddi4+0x1a6>
 8000e1a:	4463      	add	r3, ip
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	e74d      	b.n	8000cbc <__udivmoddi4+0x148>
 8000e20:	4606      	mov	r6, r0
 8000e22:	4623      	mov	r3, r4
 8000e24:	4608      	mov	r0, r1
 8000e26:	e70f      	b.n	8000c48 <__udivmoddi4+0xd4>
 8000e28:	3e02      	subs	r6, #2
 8000e2a:	4463      	add	r3, ip
 8000e2c:	e730      	b.n	8000c90 <__udivmoddi4+0x11c>
 8000e2e:	bf00      	nop

08000e30 <__aeabi_idiv0>:
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop

08000e34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{ 
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  freq = 10;
 8000e38:	4b11      	ldr	r3, [pc, #68]	@ (8000e80 <main+0x4c>)
 8000e3a:	220a      	movs	r2, #10
 8000e3c:	601a      	str	r2, [r3, #0]
  val = 1 * 1000;
 8000e3e:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <main+0x50>)
 8000e40:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e44:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e46:	f000 fc41 	bl	80016cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e4a:	f000 f825 	bl	8000e98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e4e:	f000 f959 	bl	8001104 <MX_GPIO_Init>
  MX_DAC_Init();
 8000e52:	f000 f88d 	bl	8000f70 <MX_DAC_Init>
  MX_USART1_UART_Init();
 8000e56:	f000 f901 	bl	800105c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000e5a:	f000 f8b3 	bl	8000fc4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000e5e:	f000 f927 	bl	80010b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000e62:	2100      	movs	r1, #0
 8000e64:	4808      	ldr	r0, [pc, #32]	@ (8000e88 <main+0x54>)
 8000e66:	f000 fdd6 	bl	8001a16 <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000e6a:	4808      	ldr	r0, [pc, #32]	@ (8000e8c <main+0x58>)
 8000e6c:	f001 ff26 	bl	8002cbc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart2, &buffer, RX_BUFFER_SIZE);
 8000e70:	2204      	movs	r2, #4
 8000e72:	4907      	ldr	r1, [pc, #28]	@ (8000e90 <main+0x5c>)
 8000e74:	4807      	ldr	r0, [pc, #28]	@ (8000e94 <main+0x60>)
 8000e76:	f002 fb97 	bl	80035a8 <HAL_UART_Receive_IT>
  while (1)
 8000e7a:	bf00      	nop
 8000e7c:	e7fd      	b.n	8000e7a <main+0x46>
 8000e7e:	bf00      	nop
 8000e80:	20000118 	.word	0x20000118
 8000e84:	2000011c 	.word	0x2000011c
 8000e88:	2000002c 	.word	0x2000002c
 8000e8c:	20000040 	.word	0x20000040
 8000e90:	20000124 	.word	0x20000124
 8000e94:	200000d0 	.word	0x200000d0

08000e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b094      	sub	sp, #80	@ 0x50
 8000e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	2234      	movs	r2, #52	@ 0x34
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f003 faa2 	bl	80043f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eac:	f107 0308 	add.w	r3, r7, #8
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	4b29      	ldr	r3, [pc, #164]	@ (8000f68 <SystemClock_Config+0xd0>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec4:	4a28      	ldr	r2, [pc, #160]	@ (8000f68 <SystemClock_Config+0xd0>)
 8000ec6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eca:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ecc:	4b26      	ldr	r3, [pc, #152]	@ (8000f68 <SystemClock_Config+0xd0>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ed8:	2300      	movs	r3, #0
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	4b23      	ldr	r3, [pc, #140]	@ (8000f6c <SystemClock_Config+0xd4>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a22      	ldr	r2, [pc, #136]	@ (8000f6c <SystemClock_Config+0xd4>)
 8000ee2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ee6:	6013      	str	r3, [r2, #0]
 8000ee8:	4b20      	ldr	r3, [pc, #128]	@ (8000f6c <SystemClock_Config+0xd4>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ef0:	603b      	str	r3, [r7, #0]
 8000ef2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ef8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000efc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efe:	2302      	movs	r3, #2
 8000f00:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f02:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f06:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f08:	2304      	movs	r3, #4
 8000f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000f0c:	23a0      	movs	r3, #160	@ 0xa0
 8000f0e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f10:	2302      	movs	r3, #2
 8000f12:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f14:	2302      	movs	r3, #2
 8000f16:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f1c:	f107 031c 	add.w	r3, r7, #28
 8000f20:	4618      	mov	r0, r3
 8000f22:	f001 fbdd 	bl	80026e0 <HAL_RCC_OscConfig>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f2c:	f000 fa20 	bl	8001370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f30:	230f      	movs	r3, #15
 8000f32:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f34:	2302      	movs	r3, #2
 8000f36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f3c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f40:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f46:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f48:	f107 0308 	add.w	r3, r7, #8
 8000f4c:	2105      	movs	r1, #5
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f001 f87c 	bl	800204c <HAL_RCC_ClockConfig>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000f5a:	f000 fa09 	bl	8001370 <Error_Handler>
  }
}
 8000f5e:	bf00      	nop
 8000f60:	3750      	adds	r7, #80	@ 0x50
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40007000 	.word	0x40007000

08000f70 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f76:	463b      	mov	r3, r7
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <MX_DAC_Init+0x4c>)
 8000f80:	4a0f      	ldr	r2, [pc, #60]	@ (8000fc0 <MX_DAC_Init+0x50>)
 8000f82:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000f84:	480d      	ldr	r0, [pc, #52]	@ (8000fbc <MX_DAC_Init+0x4c>)
 8000f86:	f000 fd24 	bl	80019d2 <HAL_DAC_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000f90:	f000 f9ee 	bl	8001370 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4806      	ldr	r0, [pc, #24]	@ (8000fbc <MX_DAC_Init+0x4c>)
 8000fa4:	f000 fdb8 	bl	8001b18 <HAL_DAC_ConfigChannel>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000fae:	f000 f9df 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	2000002c 	.word	0x2000002c
 8000fc0:	40007400 	.word	0x40007400

08000fc4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fca:	f107 0308 	add.w	r3, r7, #8
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd8:	463b      	mov	r3, r7
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8001058 <MX_TIM2_Init+0x94>)
 8000fe2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fe6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8001058 <MX_TIM2_Init+0x94>)
 8000fea:	224f      	movs	r2, #79	@ 0x4f
 8000fec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fee:	4b1a      	ldr	r3, [pc, #104]	@ (8001058 <MX_TIM2_Init+0x94>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000ff4:	4b18      	ldr	r3, [pc, #96]	@ (8001058 <MX_TIM2_Init+0x94>)
 8000ff6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ffa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffc:	4b16      	ldr	r3, [pc, #88]	@ (8001058 <MX_TIM2_Init+0x94>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001002:	4b15      	ldr	r3, [pc, #84]	@ (8001058 <MX_TIM2_Init+0x94>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001008:	4813      	ldr	r0, [pc, #76]	@ (8001058 <MX_TIM2_Init+0x94>)
 800100a:	f001 fe07 	bl	8002c1c <HAL_TIM_Base_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001014:	f000 f9ac 	bl	8001370 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001018:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800101c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800101e:	f107 0308 	add.w	r3, r7, #8
 8001022:	4619      	mov	r1, r3
 8001024:	480c      	ldr	r0, [pc, #48]	@ (8001058 <MX_TIM2_Init+0x94>)
 8001026:	f001 ffa9 	bl	8002f7c <HAL_TIM_ConfigClockSource>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001030:	f000 f99e 	bl	8001370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001034:	2300      	movs	r3, #0
 8001036:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001038:	2300      	movs	r3, #0
 800103a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800103c:	463b      	mov	r3, r7
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	@ (8001058 <MX_TIM2_Init+0x94>)
 8001042:	f002 f9d1 	bl	80033e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800104c:	f000 f990 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000040 	.word	0x20000040

0800105c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001060:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <MX_USART1_UART_Init+0x4c>)
 8001062:	4a12      	ldr	r2, [pc, #72]	@ (80010ac <MX_USART1_UART_Init+0x50>)
 8001064:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001066:	4b10      	ldr	r3, [pc, #64]	@ (80010a8 <MX_USART1_UART_Init+0x4c>)
 8001068:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800106c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800106e:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <MX_USART1_UART_Init+0x4c>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001074:	4b0c      	ldr	r3, [pc, #48]	@ (80010a8 <MX_USART1_UART_Init+0x4c>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800107a:	4b0b      	ldr	r3, [pc, #44]	@ (80010a8 <MX_USART1_UART_Init+0x4c>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001080:	4b09      	ldr	r3, [pc, #36]	@ (80010a8 <MX_USART1_UART_Init+0x4c>)
 8001082:	220c      	movs	r2, #12
 8001084:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001086:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <MX_USART1_UART_Init+0x4c>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800108c:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <MX_USART1_UART_Init+0x4c>)
 800108e:	2200      	movs	r2, #0
 8001090:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001092:	4805      	ldr	r0, [pc, #20]	@ (80010a8 <MX_USART1_UART_Init+0x4c>)
 8001094:	f002 fa38 	bl	8003508 <HAL_UART_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800109e:	f000 f967 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000088 	.word	0x20000088
 80010ac:	40011000 	.word	0x40011000

080010b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010b4:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <MX_USART2_UART_Init+0x4c>)
 80010b6:	4a12      	ldr	r2, [pc, #72]	@ (8001100 <MX_USART2_UART_Init+0x50>)
 80010b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010ba:	4b10      	ldr	r3, [pc, #64]	@ (80010fc <MX_USART2_UART_Init+0x4c>)
 80010bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	@ (80010fc <MX_USART2_UART_Init+0x4c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010c8:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <MX_USART2_UART_Init+0x4c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ce:	4b0b      	ldr	r3, [pc, #44]	@ (80010fc <MX_USART2_UART_Init+0x4c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010d4:	4b09      	ldr	r3, [pc, #36]	@ (80010fc <MX_USART2_UART_Init+0x4c>)
 80010d6:	220c      	movs	r2, #12
 80010d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010da:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <MX_USART2_UART_Init+0x4c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e0:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <MX_USART2_UART_Init+0x4c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010e6:	4805      	ldr	r0, [pc, #20]	@ (80010fc <MX_USART2_UART_Init+0x4c>)
 80010e8:	f002 fa0e 	bl	8003508 <HAL_UART_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010f2:	f000 f93d 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200000d0 	.word	0x200000d0
 8001100:	40004400 	.word	0x40004400

08001104 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	4b1f      	ldr	r3, [pc, #124]	@ (800119c <MX_GPIO_Init+0x98>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	4a1e      	ldr	r2, [pc, #120]	@ (800119c <MX_GPIO_Init+0x98>)
 8001124:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001128:	6313      	str	r3, [r2, #48]	@ 0x30
 800112a:	4b1c      	ldr	r3, [pc, #112]	@ (800119c <MX_GPIO_Init+0x98>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	4b18      	ldr	r3, [pc, #96]	@ (800119c <MX_GPIO_Init+0x98>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	4a17      	ldr	r2, [pc, #92]	@ (800119c <MX_GPIO_Init+0x98>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6313      	str	r3, [r2, #48]	@ 0x30
 8001146:	4b15      	ldr	r3, [pc, #84]	@ (800119c <MX_GPIO_Init+0x98>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	603b      	str	r3, [r7, #0]
 8001156:	4b11      	ldr	r3, [pc, #68]	@ (800119c <MX_GPIO_Init+0x98>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	4a10      	ldr	r2, [pc, #64]	@ (800119c <MX_GPIO_Init+0x98>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	6313      	str	r3, [r2, #48]	@ 0x30
 8001162:	4b0e      	ldr	r3, [pc, #56]	@ (800119c <MX_GPIO_Init+0x98>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	603b      	str	r3, [r7, #0]
 800116c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	2110      	movs	r1, #16
 8001172:	480b      	ldr	r0, [pc, #44]	@ (80011a0 <MX_GPIO_Init+0x9c>)
 8001174:	f000 ff50 	bl	8002018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001178:	2310      	movs	r3, #16
 800117a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117c:	2301      	movs	r3, #1
 800117e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	4619      	mov	r1, r3
 800118e:	4804      	ldr	r0, [pc, #16]	@ (80011a0 <MX_GPIO_Init+0x9c>)
 8001190:	f000 fdae 	bl	8001cf0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001194:	bf00      	nop
 8001196:	3720      	adds	r7, #32
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40023800 	.word	0x40023800
 80011a0:	40020800 	.word	0x40020800

080011a4 <processCommand>:

/* USER CODE BEGIN 4 */

void processCommand(char buffer[RX_BUFFER_SIZE])
{ 
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint8_t command = buffer[1];
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3301      	adds	r3, #1
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	73fb      	strb	r3, [r7, #15]
  uint8_t value1 = buffer[2];
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3302      	adds	r3, #2
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	73bb      	strb	r3, [r7, #14]

  switch(command){
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	2bbb      	cmp	r3, #187	@ 0xbb
 80011c0:	d002      	beq.n	80011c8 <processCommand+0x24>
 80011c2:	2bdd      	cmp	r3, #221	@ 0xdd
 80011c4:	d004      	beq.n	80011d0 <processCommand+0x2c>
      break;
    case 0xdd:
      val = value1 * 100;
      break;
    default:
      break; 
 80011c6:	e00a      	b.n	80011de <processCommand+0x3a>
      freq = value1;
 80011c8:	7bbb      	ldrb	r3, [r7, #14]
 80011ca:	4a08      	ldr	r2, [pc, #32]	@ (80011ec <processCommand+0x48>)
 80011cc:	6013      	str	r3, [r2, #0]
      break;
 80011ce:	e006      	b.n	80011de <processCommand+0x3a>
      val = value1 * 100;
 80011d0:	7bbb      	ldrb	r3, [r7, #14]
 80011d2:	2264      	movs	r2, #100	@ 0x64
 80011d4:	fb02 f303 	mul.w	r3, r2, r3
 80011d8:	4a05      	ldr	r2, [pc, #20]	@ (80011f0 <processCommand+0x4c>)
 80011da:	6013      	str	r3, [r2, #0]
      break;
 80011dc:	bf00      	nop
  }
}
 80011de:	bf00      	nop
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	20000118 	.word	0x20000118
 80011f0:	2000011c 	.word	0x2000011c
 80011f4:	00000000 	.word	0x00000000

080011f8 <write_sin>:



void write_sin(){
 80011f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011fc:	af00      	add	r7, sp, #0
    scale = (float) val / 3300;
 80011fe:	4b3a      	ldr	r3, [pc, #232]	@ (80012e8 <write_sin+0xf0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	ee07 3a90 	vmov	s15, r3
 8001206:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800120a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80012ec <write_sin+0xf4>
 800120e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001212:	4b37      	ldr	r3, [pc, #220]	@ (80012f0 <write_sin+0xf8>)
 8001214:	edc3 7a00 	vstr	s15, [r3]
    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint32_t)(2048 * scale + 2047 * scale * sin(time * 2 * 3.14159 * freq / 1000)));
 8001218:	4b35      	ldr	r3, [pc, #212]	@ (80012f0 <write_sin+0xf8>)
 800121a:	edd3 7a00 	vldr	s15, [r3]
 800121e:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80012f4 <write_sin+0xfc>
 8001222:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001226:	ee17 0a90 	vmov	r0, s15
 800122a:	f7ff f951 	bl	80004d0 <__aeabi_f2d>
 800122e:	4604      	mov	r4, r0
 8001230:	460d      	mov	r5, r1
 8001232:	4b2f      	ldr	r3, [pc, #188]	@ (80012f0 <write_sin+0xf8>)
 8001234:	edd3 7a00 	vldr	s15, [r3]
 8001238:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80012f8 <write_sin+0x100>
 800123c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001240:	ee17 0a90 	vmov	r0, s15
 8001244:	f7ff f944 	bl	80004d0 <__aeabi_f2d>
 8001248:	4680      	mov	r8, r0
 800124a:	4689      	mov	r9, r1
 800124c:	4b2b      	ldr	r3, [pc, #172]	@ (80012fc <write_sin+0x104>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff f91a 	bl	800048c <__aeabi_ui2d>
 8001258:	a321      	add	r3, pc, #132	@ (adr r3, 80012e0 <write_sin+0xe8>)
 800125a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125e:	f7ff f98f 	bl	8000580 <__aeabi_dmul>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4692      	mov	sl, r2
 8001268:	469b      	mov	fp, r3
 800126a:	4b25      	ldr	r3, [pc, #148]	@ (8001300 <write_sin+0x108>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f91c 	bl	80004ac <__aeabi_i2d>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4650      	mov	r0, sl
 800127a:	4659      	mov	r1, fp
 800127c:	f7ff f980 	bl	8000580 <__aeabi_dmul>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	4b1d      	ldr	r3, [pc, #116]	@ (8001304 <write_sin+0x10c>)
 800128e:	f7ff faa1 	bl	80007d4 <__aeabi_ddiv>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	ec43 2b17 	vmov	d7, r2, r3
 800129a:	eeb0 0a47 	vmov.f32	s0, s14
 800129e:	eef0 0a67 	vmov.f32	s1, s15
 80012a2:	f003 f8d1 	bl	8004448 <sin>
 80012a6:	ec53 2b10 	vmov	r2, r3, d0
 80012aa:	4640      	mov	r0, r8
 80012ac:	4649      	mov	r1, r9
 80012ae:	f7ff f967 	bl	8000580 <__aeabi_dmul>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4620      	mov	r0, r4
 80012b8:	4629      	mov	r1, r5
 80012ba:	f7fe ffab 	bl	8000214 <__adddf3>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4610      	mov	r0, r2
 80012c4:	4619      	mov	r1, r3
 80012c6:	f7ff fc1d 	bl	8000b04 <__aeabi_d2uiz>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2200      	movs	r2, #0
 80012ce:	2100      	movs	r1, #0
 80012d0:	480d      	ldr	r0, [pc, #52]	@ (8001308 <write_sin+0x110>)
 80012d2:	f000 fbf7 	bl	8001ac4 <HAL_DAC_SetValue>
}
 80012d6:	bf00      	nop
 80012d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80012dc:	f3af 8000 	nop.w
 80012e0:	f01b866e 	.word	0xf01b866e
 80012e4:	400921f9 	.word	0x400921f9
 80012e8:	2000011c 	.word	0x2000011c
 80012ec:	454e4000 	.word	0x454e4000
 80012f0:	20000120 	.word	0x20000120
 80012f4:	45000000 	.word	0x45000000
 80012f8:	44ffe000 	.word	0x44ffe000
 80012fc:	20000028 	.word	0x20000028
 8001300:	20000118 	.word	0x20000118
 8001304:	408f4000 	.word	0x408f4000
 8001308:	2000002c 	.word	0x2000002c

0800130c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800131c:	d106      	bne.n	800132c <HAL_TIM_PeriodElapsedCallback+0x20>
  {
    // HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
    time++; // 1khz (or 2)
 800131e:	4b05      	ldr	r3, [pc, #20]	@ (8001334 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	3301      	adds	r3, #1
 8001324:	4a03      	ldr	r2, [pc, #12]	@ (8001334 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001326:	6013      	str	r3, [r2, #0]
    write_sin();
 8001328:	f7ff ff66 	bl	80011f8 <write_sin>
  }
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000028 	.word	0x20000028

08001338 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart2, &buffer, RX_BUFFER_SIZE);
 8001340:	2204      	movs	r2, #4
 8001342:	4909      	ldr	r1, [pc, #36]	@ (8001368 <HAL_UART_RxCpltCallback+0x30>)
 8001344:	4809      	ldr	r0, [pc, #36]	@ (800136c <HAL_UART_RxCpltCallback+0x34>)
 8001346:	f002 f92f 	bl	80035a8 <HAL_UART_Receive_IT>

  if(buffer[0] == '\r' && buffer[RX_BUFFER_SIZE - 1] == '\n'){
 800134a:	4b07      	ldr	r3, [pc, #28]	@ (8001368 <HAL_UART_RxCpltCallback+0x30>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b0d      	cmp	r3, #13
 8001350:	d106      	bne.n	8001360 <HAL_UART_RxCpltCallback+0x28>
 8001352:	4b05      	ldr	r3, [pc, #20]	@ (8001368 <HAL_UART_RxCpltCallback+0x30>)
 8001354:	78db      	ldrb	r3, [r3, #3]
 8001356:	2b0a      	cmp	r3, #10
 8001358:	d102      	bne.n	8001360 <HAL_UART_RxCpltCallback+0x28>
    processCommand(buffer);
 800135a:	4803      	ldr	r0, [pc, #12]	@ (8001368 <HAL_UART_RxCpltCallback+0x30>)
 800135c:	f7ff ff22 	bl	80011a4 <processCommand>
  } else{
    // HAL_UART_Transmit_IT(&huart2, "Invalid command\r\n", 17);
  }

}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000124 	.word	0x20000124
 800136c:	200000d0 	.word	0x200000d0

08001370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001374:	b672      	cpsid	i
}
 8001376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <Error_Handler+0x8>

0800137c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	4b10      	ldr	r3, [pc, #64]	@ (80013c8 <HAL_MspInit+0x4c>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800138a:	4a0f      	ldr	r2, [pc, #60]	@ (80013c8 <HAL_MspInit+0x4c>)
 800138c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001390:	6453      	str	r3, [r2, #68]	@ 0x44
 8001392:	4b0d      	ldr	r3, [pc, #52]	@ (80013c8 <HAL_MspInit+0x4c>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001396:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	603b      	str	r3, [r7, #0]
 80013a2:	4b09      	ldr	r3, [pc, #36]	@ (80013c8 <HAL_MspInit+0x4c>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a6:	4a08      	ldr	r2, [pc, #32]	@ (80013c8 <HAL_MspInit+0x4c>)
 80013a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ae:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <HAL_MspInit+0x4c>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800

080013cc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08a      	sub	sp, #40	@ 0x28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a17      	ldr	r2, [pc, #92]	@ (8001448 <HAL_DAC_MspInit+0x7c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d127      	bne.n	800143e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	4b16      	ldr	r3, [pc, #88]	@ (800144c <HAL_DAC_MspInit+0x80>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f6:	4a15      	ldr	r2, [pc, #84]	@ (800144c <HAL_DAC_MspInit+0x80>)
 80013f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80013fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013fe:	4b13      	ldr	r3, [pc, #76]	@ (800144c <HAL_DAC_MspInit+0x80>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001402:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	4b0f      	ldr	r3, [pc, #60]	@ (800144c <HAL_DAC_MspInit+0x80>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	4a0e      	ldr	r2, [pc, #56]	@ (800144c <HAL_DAC_MspInit+0x80>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6313      	str	r3, [r2, #48]	@ 0x30
 800141a:	4b0c      	ldr	r3, [pc, #48]	@ (800144c <HAL_DAC_MspInit+0x80>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001426:	2310      	movs	r3, #16
 8001428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800142a:	2303      	movs	r3, #3
 800142c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	4619      	mov	r1, r3
 8001438:	4805      	ldr	r0, [pc, #20]	@ (8001450 <HAL_DAC_MspInit+0x84>)
 800143a:	f000 fc59 	bl	8001cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800143e:	bf00      	nop
 8001440:	3728      	adds	r7, #40	@ 0x28
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40007400 	.word	0x40007400
 800144c:	40023800 	.word	0x40023800
 8001450:	40020000 	.word	0x40020000

08001454 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001464:	d115      	bne.n	8001492 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <HAL_TIM_Base_MspInit+0x48>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146e:	4a0b      	ldr	r2, [pc, #44]	@ (800149c <HAL_TIM_Base_MspInit+0x48>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6413      	str	r3, [r2, #64]	@ 0x40
 8001476:	4b09      	ldr	r3, [pc, #36]	@ (800149c <HAL_TIM_Base_MspInit+0x48>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001482:	2200      	movs	r2, #0
 8001484:	2100      	movs	r1, #0
 8001486:	201c      	movs	r0, #28
 8001488:	f000 fa6d 	bl	8001966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800148c:	201c      	movs	r0, #28
 800148e:	f000 fa86 	bl	800199e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800

080014a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08c      	sub	sp, #48	@ 0x30
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 031c 	add.w	r3, r7, #28
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a3a      	ldr	r2, [pc, #232]	@ (80015a8 <HAL_UART_MspInit+0x108>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d135      	bne.n	800152e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	61bb      	str	r3, [r7, #24]
 80014c6:	4b39      	ldr	r3, [pc, #228]	@ (80015ac <HAL_UART_MspInit+0x10c>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ca:	4a38      	ldr	r2, [pc, #224]	@ (80015ac <HAL_UART_MspInit+0x10c>)
 80014cc:	f043 0310 	orr.w	r3, r3, #16
 80014d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014d2:	4b36      	ldr	r3, [pc, #216]	@ (80015ac <HAL_UART_MspInit+0x10c>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d6:	f003 0310 	and.w	r3, r3, #16
 80014da:	61bb      	str	r3, [r7, #24]
 80014dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
 80014e2:	4b32      	ldr	r3, [pc, #200]	@ (80015ac <HAL_UART_MspInit+0x10c>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	4a31      	ldr	r2, [pc, #196]	@ (80015ac <HAL_UART_MspInit+0x10c>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ee:	4b2f      	ldr	r3, [pc, #188]	@ (80015ac <HAL_UART_MspInit+0x10c>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014fa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80014fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001508:	2303      	movs	r3, #3
 800150a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800150c:	2307      	movs	r3, #7
 800150e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001510:	f107 031c 	add.w	r3, r7, #28
 8001514:	4619      	mov	r1, r3
 8001516:	4826      	ldr	r0, [pc, #152]	@ (80015b0 <HAL_UART_MspInit+0x110>)
 8001518:	f000 fbea 	bl	8001cf0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800151c:	2200      	movs	r2, #0
 800151e:	2100      	movs	r1, #0
 8001520:	2025      	movs	r0, #37	@ 0x25
 8001522:	f000 fa20 	bl	8001966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001526:	2025      	movs	r0, #37	@ 0x25
 8001528:	f000 fa39 	bl	800199e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800152c:	e038      	b.n	80015a0 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a20      	ldr	r2, [pc, #128]	@ (80015b4 <HAL_UART_MspInit+0x114>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d133      	bne.n	80015a0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001538:	2300      	movs	r3, #0
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	4b1b      	ldr	r3, [pc, #108]	@ (80015ac <HAL_UART_MspInit+0x10c>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001540:	4a1a      	ldr	r2, [pc, #104]	@ (80015ac <HAL_UART_MspInit+0x10c>)
 8001542:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001546:	6413      	str	r3, [r2, #64]	@ 0x40
 8001548:	4b18      	ldr	r3, [pc, #96]	@ (80015ac <HAL_UART_MspInit+0x10c>)
 800154a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	4b14      	ldr	r3, [pc, #80]	@ (80015ac <HAL_UART_MspInit+0x10c>)
 800155a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155c:	4a13      	ldr	r2, [pc, #76]	@ (80015ac <HAL_UART_MspInit+0x10c>)
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	6313      	str	r3, [r2, #48]	@ 0x30
 8001564:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <HAL_UART_MspInit+0x10c>)
 8001566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001570:	230c      	movs	r3, #12
 8001572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157c:	2303      	movs	r3, #3
 800157e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001580:	2307      	movs	r3, #7
 8001582:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	4619      	mov	r1, r3
 800158a:	4809      	ldr	r0, [pc, #36]	@ (80015b0 <HAL_UART_MspInit+0x110>)
 800158c:	f000 fbb0 	bl	8001cf0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001590:	2200      	movs	r2, #0
 8001592:	2100      	movs	r1, #0
 8001594:	2026      	movs	r0, #38	@ 0x26
 8001596:	f000 f9e6 	bl	8001966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800159a:	2026      	movs	r0, #38	@ 0x26
 800159c:	f000 f9ff 	bl	800199e <HAL_NVIC_EnableIRQ>
}
 80015a0:	bf00      	nop
 80015a2:	3730      	adds	r7, #48	@ 0x30
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40011000 	.word	0x40011000
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40020000 	.word	0x40020000
 80015b4:	40004400 	.word	0x40004400

080015b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <NMI_Handler+0x4>

080015c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <HardFault_Handler+0x4>

080015c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <MemManage_Handler+0x4>

080015d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <BusFault_Handler+0x4>

080015d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <UsageFault_Handler+0x4>

080015e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800160e:	f000 f8af 	bl	8001770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800161c:	4802      	ldr	r0, [pc, #8]	@ (8001628 <TIM2_IRQHandler+0x10>)
 800161e:	f001 fbbd 	bl	8002d9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000040 	.word	0x20000040

0800162c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001630:	4802      	ldr	r0, [pc, #8]	@ (800163c <USART1_IRQHandler+0x10>)
 8001632:	f001 ffdf 	bl	80035f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000088 	.word	0x20000088

08001640 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001644:	4802      	ldr	r0, [pc, #8]	@ (8001650 <USART2_IRQHandler+0x10>)
 8001646:	f001 ffd5 	bl	80035f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200000d0 	.word	0x200000d0

08001654 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001658:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <SystemInit+0x20>)
 800165a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800165e:	4a05      	ldr	r2, [pc, #20]	@ (8001674 <SystemInit+0x20>)
 8001660:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001664:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001678:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016b0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800167c:	f7ff ffea 	bl	8001654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001680:	480c      	ldr	r0, [pc, #48]	@ (80016b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001682:	490d      	ldr	r1, [pc, #52]	@ (80016b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001684:	4a0d      	ldr	r2, [pc, #52]	@ (80016bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001688:	e002      	b.n	8001690 <LoopCopyDataInit>

0800168a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800168a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800168c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800168e:	3304      	adds	r3, #4

08001690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001694:	d3f9      	bcc.n	800168a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001696:	4a0a      	ldr	r2, [pc, #40]	@ (80016c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001698:	4c0a      	ldr	r4, [pc, #40]	@ (80016c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800169c:	e001      	b.n	80016a2 <LoopFillZerobss>

0800169e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800169e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a0:	3204      	adds	r2, #4

080016a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a4:	d3fb      	bcc.n	800169e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80016a6:	f002 feab 	bl	8004400 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016aa:	f7ff fbc3 	bl	8000e34 <main>
  bx  lr    
 80016ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016bc:	080056c0 	.word	0x080056c0
  ldr r2, =_sbss
 80016c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80016c4:	2000012c 	.word	0x2000012c

080016c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016c8:	e7fe      	b.n	80016c8 <ADC_IRQHandler>
	...

080016cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016d0:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <HAL_Init+0x40>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a0d      	ldr	r2, [pc, #52]	@ (800170c <HAL_Init+0x40>)
 80016d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016dc:	4b0b      	ldr	r3, [pc, #44]	@ (800170c <HAL_Init+0x40>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a0a      	ldr	r2, [pc, #40]	@ (800170c <HAL_Init+0x40>)
 80016e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016e8:	4b08      	ldr	r3, [pc, #32]	@ (800170c <HAL_Init+0x40>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a07      	ldr	r2, [pc, #28]	@ (800170c <HAL_Init+0x40>)
 80016ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f4:	2003      	movs	r0, #3
 80016f6:	f000 f92b 	bl	8001950 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016fa:	200f      	movs	r0, #15
 80016fc:	f000 f808 	bl	8001710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001700:	f7ff fe3c 	bl	800137c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40023c00 	.word	0x40023c00

08001710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001718:	4b12      	ldr	r3, [pc, #72]	@ (8001764 <HAL_InitTick+0x54>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4b12      	ldr	r3, [pc, #72]	@ (8001768 <HAL_InitTick+0x58>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	4619      	mov	r1, r3
 8001722:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001726:	fbb3 f3f1 	udiv	r3, r3, r1
 800172a:	fbb2 f3f3 	udiv	r3, r2, r3
 800172e:	4618      	mov	r0, r3
 8001730:	f000 f943 	bl	80019ba <HAL_SYSTICK_Config>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e00e      	b.n	800175c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b0f      	cmp	r3, #15
 8001742:	d80a      	bhi.n	800175a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001744:	2200      	movs	r2, #0
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800174c:	f000 f90b 	bl	8001966 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001750:	4a06      	ldr	r2, [pc, #24]	@ (800176c <HAL_InitTick+0x5c>)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001756:	2300      	movs	r3, #0
 8001758:	e000      	b.n	800175c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
}
 800175c:	4618      	mov	r0, r3
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000000 	.word	0x20000000
 8001768:	20000008 	.word	0x20000008
 800176c:	20000004 	.word	0x20000004

08001770 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001774:	4b06      	ldr	r3, [pc, #24]	@ (8001790 <HAL_IncTick+0x20>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	461a      	mov	r2, r3
 800177a:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <HAL_IncTick+0x24>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4413      	add	r3, r2
 8001780:	4a04      	ldr	r2, [pc, #16]	@ (8001794 <HAL_IncTick+0x24>)
 8001782:	6013      	str	r3, [r2, #0]
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	20000008 	.word	0x20000008
 8001794:	20000128 	.word	0x20000128

08001798 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return uwTick;
 800179c:	4b03      	ldr	r3, [pc, #12]	@ (80017ac <HAL_GetTick+0x14>)
 800179e:	681b      	ldr	r3, [r3, #0]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	20000128 	.word	0x20000128

080017b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c0:	4b0c      	ldr	r3, [pc, #48]	@ (80017f4 <__NVIC_SetPriorityGrouping+0x44>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017cc:	4013      	ands	r3, r2
 80017ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017e2:	4a04      	ldr	r2, [pc, #16]	@ (80017f4 <__NVIC_SetPriorityGrouping+0x44>)
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	60d3      	str	r3, [r2, #12]
}
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017fc:	4b04      	ldr	r3, [pc, #16]	@ (8001810 <__NVIC_GetPriorityGrouping+0x18>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	0a1b      	lsrs	r3, r3, #8
 8001802:	f003 0307 	and.w	r3, r3, #7
}
 8001806:	4618      	mov	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	2b00      	cmp	r3, #0
 8001824:	db0b      	blt.n	800183e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	f003 021f 	and.w	r2, r3, #31
 800182c:	4907      	ldr	r1, [pc, #28]	@ (800184c <__NVIC_EnableIRQ+0x38>)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	095b      	lsrs	r3, r3, #5
 8001834:	2001      	movs	r0, #1
 8001836:	fa00 f202 	lsl.w	r2, r0, r2
 800183a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e000e100 	.word	0xe000e100

08001850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	6039      	str	r1, [r7, #0]
 800185a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001860:	2b00      	cmp	r3, #0
 8001862:	db0a      	blt.n	800187a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	b2da      	uxtb	r2, r3
 8001868:	490c      	ldr	r1, [pc, #48]	@ (800189c <__NVIC_SetPriority+0x4c>)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	0112      	lsls	r2, r2, #4
 8001870:	b2d2      	uxtb	r2, r2
 8001872:	440b      	add	r3, r1
 8001874:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001878:	e00a      	b.n	8001890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4908      	ldr	r1, [pc, #32]	@ (80018a0 <__NVIC_SetPriority+0x50>)
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	3b04      	subs	r3, #4
 8001888:	0112      	lsls	r2, r2, #4
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	440b      	add	r3, r1
 800188e:	761a      	strb	r2, [r3, #24]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000e100 	.word	0xe000e100
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b089      	sub	sp, #36	@ 0x24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f1c3 0307 	rsb	r3, r3, #7
 80018be:	2b04      	cmp	r3, #4
 80018c0:	bf28      	it	cs
 80018c2:	2304      	movcs	r3, #4
 80018c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3304      	adds	r3, #4
 80018ca:	2b06      	cmp	r3, #6
 80018cc:	d902      	bls.n	80018d4 <NVIC_EncodePriority+0x30>
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3b03      	subs	r3, #3
 80018d2:	e000      	b.n	80018d6 <NVIC_EncodePriority+0x32>
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43da      	mvns	r2, r3
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	401a      	ands	r2, r3
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	fa01 f303 	lsl.w	r3, r1, r3
 80018f6:	43d9      	mvns	r1, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	4313      	orrs	r3, r2
         );
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3724      	adds	r7, #36	@ 0x24
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
	...

0800190c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3b01      	subs	r3, #1
 8001918:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800191c:	d301      	bcc.n	8001922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800191e:	2301      	movs	r3, #1
 8001920:	e00f      	b.n	8001942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001922:	4a0a      	ldr	r2, [pc, #40]	@ (800194c <SysTick_Config+0x40>)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3b01      	subs	r3, #1
 8001928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800192a:	210f      	movs	r1, #15
 800192c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001930:	f7ff ff8e 	bl	8001850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001934:	4b05      	ldr	r3, [pc, #20]	@ (800194c <SysTick_Config+0x40>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800193a:	4b04      	ldr	r3, [pc, #16]	@ (800194c <SysTick_Config+0x40>)
 800193c:	2207      	movs	r2, #7
 800193e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	e000e010 	.word	0xe000e010

08001950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff ff29 	bl	80017b0 <__NVIC_SetPriorityGrouping>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001966:	b580      	push	{r7, lr}
 8001968:	b086      	sub	sp, #24
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
 8001972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001978:	f7ff ff3e 	bl	80017f8 <__NVIC_GetPriorityGrouping>
 800197c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	68b9      	ldr	r1, [r7, #8]
 8001982:	6978      	ldr	r0, [r7, #20]
 8001984:	f7ff ff8e 	bl	80018a4 <NVIC_EncodePriority>
 8001988:	4602      	mov	r2, r0
 800198a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198e:	4611      	mov	r1, r2
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff5d 	bl	8001850 <__NVIC_SetPriority>
}
 8001996:	bf00      	nop
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	4603      	mov	r3, r0
 80019a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff31 	bl	8001814 <__NVIC_EnableIRQ>
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ffa2 	bl	800190c <SysTick_Config>
 80019c8:	4603      	mov	r3, r0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e014      	b.n	8001a0e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	791b      	ldrb	r3, [r3, #4]
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d105      	bne.n	80019fa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff fce9 	bl	80013cc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2202      	movs	r2, #2
 80019fe:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
 8001a1e:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e046      	b.n	8001ab8 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	795b      	ldrb	r3, [r3, #5]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d101      	bne.n	8001a36 <HAL_DAC_Start+0x20>
 8001a32:	2302      	movs	r3, #2
 8001a34:	e040      	b.n	8001ab8 <HAL_DAC_Start+0xa2>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2202      	movs	r2, #2
 8001a40:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6819      	ldr	r1, [r3, #0]
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	f003 0310 	and.w	r3, r3, #16
 8001a4e:	2201      	movs	r2, #1
 8001a50:	409a      	lsls	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d10f      	bne.n	8001a80 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8001a6a:	2b3c      	cmp	r3, #60	@ 0x3c
 8001a6c:	d11d      	bne.n	8001aaa <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f042 0201 	orr.w	r2, r2, #1
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	e014      	b.n	8001aaa <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	f003 0310 	and.w	r3, r3, #16
 8001a90:	213c      	movs	r1, #60	@ 0x3c
 8001a92:	fa01 f303 	lsl.w	r3, r1, r3
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d107      	bne.n	8001aaa <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f042 0202 	orr.w	r2, r2, #2
 8001aa8:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b087      	sub	sp, #28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
 8001ad0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e015      	b.n	8001b0c <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d105      	bne.n	8001af8 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	3308      	adds	r3, #8
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	e004      	b.n	8001b02 <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	3314      	adds	r3, #20
 8001b00:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	461a      	mov	r2, r3
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	371c      	adds	r7, #28
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b089      	sub	sp, #36	@ 0x24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b24:	2300      	movs	r3, #0
 8001b26:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <HAL_DAC_ConfigChannel+0x1c>
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e042      	b.n	8001bbe <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	795b      	ldrb	r3, [r3, #5]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d101      	bne.n	8001b44 <HAL_DAC_ConfigChannel+0x2c>
 8001b40:	2302      	movs	r3, #2
 8001b42:	e03c      	b.n	8001bbe <HAL_DAC_ConfigChannel+0xa6>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2201      	movs	r2, #1
 8001b48:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f003 0310 	and.w	r3, r3, #16
 8001b5e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f003 0310 	and.w	r3, r3, #16
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6819      	ldr	r1, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f003 0310 	and.w	r3, r3, #16
 8001ba0:	22c0      	movs	r2, #192	@ 0xc0
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43da      	mvns	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	400a      	ands	r2, r1
 8001bae:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001bbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3724      	adds	r7, #36	@ 0x24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b084      	sub	sp, #16
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001bd8:	f7ff fdde 	bl	8001798 <HAL_GetTick>
 8001bdc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d008      	beq.n	8001bfc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2280      	movs	r2, #128	@ 0x80
 8001bee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e052      	b.n	8001ca2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0216 	bic.w	r2, r2, #22
 8001c0a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	695a      	ldr	r2, [r3, #20]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c1a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d103      	bne.n	8001c2c <HAL_DMA_Abort+0x62>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d007      	beq.n	8001c3c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 0208 	bic.w	r2, r2, #8
 8001c3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 0201 	bic.w	r2, r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c4c:	e013      	b.n	8001c76 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c4e:	f7ff fda3 	bl	8001798 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b05      	cmp	r3, #5
 8001c5a:	d90c      	bls.n	8001c76 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2220      	movs	r2, #32
 8001c60:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2203      	movs	r2, #3
 8001c66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e015      	b.n	8001ca2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1e4      	bne.n	8001c4e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c88:	223f      	movs	r2, #63	@ 0x3f
 8001c8a:	409a      	lsls	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d004      	beq.n	8001cc8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2280      	movs	r2, #128	@ 0x80
 8001cc2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e00c      	b.n	8001ce2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2205      	movs	r2, #5
 8001ccc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0201 	bic.w	r2, r2, #1
 8001cde:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b089      	sub	sp, #36	@ 0x24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
 8001d0a:	e165      	b.n	8001fd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	f040 8154 	bne.w	8001fd2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d005      	beq.n	8001d42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d130      	bne.n	8001da4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d78:	2201      	movs	r2, #1
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 0201 	and.w	r2, r3, #1
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	2b03      	cmp	r3, #3
 8001dae:	d017      	beq.n	8001de0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	2203      	movs	r2, #3
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d123      	bne.n	8001e34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	08da      	lsrs	r2, r3, #3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3208      	adds	r2, #8
 8001df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	220f      	movs	r2, #15
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	691a      	ldr	r2, [r3, #16]
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	08da      	lsrs	r2, r3, #3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3208      	adds	r2, #8
 8001e2e:	69b9      	ldr	r1, [r7, #24]
 8001e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	2203      	movs	r2, #3
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0203 	and.w	r2, r3, #3
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 80ae 	beq.w	8001fd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	4b5d      	ldr	r3, [pc, #372]	@ (8001ff0 <HAL_GPIO_Init+0x300>)
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7e:	4a5c      	ldr	r2, [pc, #368]	@ (8001ff0 <HAL_GPIO_Init+0x300>)
 8001e80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e86:	4b5a      	ldr	r3, [pc, #360]	@ (8001ff0 <HAL_GPIO_Init+0x300>)
 8001e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e92:	4a58      	ldr	r2, [pc, #352]	@ (8001ff4 <HAL_GPIO_Init+0x304>)
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	089b      	lsrs	r3, r3, #2
 8001e98:	3302      	adds	r3, #2
 8001e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	220f      	movs	r2, #15
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a4f      	ldr	r2, [pc, #316]	@ (8001ff8 <HAL_GPIO_Init+0x308>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d025      	beq.n	8001f0a <HAL_GPIO_Init+0x21a>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a4e      	ldr	r2, [pc, #312]	@ (8001ffc <HAL_GPIO_Init+0x30c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d01f      	beq.n	8001f06 <HAL_GPIO_Init+0x216>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a4d      	ldr	r2, [pc, #308]	@ (8002000 <HAL_GPIO_Init+0x310>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d019      	beq.n	8001f02 <HAL_GPIO_Init+0x212>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a4c      	ldr	r2, [pc, #304]	@ (8002004 <HAL_GPIO_Init+0x314>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d013      	beq.n	8001efe <HAL_GPIO_Init+0x20e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a4b      	ldr	r2, [pc, #300]	@ (8002008 <HAL_GPIO_Init+0x318>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d00d      	beq.n	8001efa <HAL_GPIO_Init+0x20a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a4a      	ldr	r2, [pc, #296]	@ (800200c <HAL_GPIO_Init+0x31c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d007      	beq.n	8001ef6 <HAL_GPIO_Init+0x206>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a49      	ldr	r2, [pc, #292]	@ (8002010 <HAL_GPIO_Init+0x320>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d101      	bne.n	8001ef2 <HAL_GPIO_Init+0x202>
 8001eee:	2306      	movs	r3, #6
 8001ef0:	e00c      	b.n	8001f0c <HAL_GPIO_Init+0x21c>
 8001ef2:	2307      	movs	r3, #7
 8001ef4:	e00a      	b.n	8001f0c <HAL_GPIO_Init+0x21c>
 8001ef6:	2305      	movs	r3, #5
 8001ef8:	e008      	b.n	8001f0c <HAL_GPIO_Init+0x21c>
 8001efa:	2304      	movs	r3, #4
 8001efc:	e006      	b.n	8001f0c <HAL_GPIO_Init+0x21c>
 8001efe:	2303      	movs	r3, #3
 8001f00:	e004      	b.n	8001f0c <HAL_GPIO_Init+0x21c>
 8001f02:	2302      	movs	r3, #2
 8001f04:	e002      	b.n	8001f0c <HAL_GPIO_Init+0x21c>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <HAL_GPIO_Init+0x21c>
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	69fa      	ldr	r2, [r7, #28]
 8001f0e:	f002 0203 	and.w	r2, r2, #3
 8001f12:	0092      	lsls	r2, r2, #2
 8001f14:	4093      	lsls	r3, r2
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f1c:	4935      	ldr	r1, [pc, #212]	@ (8001ff4 <HAL_GPIO_Init+0x304>)
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	089b      	lsrs	r3, r3, #2
 8001f22:	3302      	adds	r3, #2
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f2a:	4b3a      	ldr	r3, [pc, #232]	@ (8002014 <HAL_GPIO_Init+0x324>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	43db      	mvns	r3, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4013      	ands	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f4e:	4a31      	ldr	r2, [pc, #196]	@ (8002014 <HAL_GPIO_Init+0x324>)
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f54:	4b2f      	ldr	r3, [pc, #188]	@ (8002014 <HAL_GPIO_Init+0x324>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f78:	4a26      	ldr	r2, [pc, #152]	@ (8002014 <HAL_GPIO_Init+0x324>)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f7e:	4b25      	ldr	r3, [pc, #148]	@ (8002014 <HAL_GPIO_Init+0x324>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fa2:	4a1c      	ldr	r2, [pc, #112]	@ (8002014 <HAL_GPIO_Init+0x324>)
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8002014 <HAL_GPIO_Init+0x324>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fcc:	4a11      	ldr	r2, [pc, #68]	@ (8002014 <HAL_GPIO_Init+0x324>)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	61fb      	str	r3, [r7, #28]
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	2b0f      	cmp	r3, #15
 8001fdc:	f67f ae96 	bls.w	8001d0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	bf00      	nop
 8001fe4:	3724      	adds	r7, #36	@ 0x24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40013800 	.word	0x40013800
 8001ff8:	40020000 	.word	0x40020000
 8001ffc:	40020400 	.word	0x40020400
 8002000:	40020800 	.word	0x40020800
 8002004:	40020c00 	.word	0x40020c00
 8002008:	40021000 	.word	0x40021000
 800200c:	40021400 	.word	0x40021400
 8002010:	40021800 	.word	0x40021800
 8002014:	40013c00 	.word	0x40013c00

08002018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	807b      	strh	r3, [r7, #2]
 8002024:	4613      	mov	r3, r2
 8002026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002028:	787b      	ldrb	r3, [r7, #1]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800202e:	887a      	ldrh	r2, [r7, #2]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002034:	e003      	b.n	800203e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002036:	887b      	ldrh	r3, [r7, #2]
 8002038:	041a      	lsls	r2, r3, #16
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	619a      	str	r2, [r3, #24]
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
	...

0800204c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e0cc      	b.n	80021fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002060:	4b68      	ldr	r3, [pc, #416]	@ (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	d90c      	bls.n	8002088 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206e:	4b65      	ldr	r3, [pc, #404]	@ (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002076:	4b63      	ldr	r3, [pc, #396]	@ (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	429a      	cmp	r2, r3
 8002082:	d001      	beq.n	8002088 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0b8      	b.n	80021fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d020      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d005      	beq.n	80020ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020a0:	4b59      	ldr	r3, [pc, #356]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	4a58      	ldr	r2, [pc, #352]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80020a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020b8:	4b53      	ldr	r3, [pc, #332]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	4a52      	ldr	r2, [pc, #328]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80020be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c4:	4b50      	ldr	r3, [pc, #320]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	494d      	ldr	r1, [pc, #308]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d044      	beq.n	800216c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d107      	bne.n	80020fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ea:	4b47      	ldr	r3, [pc, #284]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d119      	bne.n	800212a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e07f      	b.n	80021fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d003      	beq.n	800210a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002106:	2b03      	cmp	r3, #3
 8002108:	d107      	bne.n	800211a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800210a:	4b3f      	ldr	r3, [pc, #252]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d109      	bne.n	800212a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e06f      	b.n	80021fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211a:	4b3b      	ldr	r3, [pc, #236]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e067      	b.n	80021fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800212a:	4b37      	ldr	r3, [pc, #220]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f023 0203 	bic.w	r2, r3, #3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	4934      	ldr	r1, [pc, #208]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 8002138:	4313      	orrs	r3, r2
 800213a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800213c:	f7ff fb2c 	bl	8001798 <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002142:	e00a      	b.n	800215a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002144:	f7ff fb28 	bl	8001798 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e04f      	b.n	80021fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215a:	4b2b      	ldr	r3, [pc, #172]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 020c 	and.w	r2, r3, #12
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	429a      	cmp	r2, r3
 800216a:	d1eb      	bne.n	8002144 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800216c:	4b25      	ldr	r3, [pc, #148]	@ (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 030f 	and.w	r3, r3, #15
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d20c      	bcs.n	8002194 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217a:	4b22      	ldr	r3, [pc, #136]	@ (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002182:	4b20      	ldr	r3, [pc, #128]	@ (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d001      	beq.n	8002194 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e032      	b.n	80021fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021a0:	4b19      	ldr	r3, [pc, #100]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	4916      	ldr	r1, [pc, #88]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d009      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021be:	4b12      	ldr	r3, [pc, #72]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	490e      	ldr	r1, [pc, #56]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021d2:	f000 f855 	bl	8002280 <HAL_RCC_GetSysClockFreq>
 80021d6:	4602      	mov	r2, r0
 80021d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	091b      	lsrs	r3, r3, #4
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	490a      	ldr	r1, [pc, #40]	@ (800220c <HAL_RCC_ClockConfig+0x1c0>)
 80021e4:	5ccb      	ldrb	r3, [r1, r3]
 80021e6:	fa22 f303 	lsr.w	r3, r2, r3
 80021ea:	4a09      	ldr	r2, [pc, #36]	@ (8002210 <HAL_RCC_ClockConfig+0x1c4>)
 80021ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021ee:	4b09      	ldr	r3, [pc, #36]	@ (8002214 <HAL_RCC_ClockConfig+0x1c8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff fa8c 	bl	8001710 <HAL_InitTick>

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40023c00 	.word	0x40023c00
 8002208:	40023800 	.word	0x40023800
 800220c:	080054c0 	.word	0x080054c0
 8002210:	20000000 	.word	0x20000000
 8002214:	20000004 	.word	0x20000004

08002218 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800221c:	4b03      	ldr	r3, [pc, #12]	@ (800222c <HAL_RCC_GetHCLKFreq+0x14>)
 800221e:	681b      	ldr	r3, [r3, #0]
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20000000 	.word	0x20000000

08002230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002234:	f7ff fff0 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 8002238:	4602      	mov	r2, r0
 800223a:	4b05      	ldr	r3, [pc, #20]	@ (8002250 <HAL_RCC_GetPCLK1Freq+0x20>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	0a9b      	lsrs	r3, r3, #10
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	4903      	ldr	r1, [pc, #12]	@ (8002254 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002246:	5ccb      	ldrb	r3, [r1, r3]
 8002248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800224c:	4618      	mov	r0, r3
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40023800 	.word	0x40023800
 8002254:	080054d0 	.word	0x080054d0

08002258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800225c:	f7ff ffdc 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 8002260:	4602      	mov	r2, r0
 8002262:	4b05      	ldr	r3, [pc, #20]	@ (8002278 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	0b5b      	lsrs	r3, r3, #13
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	4903      	ldr	r1, [pc, #12]	@ (800227c <HAL_RCC_GetPCLK2Freq+0x24>)
 800226e:	5ccb      	ldrb	r3, [r1, r3]
 8002270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002274:	4618      	mov	r0, r3
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40023800 	.word	0x40023800
 800227c:	080054d0 	.word	0x080054d0

08002280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002284:	b0ae      	sub	sp, #184	@ 0xb8
 8002286:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800228e:	2300      	movs	r3, #0
 8002290:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800229a:	2300      	movs	r3, #0
 800229c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022a6:	4bcb      	ldr	r3, [pc, #812]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 030c 	and.w	r3, r3, #12
 80022ae:	2b0c      	cmp	r3, #12
 80022b0:	f200 8206 	bhi.w	80026c0 <HAL_RCC_GetSysClockFreq+0x440>
 80022b4:	a201      	add	r2, pc, #4	@ (adr r2, 80022bc <HAL_RCC_GetSysClockFreq+0x3c>)
 80022b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ba:	bf00      	nop
 80022bc:	080022f1 	.word	0x080022f1
 80022c0:	080026c1 	.word	0x080026c1
 80022c4:	080026c1 	.word	0x080026c1
 80022c8:	080026c1 	.word	0x080026c1
 80022cc:	080022f9 	.word	0x080022f9
 80022d0:	080026c1 	.word	0x080026c1
 80022d4:	080026c1 	.word	0x080026c1
 80022d8:	080026c1 	.word	0x080026c1
 80022dc:	08002301 	.word	0x08002301
 80022e0:	080026c1 	.word	0x080026c1
 80022e4:	080026c1 	.word	0x080026c1
 80022e8:	080026c1 	.word	0x080026c1
 80022ec:	080024f1 	.word	0x080024f1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022f0:	4bb9      	ldr	r3, [pc, #740]	@ (80025d8 <HAL_RCC_GetSysClockFreq+0x358>)
 80022f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80022f6:	e1e7      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022f8:	4bb8      	ldr	r3, [pc, #736]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x35c>)
 80022fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80022fe:	e1e3      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002300:	4bb4      	ldr	r3, [pc, #720]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002308:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800230c:	4bb1      	ldr	r3, [pc, #708]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d071      	beq.n	80023fc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002318:	4bae      	ldr	r3, [pc, #696]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	099b      	lsrs	r3, r3, #6
 800231e:	2200      	movs	r2, #0
 8002320:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002324:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002328:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800232c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002330:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002334:	2300      	movs	r3, #0
 8002336:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800233a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800233e:	4622      	mov	r2, r4
 8002340:	462b      	mov	r3, r5
 8002342:	f04f 0000 	mov.w	r0, #0
 8002346:	f04f 0100 	mov.w	r1, #0
 800234a:	0159      	lsls	r1, r3, #5
 800234c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002350:	0150      	lsls	r0, r2, #5
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4621      	mov	r1, r4
 8002358:	1a51      	subs	r1, r2, r1
 800235a:	6439      	str	r1, [r7, #64]	@ 0x40
 800235c:	4629      	mov	r1, r5
 800235e:	eb63 0301 	sbc.w	r3, r3, r1
 8002362:	647b      	str	r3, [r7, #68]	@ 0x44
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	f04f 0300 	mov.w	r3, #0
 800236c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002370:	4649      	mov	r1, r9
 8002372:	018b      	lsls	r3, r1, #6
 8002374:	4641      	mov	r1, r8
 8002376:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800237a:	4641      	mov	r1, r8
 800237c:	018a      	lsls	r2, r1, #6
 800237e:	4641      	mov	r1, r8
 8002380:	1a51      	subs	r1, r2, r1
 8002382:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002384:	4649      	mov	r1, r9
 8002386:	eb63 0301 	sbc.w	r3, r3, r1
 800238a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	f04f 0300 	mov.w	r3, #0
 8002394:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002398:	4649      	mov	r1, r9
 800239a:	00cb      	lsls	r3, r1, #3
 800239c:	4641      	mov	r1, r8
 800239e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023a2:	4641      	mov	r1, r8
 80023a4:	00ca      	lsls	r2, r1, #3
 80023a6:	4610      	mov	r0, r2
 80023a8:	4619      	mov	r1, r3
 80023aa:	4603      	mov	r3, r0
 80023ac:	4622      	mov	r2, r4
 80023ae:	189b      	adds	r3, r3, r2
 80023b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80023b2:	462b      	mov	r3, r5
 80023b4:	460a      	mov	r2, r1
 80023b6:	eb42 0303 	adc.w	r3, r2, r3
 80023ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80023c8:	4629      	mov	r1, r5
 80023ca:	024b      	lsls	r3, r1, #9
 80023cc:	4621      	mov	r1, r4
 80023ce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023d2:	4621      	mov	r1, r4
 80023d4:	024a      	lsls	r2, r1, #9
 80023d6:	4610      	mov	r0, r2
 80023d8:	4619      	mov	r1, r3
 80023da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023de:	2200      	movs	r2, #0
 80023e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80023e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80023e8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80023ec:	f7fe fbaa 	bl	8000b44 <__aeabi_uldivmod>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4613      	mov	r3, r2
 80023f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80023fa:	e067      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023fc:	4b75      	ldr	r3, [pc, #468]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	099b      	lsrs	r3, r3, #6
 8002402:	2200      	movs	r2, #0
 8002404:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002408:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800240c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002414:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002416:	2300      	movs	r3, #0
 8002418:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800241a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800241e:	4622      	mov	r2, r4
 8002420:	462b      	mov	r3, r5
 8002422:	f04f 0000 	mov.w	r0, #0
 8002426:	f04f 0100 	mov.w	r1, #0
 800242a:	0159      	lsls	r1, r3, #5
 800242c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002430:	0150      	lsls	r0, r2, #5
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4621      	mov	r1, r4
 8002438:	1a51      	subs	r1, r2, r1
 800243a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800243c:	4629      	mov	r1, r5
 800243e:	eb63 0301 	sbc.w	r3, r3, r1
 8002442:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	f04f 0300 	mov.w	r3, #0
 800244c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002450:	4649      	mov	r1, r9
 8002452:	018b      	lsls	r3, r1, #6
 8002454:	4641      	mov	r1, r8
 8002456:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800245a:	4641      	mov	r1, r8
 800245c:	018a      	lsls	r2, r1, #6
 800245e:	4641      	mov	r1, r8
 8002460:	ebb2 0a01 	subs.w	sl, r2, r1
 8002464:	4649      	mov	r1, r9
 8002466:	eb63 0b01 	sbc.w	fp, r3, r1
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	f04f 0300 	mov.w	r3, #0
 8002472:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002476:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800247a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800247e:	4692      	mov	sl, r2
 8002480:	469b      	mov	fp, r3
 8002482:	4623      	mov	r3, r4
 8002484:	eb1a 0303 	adds.w	r3, sl, r3
 8002488:	623b      	str	r3, [r7, #32]
 800248a:	462b      	mov	r3, r5
 800248c:	eb4b 0303 	adc.w	r3, fp, r3
 8002490:	627b      	str	r3, [r7, #36]	@ 0x24
 8002492:	f04f 0200 	mov.w	r2, #0
 8002496:	f04f 0300 	mov.w	r3, #0
 800249a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800249e:	4629      	mov	r1, r5
 80024a0:	028b      	lsls	r3, r1, #10
 80024a2:	4621      	mov	r1, r4
 80024a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024a8:	4621      	mov	r1, r4
 80024aa:	028a      	lsls	r2, r1, #10
 80024ac:	4610      	mov	r0, r2
 80024ae:	4619      	mov	r1, r3
 80024b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024b4:	2200      	movs	r2, #0
 80024b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80024b8:	677a      	str	r2, [r7, #116]	@ 0x74
 80024ba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80024be:	f7fe fb41 	bl	8000b44 <__aeabi_uldivmod>
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	4613      	mov	r3, r2
 80024c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024cc:	4b41      	ldr	r3, [pc, #260]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	0c1b      	lsrs	r3, r3, #16
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	3301      	adds	r3, #1
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80024de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80024e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80024ee:	e0eb      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024f0:	4b38      	ldr	r3, [pc, #224]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024fc:	4b35      	ldr	r3, [pc, #212]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d06b      	beq.n	80025e0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002508:	4b32      	ldr	r3, [pc, #200]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	099b      	lsrs	r3, r3, #6
 800250e:	2200      	movs	r2, #0
 8002510:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002512:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002514:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800251a:	663b      	str	r3, [r7, #96]	@ 0x60
 800251c:	2300      	movs	r3, #0
 800251e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002520:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002524:	4622      	mov	r2, r4
 8002526:	462b      	mov	r3, r5
 8002528:	f04f 0000 	mov.w	r0, #0
 800252c:	f04f 0100 	mov.w	r1, #0
 8002530:	0159      	lsls	r1, r3, #5
 8002532:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002536:	0150      	lsls	r0, r2, #5
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4621      	mov	r1, r4
 800253e:	1a51      	subs	r1, r2, r1
 8002540:	61b9      	str	r1, [r7, #24]
 8002542:	4629      	mov	r1, r5
 8002544:	eb63 0301 	sbc.w	r3, r3, r1
 8002548:	61fb      	str	r3, [r7, #28]
 800254a:	f04f 0200 	mov.w	r2, #0
 800254e:	f04f 0300 	mov.w	r3, #0
 8002552:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002556:	4659      	mov	r1, fp
 8002558:	018b      	lsls	r3, r1, #6
 800255a:	4651      	mov	r1, sl
 800255c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002560:	4651      	mov	r1, sl
 8002562:	018a      	lsls	r2, r1, #6
 8002564:	4651      	mov	r1, sl
 8002566:	ebb2 0801 	subs.w	r8, r2, r1
 800256a:	4659      	mov	r1, fp
 800256c:	eb63 0901 	sbc.w	r9, r3, r1
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800257c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002580:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002584:	4690      	mov	r8, r2
 8002586:	4699      	mov	r9, r3
 8002588:	4623      	mov	r3, r4
 800258a:	eb18 0303 	adds.w	r3, r8, r3
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	462b      	mov	r3, r5
 8002592:	eb49 0303 	adc.w	r3, r9, r3
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80025a4:	4629      	mov	r1, r5
 80025a6:	024b      	lsls	r3, r1, #9
 80025a8:	4621      	mov	r1, r4
 80025aa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025ae:	4621      	mov	r1, r4
 80025b0:	024a      	lsls	r2, r1, #9
 80025b2:	4610      	mov	r0, r2
 80025b4:	4619      	mov	r1, r3
 80025b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025ba:	2200      	movs	r2, #0
 80025bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80025be:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80025c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80025c4:	f7fe fabe 	bl	8000b44 <__aeabi_uldivmod>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4613      	mov	r3, r2
 80025ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80025d2:	e065      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x420>
 80025d4:	40023800 	.word	0x40023800
 80025d8:	00f42400 	.word	0x00f42400
 80025dc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025e0:	4b3d      	ldr	r3, [pc, #244]	@ (80026d8 <HAL_RCC_GetSysClockFreq+0x458>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	099b      	lsrs	r3, r3, #6
 80025e6:	2200      	movs	r2, #0
 80025e8:	4618      	mov	r0, r3
 80025ea:	4611      	mov	r1, r2
 80025ec:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80025f2:	2300      	movs	r3, #0
 80025f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80025f6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80025fa:	4642      	mov	r2, r8
 80025fc:	464b      	mov	r3, r9
 80025fe:	f04f 0000 	mov.w	r0, #0
 8002602:	f04f 0100 	mov.w	r1, #0
 8002606:	0159      	lsls	r1, r3, #5
 8002608:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800260c:	0150      	lsls	r0, r2, #5
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	4641      	mov	r1, r8
 8002614:	1a51      	subs	r1, r2, r1
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	4649      	mov	r1, r9
 800261a:	eb63 0301 	sbc.w	r3, r3, r1
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	f04f 0300 	mov.w	r3, #0
 8002628:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800262c:	4659      	mov	r1, fp
 800262e:	018b      	lsls	r3, r1, #6
 8002630:	4651      	mov	r1, sl
 8002632:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002636:	4651      	mov	r1, sl
 8002638:	018a      	lsls	r2, r1, #6
 800263a:	4651      	mov	r1, sl
 800263c:	1a54      	subs	r4, r2, r1
 800263e:	4659      	mov	r1, fp
 8002640:	eb63 0501 	sbc.w	r5, r3, r1
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	00eb      	lsls	r3, r5, #3
 800264e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002652:	00e2      	lsls	r2, r4, #3
 8002654:	4614      	mov	r4, r2
 8002656:	461d      	mov	r5, r3
 8002658:	4643      	mov	r3, r8
 800265a:	18e3      	adds	r3, r4, r3
 800265c:	603b      	str	r3, [r7, #0]
 800265e:	464b      	mov	r3, r9
 8002660:	eb45 0303 	adc.w	r3, r5, r3
 8002664:	607b      	str	r3, [r7, #4]
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	f04f 0300 	mov.w	r3, #0
 800266e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002672:	4629      	mov	r1, r5
 8002674:	028b      	lsls	r3, r1, #10
 8002676:	4621      	mov	r1, r4
 8002678:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800267c:	4621      	mov	r1, r4
 800267e:	028a      	lsls	r2, r1, #10
 8002680:	4610      	mov	r0, r2
 8002682:	4619      	mov	r1, r3
 8002684:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002688:	2200      	movs	r2, #0
 800268a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800268c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800268e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002692:	f7fe fa57 	bl	8000b44 <__aeabi_uldivmod>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	4613      	mov	r3, r2
 800269c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80026a0:	4b0d      	ldr	r3, [pc, #52]	@ (80026d8 <HAL_RCC_GetSysClockFreq+0x458>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	0f1b      	lsrs	r3, r3, #28
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80026ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80026b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80026be:	e003      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026c0:	4b06      	ldr	r3, [pc, #24]	@ (80026dc <HAL_RCC_GetSysClockFreq+0x45c>)
 80026c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80026c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	37b8      	adds	r7, #184	@ 0xb8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026d6:	bf00      	nop
 80026d8:	40023800 	.word	0x40023800
 80026dc:	00f42400 	.word	0x00f42400

080026e0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e28d      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 8083 	beq.w	8002806 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002700:	4b94      	ldr	r3, [pc, #592]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 030c 	and.w	r3, r3, #12
 8002708:	2b04      	cmp	r3, #4
 800270a:	d019      	beq.n	8002740 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800270c:	4b91      	ldr	r3, [pc, #580]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002714:	2b08      	cmp	r3, #8
 8002716:	d106      	bne.n	8002726 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002718:	4b8e      	ldr	r3, [pc, #568]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002720:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002724:	d00c      	beq.n	8002740 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002726:	4b8b      	ldr	r3, [pc, #556]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800272e:	2b0c      	cmp	r3, #12
 8002730:	d112      	bne.n	8002758 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002732:	4b88      	ldr	r3, [pc, #544]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800273a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800273e:	d10b      	bne.n	8002758 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002740:	4b84      	ldr	r3, [pc, #528]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d05b      	beq.n	8002804 <HAL_RCC_OscConfig+0x124>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d157      	bne.n	8002804 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e25a      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002760:	d106      	bne.n	8002770 <HAL_RCC_OscConfig+0x90>
 8002762:	4b7c      	ldr	r3, [pc, #496]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a7b      	ldr	r2, [pc, #492]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 8002768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	e01d      	b.n	80027ac <HAL_RCC_OscConfig+0xcc>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002778:	d10c      	bne.n	8002794 <HAL_RCC_OscConfig+0xb4>
 800277a:	4b76      	ldr	r3, [pc, #472]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a75      	ldr	r2, [pc, #468]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 8002780:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	4b73      	ldr	r3, [pc, #460]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a72      	ldr	r2, [pc, #456]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 800278c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	e00b      	b.n	80027ac <HAL_RCC_OscConfig+0xcc>
 8002794:	4b6f      	ldr	r3, [pc, #444]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a6e      	ldr	r2, [pc, #440]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 800279a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800279e:	6013      	str	r3, [r2, #0]
 80027a0:	4b6c      	ldr	r3, [pc, #432]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a6b      	ldr	r2, [pc, #428]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 80027a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d013      	beq.n	80027dc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b4:	f7fe fff0 	bl	8001798 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027bc:	f7fe ffec 	bl	8001798 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b64      	cmp	r3, #100	@ 0x64
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e21f      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ce:	4b61      	ldr	r3, [pc, #388]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0f0      	beq.n	80027bc <HAL_RCC_OscConfig+0xdc>
 80027da:	e014      	b.n	8002806 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027dc:	f7fe ffdc 	bl	8001798 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027e4:	f7fe ffd8 	bl	8001798 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b64      	cmp	r3, #100	@ 0x64
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e20b      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027f6:	4b57      	ldr	r3, [pc, #348]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1f0      	bne.n	80027e4 <HAL_RCC_OscConfig+0x104>
 8002802:	e000      	b.n	8002806 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d06f      	beq.n	80028f2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002812:	4b50      	ldr	r3, [pc, #320]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 030c 	and.w	r3, r3, #12
 800281a:	2b00      	cmp	r3, #0
 800281c:	d017      	beq.n	800284e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800281e:	4b4d      	ldr	r3, [pc, #308]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002826:	2b08      	cmp	r3, #8
 8002828:	d105      	bne.n	8002836 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800282a:	4b4a      	ldr	r3, [pc, #296]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00b      	beq.n	800284e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002836:	4b47      	ldr	r3, [pc, #284]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800283e:	2b0c      	cmp	r3, #12
 8002840:	d11c      	bne.n	800287c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002842:	4b44      	ldr	r3, [pc, #272]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d116      	bne.n	800287c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800284e:	4b41      	ldr	r3, [pc, #260]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d005      	beq.n	8002866 <HAL_RCC_OscConfig+0x186>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d001      	beq.n	8002866 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e1d3      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002866:	4b3b      	ldr	r3, [pc, #236]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	4937      	ldr	r1, [pc, #220]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 8002876:	4313      	orrs	r3, r2
 8002878:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800287a:	e03a      	b.n	80028f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d020      	beq.n	80028c6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002884:	4b34      	ldr	r3, [pc, #208]	@ (8002958 <HAL_RCC_OscConfig+0x278>)
 8002886:	2201      	movs	r2, #1
 8002888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288a:	f7fe ff85 	bl	8001798 <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002890:	e008      	b.n	80028a4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002892:	f7fe ff81 	bl	8001798 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e1b4      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0f0      	beq.n	8002892 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b0:	4b28      	ldr	r3, [pc, #160]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	4925      	ldr	r1, [pc, #148]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	600b      	str	r3, [r1, #0]
 80028c4:	e015      	b.n	80028f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028c6:	4b24      	ldr	r3, [pc, #144]	@ (8002958 <HAL_RCC_OscConfig+0x278>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028cc:	f7fe ff64 	bl	8001798 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028d4:	f7fe ff60 	bl	8001798 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e193      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d036      	beq.n	800296c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d016      	beq.n	8002934 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002906:	4b15      	ldr	r3, [pc, #84]	@ (800295c <HAL_RCC_OscConfig+0x27c>)
 8002908:	2201      	movs	r2, #1
 800290a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290c:	f7fe ff44 	bl	8001798 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002914:	f7fe ff40 	bl	8001798 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e173      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002926:	4b0b      	ldr	r3, [pc, #44]	@ (8002954 <HAL_RCC_OscConfig+0x274>)
 8002928:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0f0      	beq.n	8002914 <HAL_RCC_OscConfig+0x234>
 8002932:	e01b      	b.n	800296c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002934:	4b09      	ldr	r3, [pc, #36]	@ (800295c <HAL_RCC_OscConfig+0x27c>)
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293a:	f7fe ff2d 	bl	8001798 <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002940:	e00e      	b.n	8002960 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002942:	f7fe ff29 	bl	8001798 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d907      	bls.n	8002960 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e15c      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
 8002954:	40023800 	.word	0x40023800
 8002958:	42470000 	.word	0x42470000
 800295c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002960:	4b8a      	ldr	r3, [pc, #552]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002962:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1ea      	bne.n	8002942 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 8097 	beq.w	8002aa8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800297a:	2300      	movs	r3, #0
 800297c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800297e:	4b83      	ldr	r3, [pc, #524]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10f      	bne.n	80029aa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	4b7f      	ldr	r3, [pc, #508]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002992:	4a7e      	ldr	r2, [pc, #504]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002994:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002998:	6413      	str	r3, [r2, #64]	@ 0x40
 800299a:	4b7c      	ldr	r3, [pc, #496]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029a6:	2301      	movs	r3, #1
 80029a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029aa:	4b79      	ldr	r3, [pc, #484]	@ (8002b90 <HAL_RCC_OscConfig+0x4b0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d118      	bne.n	80029e8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029b6:	4b76      	ldr	r3, [pc, #472]	@ (8002b90 <HAL_RCC_OscConfig+0x4b0>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a75      	ldr	r2, [pc, #468]	@ (8002b90 <HAL_RCC_OscConfig+0x4b0>)
 80029bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029c2:	f7fe fee9 	bl	8001798 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ca:	f7fe fee5 	bl	8001798 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e118      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029dc:	4b6c      	ldr	r3, [pc, #432]	@ (8002b90 <HAL_RCC_OscConfig+0x4b0>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0f0      	beq.n	80029ca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d106      	bne.n	80029fe <HAL_RCC_OscConfig+0x31e>
 80029f0:	4b66      	ldr	r3, [pc, #408]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 80029f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f4:	4a65      	ldr	r2, [pc, #404]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80029fc:	e01c      	b.n	8002a38 <HAL_RCC_OscConfig+0x358>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	2b05      	cmp	r3, #5
 8002a04:	d10c      	bne.n	8002a20 <HAL_RCC_OscConfig+0x340>
 8002a06:	4b61      	ldr	r3, [pc, #388]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a0a:	4a60      	ldr	r2, [pc, #384]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002a0c:	f043 0304 	orr.w	r3, r3, #4
 8002a10:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a12:	4b5e      	ldr	r3, [pc, #376]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a16:	4a5d      	ldr	r2, [pc, #372]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a1e:	e00b      	b.n	8002a38 <HAL_RCC_OscConfig+0x358>
 8002a20:	4b5a      	ldr	r3, [pc, #360]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a24:	4a59      	ldr	r2, [pc, #356]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002a26:	f023 0301 	bic.w	r3, r3, #1
 8002a2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a2c:	4b57      	ldr	r3, [pc, #348]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a30:	4a56      	ldr	r2, [pc, #344]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002a32:	f023 0304 	bic.w	r3, r3, #4
 8002a36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d015      	beq.n	8002a6c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a40:	f7fe feaa 	bl	8001798 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a46:	e00a      	b.n	8002a5e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a48:	f7fe fea6 	bl	8001798 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e0d7      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5e:	4b4b      	ldr	r3, [pc, #300]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0ee      	beq.n	8002a48 <HAL_RCC_OscConfig+0x368>
 8002a6a:	e014      	b.n	8002a96 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6c:	f7fe fe94 	bl	8001798 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a72:	e00a      	b.n	8002a8a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a74:	f7fe fe90 	bl	8001798 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e0c1      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a8a:	4b40      	ldr	r3, [pc, #256]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1ee      	bne.n	8002a74 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a96:	7dfb      	ldrb	r3, [r7, #23]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d105      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a9c:	4b3b      	ldr	r3, [pc, #236]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa0:	4a3a      	ldr	r2, [pc, #232]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002aa2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002aa6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 80ad 	beq.w	8002c0c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ab2:	4b36      	ldr	r3, [pc, #216]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
 8002aba:	2b08      	cmp	r3, #8
 8002abc:	d060      	beq.n	8002b80 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d145      	bne.n	8002b52 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac6:	4b33      	ldr	r3, [pc, #204]	@ (8002b94 <HAL_RCC_OscConfig+0x4b4>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002acc:	f7fe fe64 	bl	8001798 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad4:	f7fe fe60 	bl	8001798 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e093      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae6:	4b29      	ldr	r3, [pc, #164]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f0      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69da      	ldr	r2, [r3, #28]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b00:	019b      	lsls	r3, r3, #6
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b08:	085b      	lsrs	r3, r3, #1
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	041b      	lsls	r3, r3, #16
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b14:	061b      	lsls	r3, r3, #24
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1c:	071b      	lsls	r3, r3, #28
 8002b1e:	491b      	ldr	r1, [pc, #108]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b24:	4b1b      	ldr	r3, [pc, #108]	@ (8002b94 <HAL_RCC_OscConfig+0x4b4>)
 8002b26:	2201      	movs	r2, #1
 8002b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2a:	f7fe fe35 	bl	8001798 <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b32:	f7fe fe31 	bl	8001798 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e064      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b44:	4b11      	ldr	r3, [pc, #68]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0f0      	beq.n	8002b32 <HAL_RCC_OscConfig+0x452>
 8002b50:	e05c      	b.n	8002c0c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b52:	4b10      	ldr	r3, [pc, #64]	@ (8002b94 <HAL_RCC_OscConfig+0x4b4>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b58:	f7fe fe1e 	bl	8001798 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b60:	f7fe fe1a 	bl	8001798 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e04d      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b72:	4b06      	ldr	r3, [pc, #24]	@ (8002b8c <HAL_RCC_OscConfig+0x4ac>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x480>
 8002b7e:	e045      	b.n	8002c0c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d107      	bne.n	8002b98 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e040      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	40007000 	.word	0x40007000
 8002b94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b98:	4b1f      	ldr	r3, [pc, #124]	@ (8002c18 <HAL_RCC_OscConfig+0x538>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d030      	beq.n	8002c08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d129      	bne.n	8002c08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d122      	bne.n	8002c08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002bc8:	4013      	ands	r3, r2
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d119      	bne.n	8002c08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bde:	085b      	lsrs	r3, r3, #1
 8002be0:	3b01      	subs	r3, #1
 8002be2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d10f      	bne.n	8002c08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d107      	bne.n	8002c08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c02:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d001      	beq.n	8002c0c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e000      	b.n	8002c0e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40023800 	.word	0x40023800

08002c1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e041      	b.n	8002cb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d106      	bne.n	8002c48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7fe fc06 	bl	8001454 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3304      	adds	r3, #4
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4610      	mov	r0, r2
 8002c5c:	f000 fa7e 	bl	800315c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
	...

08002cbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d001      	beq.n	8002cd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e04e      	b.n	8002d72 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0201 	orr.w	r2, r2, #1
 8002cea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a23      	ldr	r2, [pc, #140]	@ (8002d80 <HAL_TIM_Base_Start_IT+0xc4>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d022      	beq.n	8002d3c <HAL_TIM_Base_Start_IT+0x80>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cfe:	d01d      	beq.n	8002d3c <HAL_TIM_Base_Start_IT+0x80>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a1f      	ldr	r2, [pc, #124]	@ (8002d84 <HAL_TIM_Base_Start_IT+0xc8>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d018      	beq.n	8002d3c <HAL_TIM_Base_Start_IT+0x80>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a1e      	ldr	r2, [pc, #120]	@ (8002d88 <HAL_TIM_Base_Start_IT+0xcc>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d013      	beq.n	8002d3c <HAL_TIM_Base_Start_IT+0x80>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a1c      	ldr	r2, [pc, #112]	@ (8002d8c <HAL_TIM_Base_Start_IT+0xd0>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d00e      	beq.n	8002d3c <HAL_TIM_Base_Start_IT+0x80>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a1b      	ldr	r2, [pc, #108]	@ (8002d90 <HAL_TIM_Base_Start_IT+0xd4>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d009      	beq.n	8002d3c <HAL_TIM_Base_Start_IT+0x80>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a19      	ldr	r2, [pc, #100]	@ (8002d94 <HAL_TIM_Base_Start_IT+0xd8>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d004      	beq.n	8002d3c <HAL_TIM_Base_Start_IT+0x80>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a18      	ldr	r2, [pc, #96]	@ (8002d98 <HAL_TIM_Base_Start_IT+0xdc>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d111      	bne.n	8002d60 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2b06      	cmp	r3, #6
 8002d4c:	d010      	beq.n	8002d70 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f042 0201 	orr.w	r2, r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d5e:	e007      	b.n	8002d70 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0201 	orr.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40010000 	.word	0x40010000
 8002d84:	40000400 	.word	0x40000400
 8002d88:	40000800 	.word	0x40000800
 8002d8c:	40000c00 	.word	0x40000c00
 8002d90:	40010400 	.word	0x40010400
 8002d94:	40014000 	.word	0x40014000
 8002d98:	40001800 	.word	0x40001800

08002d9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d020      	beq.n	8002e00 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d01b      	beq.n	8002e00 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f06f 0202 	mvn.w	r2, #2
 8002dd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f999 	bl	800311e <HAL_TIM_IC_CaptureCallback>
 8002dec:	e005      	b.n	8002dfa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f98b 	bl	800310a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f99c 	bl	8003132 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d020      	beq.n	8002e4c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d01b      	beq.n	8002e4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f06f 0204 	mvn.w	r2, #4
 8002e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2202      	movs	r2, #2
 8002e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f973 	bl	800311e <HAL_TIM_IC_CaptureCallback>
 8002e38:	e005      	b.n	8002e46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f965 	bl	800310a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f976 	bl	8003132 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d020      	beq.n	8002e98 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f003 0308 	and.w	r3, r3, #8
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d01b      	beq.n	8002e98 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f06f 0208 	mvn.w	r2, #8
 8002e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2204      	movs	r2, #4
 8002e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	f003 0303 	and.w	r3, r3, #3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d003      	beq.n	8002e86 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f94d 	bl	800311e <HAL_TIM_IC_CaptureCallback>
 8002e84:	e005      	b.n	8002e92 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f93f 	bl	800310a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 f950 	bl	8003132 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	f003 0310 	and.w	r3, r3, #16
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d020      	beq.n	8002ee4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f003 0310 	and.w	r3, r3, #16
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d01b      	beq.n	8002ee4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f06f 0210 	mvn.w	r2, #16
 8002eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2208      	movs	r2, #8
 8002eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f927 	bl	800311e <HAL_TIM_IC_CaptureCallback>
 8002ed0:	e005      	b.n	8002ede <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f919 	bl	800310a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f92a 	bl	8003132 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00c      	beq.n	8002f08 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d007      	beq.n	8002f08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f06f 0201 	mvn.w	r2, #1
 8002f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7fe fa02 	bl	800130c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00c      	beq.n	8002f2c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d007      	beq.n	8002f2c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 fae4 	bl	80034f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00c      	beq.n	8002f50 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d007      	beq.n	8002f50 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f8fb 	bl	8003146 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f003 0320 	and.w	r3, r3, #32
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00c      	beq.n	8002f74 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f003 0320 	and.w	r3, r3, #32
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d007      	beq.n	8002f74 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f06f 0220 	mvn.w	r2, #32
 8002f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 fab6 	bl	80034e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f74:	bf00      	nop
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <HAL_TIM_ConfigClockSource+0x1c>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e0b4      	b.n	8003102 <HAL_TIM_ConfigClockSource+0x186>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002fb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002fbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fd0:	d03e      	beq.n	8003050 <HAL_TIM_ConfigClockSource+0xd4>
 8002fd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fd6:	f200 8087 	bhi.w	80030e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fde:	f000 8086 	beq.w	80030ee <HAL_TIM_ConfigClockSource+0x172>
 8002fe2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fe6:	d87f      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fe8:	2b70      	cmp	r3, #112	@ 0x70
 8002fea:	d01a      	beq.n	8003022 <HAL_TIM_ConfigClockSource+0xa6>
 8002fec:	2b70      	cmp	r3, #112	@ 0x70
 8002fee:	d87b      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff0:	2b60      	cmp	r3, #96	@ 0x60
 8002ff2:	d050      	beq.n	8003096 <HAL_TIM_ConfigClockSource+0x11a>
 8002ff4:	2b60      	cmp	r3, #96	@ 0x60
 8002ff6:	d877      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff8:	2b50      	cmp	r3, #80	@ 0x50
 8002ffa:	d03c      	beq.n	8003076 <HAL_TIM_ConfigClockSource+0xfa>
 8002ffc:	2b50      	cmp	r3, #80	@ 0x50
 8002ffe:	d873      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003000:	2b40      	cmp	r3, #64	@ 0x40
 8003002:	d058      	beq.n	80030b6 <HAL_TIM_ConfigClockSource+0x13a>
 8003004:	2b40      	cmp	r3, #64	@ 0x40
 8003006:	d86f      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003008:	2b30      	cmp	r3, #48	@ 0x30
 800300a:	d064      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0x15a>
 800300c:	2b30      	cmp	r3, #48	@ 0x30
 800300e:	d86b      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003010:	2b20      	cmp	r3, #32
 8003012:	d060      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0x15a>
 8003014:	2b20      	cmp	r3, #32
 8003016:	d867      	bhi.n	80030e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003018:	2b00      	cmp	r3, #0
 800301a:	d05c      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0x15a>
 800301c:	2b10      	cmp	r3, #16
 800301e:	d05a      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0x15a>
 8003020:	e062      	b.n	80030e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003032:	f000 f9b9 	bl	80033a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003044:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	609a      	str	r2, [r3, #8]
      break;
 800304e:	e04f      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003060:	f000 f9a2 	bl	80033a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003072:	609a      	str	r2, [r3, #8]
      break;
 8003074:	e03c      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003082:	461a      	mov	r2, r3
 8003084:	f000 f916 	bl	80032b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2150      	movs	r1, #80	@ 0x50
 800308e:	4618      	mov	r0, r3
 8003090:	f000 f96f 	bl	8003372 <TIM_ITRx_SetConfig>
      break;
 8003094:	e02c      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030a2:	461a      	mov	r2, r3
 80030a4:	f000 f935 	bl	8003312 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2160      	movs	r1, #96	@ 0x60
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 f95f 	bl	8003372 <TIM_ITRx_SetConfig>
      break;
 80030b4:	e01c      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030c2:	461a      	mov	r2, r3
 80030c4:	f000 f8f6 	bl	80032b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2140      	movs	r1, #64	@ 0x40
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 f94f 	bl	8003372 <TIM_ITRx_SetConfig>
      break;
 80030d4:	e00c      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4619      	mov	r1, r3
 80030e0:	4610      	mov	r0, r2
 80030e2:	f000 f946 	bl	8003372 <TIM_ITRx_SetConfig>
      break;
 80030e6:	e003      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
      break;
 80030ec:	e000      	b.n	80030f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80030ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003100:	7bfb      	ldrb	r3, [r7, #15]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800311e:	b480      	push	{r7}
 8003120:	b083      	sub	sp, #12
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
	...

0800315c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a46      	ldr	r2, [pc, #280]	@ (8003288 <TIM_Base_SetConfig+0x12c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d013      	beq.n	800319c <TIM_Base_SetConfig+0x40>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800317a:	d00f      	beq.n	800319c <TIM_Base_SetConfig+0x40>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a43      	ldr	r2, [pc, #268]	@ (800328c <TIM_Base_SetConfig+0x130>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d00b      	beq.n	800319c <TIM_Base_SetConfig+0x40>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a42      	ldr	r2, [pc, #264]	@ (8003290 <TIM_Base_SetConfig+0x134>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d007      	beq.n	800319c <TIM_Base_SetConfig+0x40>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a41      	ldr	r2, [pc, #260]	@ (8003294 <TIM_Base_SetConfig+0x138>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d003      	beq.n	800319c <TIM_Base_SetConfig+0x40>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a40      	ldr	r2, [pc, #256]	@ (8003298 <TIM_Base_SetConfig+0x13c>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d108      	bne.n	80031ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a35      	ldr	r2, [pc, #212]	@ (8003288 <TIM_Base_SetConfig+0x12c>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d02b      	beq.n	800320e <TIM_Base_SetConfig+0xb2>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031bc:	d027      	beq.n	800320e <TIM_Base_SetConfig+0xb2>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a32      	ldr	r2, [pc, #200]	@ (800328c <TIM_Base_SetConfig+0x130>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d023      	beq.n	800320e <TIM_Base_SetConfig+0xb2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a31      	ldr	r2, [pc, #196]	@ (8003290 <TIM_Base_SetConfig+0x134>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d01f      	beq.n	800320e <TIM_Base_SetConfig+0xb2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a30      	ldr	r2, [pc, #192]	@ (8003294 <TIM_Base_SetConfig+0x138>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d01b      	beq.n	800320e <TIM_Base_SetConfig+0xb2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a2f      	ldr	r2, [pc, #188]	@ (8003298 <TIM_Base_SetConfig+0x13c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d017      	beq.n	800320e <TIM_Base_SetConfig+0xb2>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a2e      	ldr	r2, [pc, #184]	@ (800329c <TIM_Base_SetConfig+0x140>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d013      	beq.n	800320e <TIM_Base_SetConfig+0xb2>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a2d      	ldr	r2, [pc, #180]	@ (80032a0 <TIM_Base_SetConfig+0x144>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d00f      	beq.n	800320e <TIM_Base_SetConfig+0xb2>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a2c      	ldr	r2, [pc, #176]	@ (80032a4 <TIM_Base_SetConfig+0x148>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d00b      	beq.n	800320e <TIM_Base_SetConfig+0xb2>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a2b      	ldr	r2, [pc, #172]	@ (80032a8 <TIM_Base_SetConfig+0x14c>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d007      	beq.n	800320e <TIM_Base_SetConfig+0xb2>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a2a      	ldr	r2, [pc, #168]	@ (80032ac <TIM_Base_SetConfig+0x150>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d003      	beq.n	800320e <TIM_Base_SetConfig+0xb2>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a29      	ldr	r2, [pc, #164]	@ (80032b0 <TIM_Base_SetConfig+0x154>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d108      	bne.n	8003220 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003214:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	4313      	orrs	r3, r2
 800321e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	4313      	orrs	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a10      	ldr	r2, [pc, #64]	@ (8003288 <TIM_Base_SetConfig+0x12c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d003      	beq.n	8003254 <TIM_Base_SetConfig+0xf8>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a12      	ldr	r2, [pc, #72]	@ (8003298 <TIM_Base_SetConfig+0x13c>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d103      	bne.n	800325c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b01      	cmp	r3, #1
 800326c:	d105      	bne.n	800327a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	f023 0201 	bic.w	r2, r3, #1
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	611a      	str	r2, [r3, #16]
  }
}
 800327a:	bf00      	nop
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	40010000 	.word	0x40010000
 800328c:	40000400 	.word	0x40000400
 8003290:	40000800 	.word	0x40000800
 8003294:	40000c00 	.word	0x40000c00
 8003298:	40010400 	.word	0x40010400
 800329c:	40014000 	.word	0x40014000
 80032a0:	40014400 	.word	0x40014400
 80032a4:	40014800 	.word	0x40014800
 80032a8:	40001800 	.word	0x40001800
 80032ac:	40001c00 	.word	0x40001c00
 80032b0:	40002000 	.word	0x40002000

080032b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	f023 0201 	bic.w	r2, r3, #1
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f023 030a 	bic.w	r3, r3, #10
 80032f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	621a      	str	r2, [r3, #32]
}
 8003306:	bf00      	nop
 8003308:	371c      	adds	r7, #28
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003312:	b480      	push	{r7}
 8003314:	b087      	sub	sp, #28
 8003316:	af00      	add	r7, sp, #0
 8003318:	60f8      	str	r0, [r7, #12]
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	f023 0210 	bic.w	r2, r3, #16
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800333c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	031b      	lsls	r3, r3, #12
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800334e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	4313      	orrs	r3, r2
 8003358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	621a      	str	r2, [r3, #32]
}
 8003366:	bf00      	nop
 8003368:	371c      	adds	r7, #28
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003372:	b480      	push	{r7}
 8003374:	b085      	sub	sp, #20
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003388:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4313      	orrs	r3, r2
 8003390:	f043 0307 	orr.w	r3, r3, #7
 8003394:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	609a      	str	r2, [r3, #8]
}
 800339c:	bf00      	nop
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
 80033b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80033c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	021a      	lsls	r2, r3, #8
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	431a      	orrs	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	609a      	str	r2, [r3, #8]
}
 80033dc:	bf00      	nop
 80033de:	371c      	adds	r7, #28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e05a      	b.n	80034b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003426:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	4313      	orrs	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a21      	ldr	r2, [pc, #132]	@ (80034c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d022      	beq.n	800348a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800344c:	d01d      	beq.n	800348a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a1d      	ldr	r2, [pc, #116]	@ (80034c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d018      	beq.n	800348a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a1b      	ldr	r2, [pc, #108]	@ (80034cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d013      	beq.n	800348a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a1a      	ldr	r2, [pc, #104]	@ (80034d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d00e      	beq.n	800348a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a18      	ldr	r2, [pc, #96]	@ (80034d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d009      	beq.n	800348a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a17      	ldr	r2, [pc, #92]	@ (80034d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d004      	beq.n	800348a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a15      	ldr	r2, [pc, #84]	@ (80034dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d10c      	bne.n	80034a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003490:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	4313      	orrs	r3, r2
 800349a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40010000 	.word	0x40010000
 80034c8:	40000400 	.word	0x40000400
 80034cc:	40000800 	.word	0x40000800
 80034d0:	40000c00 	.word	0x40000c00
 80034d4:	40010400 	.word	0x40010400
 80034d8:	40014000 	.word	0x40014000
 80034dc:	40001800 	.word	0x40001800

080034e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e042      	b.n	80035a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d106      	bne.n	8003534 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7fd ffb6 	bl	80014a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2224      	movs	r2, #36	@ 0x24
 8003538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68da      	ldr	r2, [r3, #12]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800354a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 fcdb 	bl	8003f08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	691a      	ldr	r2, [r3, #16]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003560:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	695a      	ldr	r2, [r3, #20]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003570:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003580:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	4613      	mov	r3, r2
 80035b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b20      	cmp	r3, #32
 80035c0:	d112      	bne.n	80035e8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d002      	beq.n	80035ce <HAL_UART_Receive_IT+0x26>
 80035c8:	88fb      	ldrh	r3, [r7, #6]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e00b      	b.n	80035ea <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80035d8:	88fb      	ldrh	r3, [r7, #6]
 80035da:	461a      	mov	r2, r3
 80035dc:	68b9      	ldr	r1, [r7, #8]
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 faba 	bl	8003b58 <UART_Start_Receive_IT>
 80035e4:	4603      	mov	r3, r0
 80035e6:	e000      	b.n	80035ea <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80035e8:	2302      	movs	r3, #2
  }
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
	...

080035f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b0ba      	sub	sp, #232	@ 0xe8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800361a:	2300      	movs	r3, #0
 800361c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003620:	2300      	movs	r3, #0
 8003622:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003632:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10f      	bne.n	800365a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800363a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	2b00      	cmp	r3, #0
 8003644:	d009      	beq.n	800365a <HAL_UART_IRQHandler+0x66>
 8003646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800364a:	f003 0320 	and.w	r3, r3, #32
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 fb99 	bl	8003d8a <UART_Receive_IT>
      return;
 8003658:	e25b      	b.n	8003b12 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800365a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 80de 	beq.w	8003820 <HAL_UART_IRQHandler+0x22c>
 8003664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b00      	cmp	r3, #0
 800366e:	d106      	bne.n	800367e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003674:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 80d1 	beq.w	8003820 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800367e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00b      	beq.n	80036a2 <HAL_UART_IRQHandler+0xae>
 800368a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800368e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003692:	2b00      	cmp	r3, #0
 8003694:	d005      	beq.n	80036a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369a:	f043 0201 	orr.w	r2, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036a6:	f003 0304 	and.w	r3, r3, #4
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00b      	beq.n	80036c6 <HAL_UART_IRQHandler+0xd2>
 80036ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d005      	beq.n	80036c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036be:	f043 0202 	orr.w	r2, r3, #2
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00b      	beq.n	80036ea <HAL_UART_IRQHandler+0xf6>
 80036d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d005      	beq.n	80036ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e2:	f043 0204 	orr.w	r2, r3, #4
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80036ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d011      	beq.n	800371a <HAL_UART_IRQHandler+0x126>
 80036f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036fa:	f003 0320 	and.w	r3, r3, #32
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d105      	bne.n	800370e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d005      	beq.n	800371a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003712:	f043 0208 	orr.w	r2, r3, #8
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 81f2 	beq.w	8003b08 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003728:	f003 0320 	and.w	r3, r3, #32
 800372c:	2b00      	cmp	r3, #0
 800372e:	d008      	beq.n	8003742 <HAL_UART_IRQHandler+0x14e>
 8003730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003734:	f003 0320 	and.w	r3, r3, #32
 8003738:	2b00      	cmp	r3, #0
 800373a:	d002      	beq.n	8003742 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 fb24 	bl	8003d8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800374c:	2b40      	cmp	r3, #64	@ 0x40
 800374e:	bf0c      	ite	eq
 8003750:	2301      	moveq	r3, #1
 8003752:	2300      	movne	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d103      	bne.n	800376e <HAL_UART_IRQHandler+0x17a>
 8003766:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800376a:	2b00      	cmp	r3, #0
 800376c:	d04f      	beq.n	800380e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 fa2c 	bl	8003bcc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800377e:	2b40      	cmp	r3, #64	@ 0x40
 8003780:	d141      	bne.n	8003806 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	3314      	adds	r3, #20
 8003788:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003790:	e853 3f00 	ldrex	r3, [r3]
 8003794:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003798:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800379c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	3314      	adds	r3, #20
 80037aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80037ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80037b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80037ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80037be:	e841 2300 	strex	r3, r2, [r1]
 80037c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80037c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1d9      	bne.n	8003782 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d013      	beq.n	80037fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037da:	4a7e      	ldr	r2, [pc, #504]	@ (80039d4 <HAL_UART_IRQHandler+0x3e0>)
 80037dc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fe fa61 	bl	8001caa <HAL_DMA_Abort_IT>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d016      	beq.n	800381c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80037f8:	4610      	mov	r0, r2
 80037fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037fc:	e00e      	b.n	800381c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f994 	bl	8003b2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003804:	e00a      	b.n	800381c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f990 	bl	8003b2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800380c:	e006      	b.n	800381c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f98c 	bl	8003b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800381a:	e175      	b.n	8003b08 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800381c:	bf00      	nop
    return;
 800381e:	e173      	b.n	8003b08 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003824:	2b01      	cmp	r3, #1
 8003826:	f040 814f 	bne.w	8003ac8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800382a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800382e:	f003 0310 	and.w	r3, r3, #16
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 8148 	beq.w	8003ac8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800383c:	f003 0310 	and.w	r3, r3, #16
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 8141 	beq.w	8003ac8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003846:	2300      	movs	r3, #0
 8003848:	60bb      	str	r3, [r7, #8]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	60bb      	str	r3, [r7, #8]
 800385a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003866:	2b40      	cmp	r3, #64	@ 0x40
 8003868:	f040 80b6 	bne.w	80039d8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003878:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 8145 	beq.w	8003b0c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003886:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800388a:	429a      	cmp	r2, r3
 800388c:	f080 813e 	bcs.w	8003b0c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003896:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038a2:	f000 8088 	beq.w	80039b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	330c      	adds	r3, #12
 80038ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038b4:	e853 3f00 	ldrex	r3, [r3]
 80038b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80038bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	330c      	adds	r3, #12
 80038ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80038d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80038d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80038de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80038e2:	e841 2300 	strex	r3, r2, [r1]
 80038e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80038ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1d9      	bne.n	80038a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	3314      	adds	r3, #20
 80038f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038fc:	e853 3f00 	ldrex	r3, [r3]
 8003900:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003902:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003904:	f023 0301 	bic.w	r3, r3, #1
 8003908:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	3314      	adds	r3, #20
 8003912:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003916:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800391a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800391e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003922:	e841 2300 	strex	r3, r2, [r1]
 8003926:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003928:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1e1      	bne.n	80038f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3314      	adds	r3, #20
 8003934:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003936:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003938:	e853 3f00 	ldrex	r3, [r3]
 800393c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800393e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003940:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003944:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	3314      	adds	r3, #20
 800394e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003952:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003954:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003956:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003958:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800395a:	e841 2300 	strex	r3, r2, [r1]
 800395e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003960:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1e3      	bne.n	800392e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2220      	movs	r2, #32
 800396a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	330c      	adds	r3, #12
 800397a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800397e:	e853 3f00 	ldrex	r3, [r3]
 8003982:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003984:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003986:	f023 0310 	bic.w	r3, r3, #16
 800398a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	330c      	adds	r3, #12
 8003994:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003998:	65ba      	str	r2, [r7, #88]	@ 0x58
 800399a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800399e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039a0:	e841 2300 	strex	r3, r2, [r1]
 80039a4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80039a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1e3      	bne.n	8003974 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fe f90a 	bl	8001bca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2202      	movs	r2, #2
 80039ba:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	4619      	mov	r1, r3
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f8b7 	bl	8003b40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039d2:	e09b      	b.n	8003b0c <HAL_UART_IRQHandler+0x518>
 80039d4:	08003c93 	.word	0x08003c93
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 808e 	beq.w	8003b10 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80039f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 8089 	beq.w	8003b10 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	330c      	adds	r3, #12
 8003a04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a08:	e853 3f00 	ldrex	r3, [r3]
 8003a0c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	330c      	adds	r3, #12
 8003a1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003a22:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a24:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a26:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a2a:	e841 2300 	strex	r3, r2, [r1]
 8003a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1e3      	bne.n	80039fe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	3314      	adds	r3, #20
 8003a3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a40:	e853 3f00 	ldrex	r3, [r3]
 8003a44:	623b      	str	r3, [r7, #32]
   return(result);
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	f023 0301 	bic.w	r3, r3, #1
 8003a4c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3314      	adds	r3, #20
 8003a56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003a5a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a62:	e841 2300 	strex	r3, r2, [r1]
 8003a66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1e3      	bne.n	8003a36 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	330c      	adds	r3, #12
 8003a82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	e853 3f00 	ldrex	r3, [r3]
 8003a8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f023 0310 	bic.w	r3, r3, #16
 8003a92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	330c      	adds	r3, #12
 8003a9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003aa0:	61fa      	str	r2, [r7, #28]
 8003aa2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa4:	69b9      	ldr	r1, [r7, #24]
 8003aa6:	69fa      	ldr	r2, [r7, #28]
 8003aa8:	e841 2300 	strex	r3, r2, [r1]
 8003aac:	617b      	str	r3, [r7, #20]
   return(result);
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1e3      	bne.n	8003a7c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003aba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003abe:	4619      	mov	r1, r3
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f83d 	bl	8003b40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ac6:	e023      	b.n	8003b10 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003acc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d009      	beq.n	8003ae8 <HAL_UART_IRQHandler+0x4f4>
 8003ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ad8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f8ea 	bl	8003cba <UART_Transmit_IT>
    return;
 8003ae6:	e014      	b.n	8003b12 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00e      	beq.n	8003b12 <HAL_UART_IRQHandler+0x51e>
 8003af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d008      	beq.n	8003b12 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f92a 	bl	8003d5a <UART_EndTransmit_IT>
    return;
 8003b06:	e004      	b.n	8003b12 <HAL_UART_IRQHandler+0x51e>
    return;
 8003b08:	bf00      	nop
 8003b0a:	e002      	b.n	8003b12 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b0c:	bf00      	nop
 8003b0e:	e000      	b.n	8003b12 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b10:	bf00      	nop
  }
}
 8003b12:	37e8      	adds	r7, #232	@ 0xe8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	4613      	mov	r3, r2
 8003b64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	88fa      	ldrh	r2, [r7, #6]
 8003b70:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	88fa      	ldrh	r2, [r7, #6]
 8003b76:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2222      	movs	r2, #34	@ 0x22
 8003b82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d007      	beq.n	8003b9e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68da      	ldr	r2, [r3, #12]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b9c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695a      	ldr	r2, [r3, #20]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f042 0201 	orr.w	r2, r2, #1
 8003bac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68da      	ldr	r2, [r3, #12]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f042 0220 	orr.w	r2, r2, #32
 8003bbc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3714      	adds	r7, #20
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b095      	sub	sp, #84	@ 0x54
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	330c      	adds	r3, #12
 8003bda:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bde:	e853 3f00 	ldrex	r3, [r3]
 8003be2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	330c      	adds	r3, #12
 8003bf2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bf4:	643a      	str	r2, [r7, #64]	@ 0x40
 8003bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bfa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bfc:	e841 2300 	strex	r3, r2, [r1]
 8003c00:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1e5      	bne.n	8003bd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	3314      	adds	r3, #20
 8003c0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	e853 3f00 	ldrex	r3, [r3]
 8003c16:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	f023 0301 	bic.w	r3, r3, #1
 8003c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3314      	adds	r3, #20
 8003c26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c30:	e841 2300 	strex	r3, r2, [r1]
 8003c34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1e5      	bne.n	8003c08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d119      	bne.n	8003c78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	330c      	adds	r3, #12
 8003c4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	e853 3f00 	ldrex	r3, [r3]
 8003c52:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f023 0310 	bic.w	r3, r3, #16
 8003c5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	330c      	adds	r3, #12
 8003c62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c64:	61ba      	str	r2, [r7, #24]
 8003c66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c68:	6979      	ldr	r1, [r7, #20]
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	e841 2300 	strex	r3, r2, [r1]
 8003c70:	613b      	str	r3, [r7, #16]
   return(result);
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1e5      	bne.n	8003c44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c86:	bf00      	nop
 8003c88:	3754      	adds	r7, #84	@ 0x54
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b084      	sub	sp, #16
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f7ff ff3d 	bl	8003b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cb2:	bf00      	nop
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b085      	sub	sp, #20
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b21      	cmp	r3, #33	@ 0x21
 8003ccc:	d13e      	bne.n	8003d4c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cd6:	d114      	bne.n	8003d02 <UART_Transmit_IT+0x48>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d110      	bne.n	8003d02 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	881b      	ldrh	r3, [r3, #0]
 8003cea:	461a      	mov	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cf4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	1c9a      	adds	r2, r3, #2
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	621a      	str	r2, [r3, #32]
 8003d00:	e008      	b.n	8003d14 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	1c59      	adds	r1, r3, #1
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6211      	str	r1, [r2, #32]
 8003d0c:	781a      	ldrb	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	4619      	mov	r1, r3
 8003d22:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10f      	bne.n	8003d48 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d36:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68da      	ldr	r2, [r3, #12]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d46:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	e000      	b.n	8003d4e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d4c:	2302      	movs	r3, #2
  }
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b082      	sub	sp, #8
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68da      	ldr	r2, [r3, #12]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2220      	movs	r2, #32
 8003d76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff fecc 	bl	8003b18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b08c      	sub	sp, #48	@ 0x30
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b22      	cmp	r3, #34	@ 0x22
 8003d9c:	f040 80ae 	bne.w	8003efc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003da8:	d117      	bne.n	8003dda <UART_Receive_IT+0x50>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d113      	bne.n	8003dda <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003db2:	2300      	movs	r3, #0
 8003db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dba:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dcc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd2:	1c9a      	adds	r2, r3, #2
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003dd8:	e026      	b.n	8003e28 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003de0:	2300      	movs	r3, #0
 8003de2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dec:	d007      	beq.n	8003dfe <UART_Receive_IT+0x74>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10a      	bne.n	8003e0c <UART_Receive_IT+0x82>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d106      	bne.n	8003e0c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	b2da      	uxtb	r2, r3
 8003e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e08:	701a      	strb	r2, [r3, #0]
 8003e0a:	e008      	b.n	8003e1e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e18:	b2da      	uxtb	r2, r3
 8003e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e1c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	4619      	mov	r1, r3
 8003e36:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d15d      	bne.n	8003ef8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0220 	bic.w	r2, r2, #32
 8003e4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	695a      	ldr	r2, [r3, #20]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0201 	bic.w	r2, r2, #1
 8003e6a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d135      	bne.n	8003eee <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	330c      	adds	r3, #12
 8003e8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	e853 3f00 	ldrex	r3, [r3]
 8003e96:	613b      	str	r3, [r7, #16]
   return(result);
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	f023 0310 	bic.w	r3, r3, #16
 8003e9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	330c      	adds	r3, #12
 8003ea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ea8:	623a      	str	r2, [r7, #32]
 8003eaa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eac:	69f9      	ldr	r1, [r7, #28]
 8003eae:	6a3a      	ldr	r2, [r7, #32]
 8003eb0:	e841 2300 	strex	r3, r2, [r1]
 8003eb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1e5      	bne.n	8003e88 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0310 	and.w	r3, r3, #16
 8003ec6:	2b10      	cmp	r3, #16
 8003ec8:	d10a      	bne.n	8003ee0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60fb      	str	r3, [r7, #12]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7ff fe2a 	bl	8003b40 <HAL_UARTEx_RxEventCallback>
 8003eec:	e002      	b.n	8003ef4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7fd fa22 	bl	8001338 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	e002      	b.n	8003efe <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	e000      	b.n	8003efe <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003efc:	2302      	movs	r3, #2
  }
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3730      	adds	r7, #48	@ 0x30
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
	...

08003f08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f0c:	b0c0      	sub	sp, #256	@ 0x100
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f24:	68d9      	ldr	r1, [r3, #12]
 8003f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	ea40 0301 	orr.w	r3, r0, r1
 8003f30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	431a      	orrs	r2, r3
 8003f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003f60:	f021 010c 	bic.w	r1, r1, #12
 8003f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003f6e:	430b      	orrs	r3, r1
 8003f70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f82:	6999      	ldr	r1, [r3, #24]
 8003f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	ea40 0301 	orr.w	r3, r0, r1
 8003f8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	4b8f      	ldr	r3, [pc, #572]	@ (80041d4 <UART_SetConfig+0x2cc>)
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d005      	beq.n	8003fa8 <UART_SetConfig+0xa0>
 8003f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	4b8d      	ldr	r3, [pc, #564]	@ (80041d8 <UART_SetConfig+0x2d0>)
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d104      	bne.n	8003fb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fa8:	f7fe f956 	bl	8002258 <HAL_RCC_GetPCLK2Freq>
 8003fac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003fb0:	e003      	b.n	8003fba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fb2:	f7fe f93d 	bl	8002230 <HAL_RCC_GetPCLK1Freq>
 8003fb6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fc4:	f040 810c 	bne.w	80041e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003fd2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003fd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003fda:	4622      	mov	r2, r4
 8003fdc:	462b      	mov	r3, r5
 8003fde:	1891      	adds	r1, r2, r2
 8003fe0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003fe2:	415b      	adcs	r3, r3
 8003fe4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fe6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003fea:	4621      	mov	r1, r4
 8003fec:	eb12 0801 	adds.w	r8, r2, r1
 8003ff0:	4629      	mov	r1, r5
 8003ff2:	eb43 0901 	adc.w	r9, r3, r1
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	f04f 0300 	mov.w	r3, #0
 8003ffe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004002:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004006:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800400a:	4690      	mov	r8, r2
 800400c:	4699      	mov	r9, r3
 800400e:	4623      	mov	r3, r4
 8004010:	eb18 0303 	adds.w	r3, r8, r3
 8004014:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004018:	462b      	mov	r3, r5
 800401a:	eb49 0303 	adc.w	r3, r9, r3
 800401e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800402e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004032:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004036:	460b      	mov	r3, r1
 8004038:	18db      	adds	r3, r3, r3
 800403a:	653b      	str	r3, [r7, #80]	@ 0x50
 800403c:	4613      	mov	r3, r2
 800403e:	eb42 0303 	adc.w	r3, r2, r3
 8004042:	657b      	str	r3, [r7, #84]	@ 0x54
 8004044:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004048:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800404c:	f7fc fd7a 	bl	8000b44 <__aeabi_uldivmod>
 8004050:	4602      	mov	r2, r0
 8004052:	460b      	mov	r3, r1
 8004054:	4b61      	ldr	r3, [pc, #388]	@ (80041dc <UART_SetConfig+0x2d4>)
 8004056:	fba3 2302 	umull	r2, r3, r3, r2
 800405a:	095b      	lsrs	r3, r3, #5
 800405c:	011c      	lsls	r4, r3, #4
 800405e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004062:	2200      	movs	r2, #0
 8004064:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004068:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800406c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004070:	4642      	mov	r2, r8
 8004072:	464b      	mov	r3, r9
 8004074:	1891      	adds	r1, r2, r2
 8004076:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004078:	415b      	adcs	r3, r3
 800407a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800407c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004080:	4641      	mov	r1, r8
 8004082:	eb12 0a01 	adds.w	sl, r2, r1
 8004086:	4649      	mov	r1, r9
 8004088:	eb43 0b01 	adc.w	fp, r3, r1
 800408c:	f04f 0200 	mov.w	r2, #0
 8004090:	f04f 0300 	mov.w	r3, #0
 8004094:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004098:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800409c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040a0:	4692      	mov	sl, r2
 80040a2:	469b      	mov	fp, r3
 80040a4:	4643      	mov	r3, r8
 80040a6:	eb1a 0303 	adds.w	r3, sl, r3
 80040aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80040ae:	464b      	mov	r3, r9
 80040b0:	eb4b 0303 	adc.w	r3, fp, r3
 80040b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80040b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80040c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80040cc:	460b      	mov	r3, r1
 80040ce:	18db      	adds	r3, r3, r3
 80040d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80040d2:	4613      	mov	r3, r2
 80040d4:	eb42 0303 	adc.w	r3, r2, r3
 80040d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80040da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80040de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80040e2:	f7fc fd2f 	bl	8000b44 <__aeabi_uldivmod>
 80040e6:	4602      	mov	r2, r0
 80040e8:	460b      	mov	r3, r1
 80040ea:	4611      	mov	r1, r2
 80040ec:	4b3b      	ldr	r3, [pc, #236]	@ (80041dc <UART_SetConfig+0x2d4>)
 80040ee:	fba3 2301 	umull	r2, r3, r3, r1
 80040f2:	095b      	lsrs	r3, r3, #5
 80040f4:	2264      	movs	r2, #100	@ 0x64
 80040f6:	fb02 f303 	mul.w	r3, r2, r3
 80040fa:	1acb      	subs	r3, r1, r3
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004102:	4b36      	ldr	r3, [pc, #216]	@ (80041dc <UART_SetConfig+0x2d4>)
 8004104:	fba3 2302 	umull	r2, r3, r3, r2
 8004108:	095b      	lsrs	r3, r3, #5
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004110:	441c      	add	r4, r3
 8004112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004116:	2200      	movs	r2, #0
 8004118:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800411c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004120:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004124:	4642      	mov	r2, r8
 8004126:	464b      	mov	r3, r9
 8004128:	1891      	adds	r1, r2, r2
 800412a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800412c:	415b      	adcs	r3, r3
 800412e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004130:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004134:	4641      	mov	r1, r8
 8004136:	1851      	adds	r1, r2, r1
 8004138:	6339      	str	r1, [r7, #48]	@ 0x30
 800413a:	4649      	mov	r1, r9
 800413c:	414b      	adcs	r3, r1
 800413e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004140:	f04f 0200 	mov.w	r2, #0
 8004144:	f04f 0300 	mov.w	r3, #0
 8004148:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800414c:	4659      	mov	r1, fp
 800414e:	00cb      	lsls	r3, r1, #3
 8004150:	4651      	mov	r1, sl
 8004152:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004156:	4651      	mov	r1, sl
 8004158:	00ca      	lsls	r2, r1, #3
 800415a:	4610      	mov	r0, r2
 800415c:	4619      	mov	r1, r3
 800415e:	4603      	mov	r3, r0
 8004160:	4642      	mov	r2, r8
 8004162:	189b      	adds	r3, r3, r2
 8004164:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004168:	464b      	mov	r3, r9
 800416a:	460a      	mov	r2, r1
 800416c:	eb42 0303 	adc.w	r3, r2, r3
 8004170:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004180:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004184:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004188:	460b      	mov	r3, r1
 800418a:	18db      	adds	r3, r3, r3
 800418c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800418e:	4613      	mov	r3, r2
 8004190:	eb42 0303 	adc.w	r3, r2, r3
 8004194:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004196:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800419a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800419e:	f7fc fcd1 	bl	8000b44 <__aeabi_uldivmod>
 80041a2:	4602      	mov	r2, r0
 80041a4:	460b      	mov	r3, r1
 80041a6:	4b0d      	ldr	r3, [pc, #52]	@ (80041dc <UART_SetConfig+0x2d4>)
 80041a8:	fba3 1302 	umull	r1, r3, r3, r2
 80041ac:	095b      	lsrs	r3, r3, #5
 80041ae:	2164      	movs	r1, #100	@ 0x64
 80041b0:	fb01 f303 	mul.w	r3, r1, r3
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	3332      	adds	r3, #50	@ 0x32
 80041ba:	4a08      	ldr	r2, [pc, #32]	@ (80041dc <UART_SetConfig+0x2d4>)
 80041bc:	fba2 2303 	umull	r2, r3, r2, r3
 80041c0:	095b      	lsrs	r3, r3, #5
 80041c2:	f003 0207 	and.w	r2, r3, #7
 80041c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4422      	add	r2, r4
 80041ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041d0:	e106      	b.n	80043e0 <UART_SetConfig+0x4d8>
 80041d2:	bf00      	nop
 80041d4:	40011000 	.word	0x40011000
 80041d8:	40011400 	.word	0x40011400
 80041dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041e4:	2200      	movs	r2, #0
 80041e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80041ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80041ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80041f2:	4642      	mov	r2, r8
 80041f4:	464b      	mov	r3, r9
 80041f6:	1891      	adds	r1, r2, r2
 80041f8:	6239      	str	r1, [r7, #32]
 80041fa:	415b      	adcs	r3, r3
 80041fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80041fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004202:	4641      	mov	r1, r8
 8004204:	1854      	adds	r4, r2, r1
 8004206:	4649      	mov	r1, r9
 8004208:	eb43 0501 	adc.w	r5, r3, r1
 800420c:	f04f 0200 	mov.w	r2, #0
 8004210:	f04f 0300 	mov.w	r3, #0
 8004214:	00eb      	lsls	r3, r5, #3
 8004216:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800421a:	00e2      	lsls	r2, r4, #3
 800421c:	4614      	mov	r4, r2
 800421e:	461d      	mov	r5, r3
 8004220:	4643      	mov	r3, r8
 8004222:	18e3      	adds	r3, r4, r3
 8004224:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004228:	464b      	mov	r3, r9
 800422a:	eb45 0303 	adc.w	r3, r5, r3
 800422e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800423e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004242:	f04f 0200 	mov.w	r2, #0
 8004246:	f04f 0300 	mov.w	r3, #0
 800424a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800424e:	4629      	mov	r1, r5
 8004250:	008b      	lsls	r3, r1, #2
 8004252:	4621      	mov	r1, r4
 8004254:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004258:	4621      	mov	r1, r4
 800425a:	008a      	lsls	r2, r1, #2
 800425c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004260:	f7fc fc70 	bl	8000b44 <__aeabi_uldivmod>
 8004264:	4602      	mov	r2, r0
 8004266:	460b      	mov	r3, r1
 8004268:	4b60      	ldr	r3, [pc, #384]	@ (80043ec <UART_SetConfig+0x4e4>)
 800426a:	fba3 2302 	umull	r2, r3, r3, r2
 800426e:	095b      	lsrs	r3, r3, #5
 8004270:	011c      	lsls	r4, r3, #4
 8004272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004276:	2200      	movs	r2, #0
 8004278:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800427c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004280:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004284:	4642      	mov	r2, r8
 8004286:	464b      	mov	r3, r9
 8004288:	1891      	adds	r1, r2, r2
 800428a:	61b9      	str	r1, [r7, #24]
 800428c:	415b      	adcs	r3, r3
 800428e:	61fb      	str	r3, [r7, #28]
 8004290:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004294:	4641      	mov	r1, r8
 8004296:	1851      	adds	r1, r2, r1
 8004298:	6139      	str	r1, [r7, #16]
 800429a:	4649      	mov	r1, r9
 800429c:	414b      	adcs	r3, r1
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	f04f 0300 	mov.w	r3, #0
 80042a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042ac:	4659      	mov	r1, fp
 80042ae:	00cb      	lsls	r3, r1, #3
 80042b0:	4651      	mov	r1, sl
 80042b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042b6:	4651      	mov	r1, sl
 80042b8:	00ca      	lsls	r2, r1, #3
 80042ba:	4610      	mov	r0, r2
 80042bc:	4619      	mov	r1, r3
 80042be:	4603      	mov	r3, r0
 80042c0:	4642      	mov	r2, r8
 80042c2:	189b      	adds	r3, r3, r2
 80042c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80042c8:	464b      	mov	r3, r9
 80042ca:	460a      	mov	r2, r1
 80042cc:	eb42 0303 	adc.w	r3, r2, r3
 80042d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80042d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80042de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80042e0:	f04f 0200 	mov.w	r2, #0
 80042e4:	f04f 0300 	mov.w	r3, #0
 80042e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80042ec:	4649      	mov	r1, r9
 80042ee:	008b      	lsls	r3, r1, #2
 80042f0:	4641      	mov	r1, r8
 80042f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042f6:	4641      	mov	r1, r8
 80042f8:	008a      	lsls	r2, r1, #2
 80042fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80042fe:	f7fc fc21 	bl	8000b44 <__aeabi_uldivmod>
 8004302:	4602      	mov	r2, r0
 8004304:	460b      	mov	r3, r1
 8004306:	4611      	mov	r1, r2
 8004308:	4b38      	ldr	r3, [pc, #224]	@ (80043ec <UART_SetConfig+0x4e4>)
 800430a:	fba3 2301 	umull	r2, r3, r3, r1
 800430e:	095b      	lsrs	r3, r3, #5
 8004310:	2264      	movs	r2, #100	@ 0x64
 8004312:	fb02 f303 	mul.w	r3, r2, r3
 8004316:	1acb      	subs	r3, r1, r3
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	3332      	adds	r3, #50	@ 0x32
 800431c:	4a33      	ldr	r2, [pc, #204]	@ (80043ec <UART_SetConfig+0x4e4>)
 800431e:	fba2 2303 	umull	r2, r3, r2, r3
 8004322:	095b      	lsrs	r3, r3, #5
 8004324:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004328:	441c      	add	r4, r3
 800432a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800432e:	2200      	movs	r2, #0
 8004330:	673b      	str	r3, [r7, #112]	@ 0x70
 8004332:	677a      	str	r2, [r7, #116]	@ 0x74
 8004334:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004338:	4642      	mov	r2, r8
 800433a:	464b      	mov	r3, r9
 800433c:	1891      	adds	r1, r2, r2
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	415b      	adcs	r3, r3
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004348:	4641      	mov	r1, r8
 800434a:	1851      	adds	r1, r2, r1
 800434c:	6039      	str	r1, [r7, #0]
 800434e:	4649      	mov	r1, r9
 8004350:	414b      	adcs	r3, r1
 8004352:	607b      	str	r3, [r7, #4]
 8004354:	f04f 0200 	mov.w	r2, #0
 8004358:	f04f 0300 	mov.w	r3, #0
 800435c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004360:	4659      	mov	r1, fp
 8004362:	00cb      	lsls	r3, r1, #3
 8004364:	4651      	mov	r1, sl
 8004366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800436a:	4651      	mov	r1, sl
 800436c:	00ca      	lsls	r2, r1, #3
 800436e:	4610      	mov	r0, r2
 8004370:	4619      	mov	r1, r3
 8004372:	4603      	mov	r3, r0
 8004374:	4642      	mov	r2, r8
 8004376:	189b      	adds	r3, r3, r2
 8004378:	66bb      	str	r3, [r7, #104]	@ 0x68
 800437a:	464b      	mov	r3, r9
 800437c:	460a      	mov	r2, r1
 800437e:	eb42 0303 	adc.w	r3, r2, r3
 8004382:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	663b      	str	r3, [r7, #96]	@ 0x60
 800438e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004390:	f04f 0200 	mov.w	r2, #0
 8004394:	f04f 0300 	mov.w	r3, #0
 8004398:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800439c:	4649      	mov	r1, r9
 800439e:	008b      	lsls	r3, r1, #2
 80043a0:	4641      	mov	r1, r8
 80043a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043a6:	4641      	mov	r1, r8
 80043a8:	008a      	lsls	r2, r1, #2
 80043aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80043ae:	f7fc fbc9 	bl	8000b44 <__aeabi_uldivmod>
 80043b2:	4602      	mov	r2, r0
 80043b4:	460b      	mov	r3, r1
 80043b6:	4b0d      	ldr	r3, [pc, #52]	@ (80043ec <UART_SetConfig+0x4e4>)
 80043b8:	fba3 1302 	umull	r1, r3, r3, r2
 80043bc:	095b      	lsrs	r3, r3, #5
 80043be:	2164      	movs	r1, #100	@ 0x64
 80043c0:	fb01 f303 	mul.w	r3, r1, r3
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	011b      	lsls	r3, r3, #4
 80043c8:	3332      	adds	r3, #50	@ 0x32
 80043ca:	4a08      	ldr	r2, [pc, #32]	@ (80043ec <UART_SetConfig+0x4e4>)
 80043cc:	fba2 2303 	umull	r2, r3, r2, r3
 80043d0:	095b      	lsrs	r3, r3, #5
 80043d2:	f003 020f 	and.w	r2, r3, #15
 80043d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4422      	add	r2, r4
 80043de:	609a      	str	r2, [r3, #8]
}
 80043e0:	bf00      	nop
 80043e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80043e6:	46bd      	mov	sp, r7
 80043e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043ec:	51eb851f 	.word	0x51eb851f

080043f0 <memset>:
 80043f0:	4402      	add	r2, r0
 80043f2:	4603      	mov	r3, r0
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d100      	bne.n	80043fa <memset+0xa>
 80043f8:	4770      	bx	lr
 80043fa:	f803 1b01 	strb.w	r1, [r3], #1
 80043fe:	e7f9      	b.n	80043f4 <memset+0x4>

08004400 <__libc_init_array>:
 8004400:	b570      	push	{r4, r5, r6, lr}
 8004402:	4d0d      	ldr	r5, [pc, #52]	@ (8004438 <__libc_init_array+0x38>)
 8004404:	4c0d      	ldr	r4, [pc, #52]	@ (800443c <__libc_init_array+0x3c>)
 8004406:	1b64      	subs	r4, r4, r5
 8004408:	10a4      	asrs	r4, r4, #2
 800440a:	2600      	movs	r6, #0
 800440c:	42a6      	cmp	r6, r4
 800440e:	d109      	bne.n	8004424 <__libc_init_array+0x24>
 8004410:	4d0b      	ldr	r5, [pc, #44]	@ (8004440 <__libc_init_array+0x40>)
 8004412:	4c0c      	ldr	r4, [pc, #48]	@ (8004444 <__libc_init_array+0x44>)
 8004414:	f001 f848 	bl	80054a8 <_init>
 8004418:	1b64      	subs	r4, r4, r5
 800441a:	10a4      	asrs	r4, r4, #2
 800441c:	2600      	movs	r6, #0
 800441e:	42a6      	cmp	r6, r4
 8004420:	d105      	bne.n	800442e <__libc_init_array+0x2e>
 8004422:	bd70      	pop	{r4, r5, r6, pc}
 8004424:	f855 3b04 	ldr.w	r3, [r5], #4
 8004428:	4798      	blx	r3
 800442a:	3601      	adds	r6, #1
 800442c:	e7ee      	b.n	800440c <__libc_init_array+0xc>
 800442e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004432:	4798      	blx	r3
 8004434:	3601      	adds	r6, #1
 8004436:	e7f2      	b.n	800441e <__libc_init_array+0x1e>
 8004438:	080056b8 	.word	0x080056b8
 800443c:	080056b8 	.word	0x080056b8
 8004440:	080056b8 	.word	0x080056b8
 8004444:	080056bc 	.word	0x080056bc

08004448 <sin>:
 8004448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800444a:	ec53 2b10 	vmov	r2, r3, d0
 800444e:	4826      	ldr	r0, [pc, #152]	@ (80044e8 <sin+0xa0>)
 8004450:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004454:	4281      	cmp	r1, r0
 8004456:	d807      	bhi.n	8004468 <sin+0x20>
 8004458:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80044e0 <sin+0x98>
 800445c:	2000      	movs	r0, #0
 800445e:	b005      	add	sp, #20
 8004460:	f85d eb04 	ldr.w	lr, [sp], #4
 8004464:	f000 be60 	b.w	8005128 <__kernel_sin>
 8004468:	4820      	ldr	r0, [pc, #128]	@ (80044ec <sin+0xa4>)
 800446a:	4281      	cmp	r1, r0
 800446c:	d908      	bls.n	8004480 <sin+0x38>
 800446e:	4610      	mov	r0, r2
 8004470:	4619      	mov	r1, r3
 8004472:	f7fb fecd 	bl	8000210 <__aeabi_dsub>
 8004476:	ec41 0b10 	vmov	d0, r0, r1
 800447a:	b005      	add	sp, #20
 800447c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004480:	4668      	mov	r0, sp
 8004482:	f000 f835 	bl	80044f0 <__ieee754_rem_pio2>
 8004486:	f000 0003 	and.w	r0, r0, #3
 800448a:	2801      	cmp	r0, #1
 800448c:	d00c      	beq.n	80044a8 <sin+0x60>
 800448e:	2802      	cmp	r0, #2
 8004490:	d011      	beq.n	80044b6 <sin+0x6e>
 8004492:	b9e8      	cbnz	r0, 80044d0 <sin+0x88>
 8004494:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004498:	ed9d 0b00 	vldr	d0, [sp]
 800449c:	2001      	movs	r0, #1
 800449e:	f000 fe43 	bl	8005128 <__kernel_sin>
 80044a2:	ec51 0b10 	vmov	r0, r1, d0
 80044a6:	e7e6      	b.n	8004476 <sin+0x2e>
 80044a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80044ac:	ed9d 0b00 	vldr	d0, [sp]
 80044b0:	f000 fd72 	bl	8004f98 <__kernel_cos>
 80044b4:	e7f5      	b.n	80044a2 <sin+0x5a>
 80044b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80044ba:	ed9d 0b00 	vldr	d0, [sp]
 80044be:	2001      	movs	r0, #1
 80044c0:	f000 fe32 	bl	8005128 <__kernel_sin>
 80044c4:	ec53 2b10 	vmov	r2, r3, d0
 80044c8:	4610      	mov	r0, r2
 80044ca:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80044ce:	e7d2      	b.n	8004476 <sin+0x2e>
 80044d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80044d4:	ed9d 0b00 	vldr	d0, [sp]
 80044d8:	f000 fd5e 	bl	8004f98 <__kernel_cos>
 80044dc:	e7f2      	b.n	80044c4 <sin+0x7c>
 80044de:	bf00      	nop
	...
 80044e8:	3fe921fb 	.word	0x3fe921fb
 80044ec:	7fefffff 	.word	0x7fefffff

080044f0 <__ieee754_rem_pio2>:
 80044f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044f4:	ec57 6b10 	vmov	r6, r7, d0
 80044f8:	4bc5      	ldr	r3, [pc, #788]	@ (8004810 <__ieee754_rem_pio2+0x320>)
 80044fa:	b08d      	sub	sp, #52	@ 0x34
 80044fc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8004500:	4598      	cmp	r8, r3
 8004502:	4604      	mov	r4, r0
 8004504:	9704      	str	r7, [sp, #16]
 8004506:	d807      	bhi.n	8004518 <__ieee754_rem_pio2+0x28>
 8004508:	2200      	movs	r2, #0
 800450a:	2300      	movs	r3, #0
 800450c:	ed80 0b00 	vstr	d0, [r0]
 8004510:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004514:	2500      	movs	r5, #0
 8004516:	e028      	b.n	800456a <__ieee754_rem_pio2+0x7a>
 8004518:	4bbe      	ldr	r3, [pc, #760]	@ (8004814 <__ieee754_rem_pio2+0x324>)
 800451a:	4598      	cmp	r8, r3
 800451c:	d878      	bhi.n	8004610 <__ieee754_rem_pio2+0x120>
 800451e:	9b04      	ldr	r3, [sp, #16]
 8004520:	4dbd      	ldr	r5, [pc, #756]	@ (8004818 <__ieee754_rem_pio2+0x328>)
 8004522:	2b00      	cmp	r3, #0
 8004524:	4630      	mov	r0, r6
 8004526:	a3ac      	add	r3, pc, #688	@ (adr r3, 80047d8 <__ieee754_rem_pio2+0x2e8>)
 8004528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452c:	4639      	mov	r1, r7
 800452e:	dd38      	ble.n	80045a2 <__ieee754_rem_pio2+0xb2>
 8004530:	f7fb fe6e 	bl	8000210 <__aeabi_dsub>
 8004534:	45a8      	cmp	r8, r5
 8004536:	4606      	mov	r6, r0
 8004538:	460f      	mov	r7, r1
 800453a:	d01a      	beq.n	8004572 <__ieee754_rem_pio2+0x82>
 800453c:	a3a8      	add	r3, pc, #672	@ (adr r3, 80047e0 <__ieee754_rem_pio2+0x2f0>)
 800453e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004542:	f7fb fe65 	bl	8000210 <__aeabi_dsub>
 8004546:	4602      	mov	r2, r0
 8004548:	460b      	mov	r3, r1
 800454a:	4680      	mov	r8, r0
 800454c:	4689      	mov	r9, r1
 800454e:	4630      	mov	r0, r6
 8004550:	4639      	mov	r1, r7
 8004552:	f7fb fe5d 	bl	8000210 <__aeabi_dsub>
 8004556:	a3a2      	add	r3, pc, #648	@ (adr r3, 80047e0 <__ieee754_rem_pio2+0x2f0>)
 8004558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455c:	f7fb fe58 	bl	8000210 <__aeabi_dsub>
 8004560:	e9c4 8900 	strd	r8, r9, [r4]
 8004564:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004568:	2501      	movs	r5, #1
 800456a:	4628      	mov	r0, r5
 800456c:	b00d      	add	sp, #52	@ 0x34
 800456e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004572:	a39d      	add	r3, pc, #628	@ (adr r3, 80047e8 <__ieee754_rem_pio2+0x2f8>)
 8004574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004578:	f7fb fe4a 	bl	8000210 <__aeabi_dsub>
 800457c:	a39c      	add	r3, pc, #624	@ (adr r3, 80047f0 <__ieee754_rem_pio2+0x300>)
 800457e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004582:	4606      	mov	r6, r0
 8004584:	460f      	mov	r7, r1
 8004586:	f7fb fe43 	bl	8000210 <__aeabi_dsub>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	4680      	mov	r8, r0
 8004590:	4689      	mov	r9, r1
 8004592:	4630      	mov	r0, r6
 8004594:	4639      	mov	r1, r7
 8004596:	f7fb fe3b 	bl	8000210 <__aeabi_dsub>
 800459a:	a395      	add	r3, pc, #596	@ (adr r3, 80047f0 <__ieee754_rem_pio2+0x300>)
 800459c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a0:	e7dc      	b.n	800455c <__ieee754_rem_pio2+0x6c>
 80045a2:	f7fb fe37 	bl	8000214 <__adddf3>
 80045a6:	45a8      	cmp	r8, r5
 80045a8:	4606      	mov	r6, r0
 80045aa:	460f      	mov	r7, r1
 80045ac:	d018      	beq.n	80045e0 <__ieee754_rem_pio2+0xf0>
 80045ae:	a38c      	add	r3, pc, #560	@ (adr r3, 80047e0 <__ieee754_rem_pio2+0x2f0>)
 80045b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b4:	f7fb fe2e 	bl	8000214 <__adddf3>
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	4680      	mov	r8, r0
 80045be:	4689      	mov	r9, r1
 80045c0:	4630      	mov	r0, r6
 80045c2:	4639      	mov	r1, r7
 80045c4:	f7fb fe24 	bl	8000210 <__aeabi_dsub>
 80045c8:	a385      	add	r3, pc, #532	@ (adr r3, 80047e0 <__ieee754_rem_pio2+0x2f0>)
 80045ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ce:	f7fb fe21 	bl	8000214 <__adddf3>
 80045d2:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80045d6:	e9c4 8900 	strd	r8, r9, [r4]
 80045da:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80045de:	e7c4      	b.n	800456a <__ieee754_rem_pio2+0x7a>
 80045e0:	a381      	add	r3, pc, #516	@ (adr r3, 80047e8 <__ieee754_rem_pio2+0x2f8>)
 80045e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e6:	f7fb fe15 	bl	8000214 <__adddf3>
 80045ea:	a381      	add	r3, pc, #516	@ (adr r3, 80047f0 <__ieee754_rem_pio2+0x300>)
 80045ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f0:	4606      	mov	r6, r0
 80045f2:	460f      	mov	r7, r1
 80045f4:	f7fb fe0e 	bl	8000214 <__adddf3>
 80045f8:	4602      	mov	r2, r0
 80045fa:	460b      	mov	r3, r1
 80045fc:	4680      	mov	r8, r0
 80045fe:	4689      	mov	r9, r1
 8004600:	4630      	mov	r0, r6
 8004602:	4639      	mov	r1, r7
 8004604:	f7fb fe04 	bl	8000210 <__aeabi_dsub>
 8004608:	a379      	add	r3, pc, #484	@ (adr r3, 80047f0 <__ieee754_rem_pio2+0x300>)
 800460a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460e:	e7de      	b.n	80045ce <__ieee754_rem_pio2+0xde>
 8004610:	4b82      	ldr	r3, [pc, #520]	@ (800481c <__ieee754_rem_pio2+0x32c>)
 8004612:	4598      	cmp	r8, r3
 8004614:	f200 80d1 	bhi.w	80047ba <__ieee754_rem_pio2+0x2ca>
 8004618:	f000 fe40 	bl	800529c <fabs>
 800461c:	ec57 6b10 	vmov	r6, r7, d0
 8004620:	a375      	add	r3, pc, #468	@ (adr r3, 80047f8 <__ieee754_rem_pio2+0x308>)
 8004622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004626:	4630      	mov	r0, r6
 8004628:	4639      	mov	r1, r7
 800462a:	f7fb ffa9 	bl	8000580 <__aeabi_dmul>
 800462e:	4b7c      	ldr	r3, [pc, #496]	@ (8004820 <__ieee754_rem_pio2+0x330>)
 8004630:	2200      	movs	r2, #0
 8004632:	f7fb fdef 	bl	8000214 <__adddf3>
 8004636:	f7fc fa3d 	bl	8000ab4 <__aeabi_d2iz>
 800463a:	4605      	mov	r5, r0
 800463c:	f7fb ff36 	bl	80004ac <__aeabi_i2d>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004648:	a363      	add	r3, pc, #396	@ (adr r3, 80047d8 <__ieee754_rem_pio2+0x2e8>)
 800464a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464e:	f7fb ff97 	bl	8000580 <__aeabi_dmul>
 8004652:	4602      	mov	r2, r0
 8004654:	460b      	mov	r3, r1
 8004656:	4630      	mov	r0, r6
 8004658:	4639      	mov	r1, r7
 800465a:	f7fb fdd9 	bl	8000210 <__aeabi_dsub>
 800465e:	a360      	add	r3, pc, #384	@ (adr r3, 80047e0 <__ieee754_rem_pio2+0x2f0>)
 8004660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004664:	4682      	mov	sl, r0
 8004666:	468b      	mov	fp, r1
 8004668:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800466c:	f7fb ff88 	bl	8000580 <__aeabi_dmul>
 8004670:	2d1f      	cmp	r5, #31
 8004672:	4606      	mov	r6, r0
 8004674:	460f      	mov	r7, r1
 8004676:	dc0c      	bgt.n	8004692 <__ieee754_rem_pio2+0x1a2>
 8004678:	4b6a      	ldr	r3, [pc, #424]	@ (8004824 <__ieee754_rem_pio2+0x334>)
 800467a:	1e6a      	subs	r2, r5, #1
 800467c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004680:	4543      	cmp	r3, r8
 8004682:	d006      	beq.n	8004692 <__ieee754_rem_pio2+0x1a2>
 8004684:	4632      	mov	r2, r6
 8004686:	463b      	mov	r3, r7
 8004688:	4650      	mov	r0, sl
 800468a:	4659      	mov	r1, fp
 800468c:	f7fb fdc0 	bl	8000210 <__aeabi_dsub>
 8004690:	e00e      	b.n	80046b0 <__ieee754_rem_pio2+0x1c0>
 8004692:	463b      	mov	r3, r7
 8004694:	4632      	mov	r2, r6
 8004696:	4650      	mov	r0, sl
 8004698:	4659      	mov	r1, fp
 800469a:	f7fb fdb9 	bl	8000210 <__aeabi_dsub>
 800469e:	ea4f 5328 	mov.w	r3, r8, asr #20
 80046a2:	9305      	str	r3, [sp, #20]
 80046a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80046a8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80046ac:	2b10      	cmp	r3, #16
 80046ae:	dc02      	bgt.n	80046b6 <__ieee754_rem_pio2+0x1c6>
 80046b0:	e9c4 0100 	strd	r0, r1, [r4]
 80046b4:	e039      	b.n	800472a <__ieee754_rem_pio2+0x23a>
 80046b6:	a34c      	add	r3, pc, #304	@ (adr r3, 80047e8 <__ieee754_rem_pio2+0x2f8>)
 80046b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046c0:	f7fb ff5e 	bl	8000580 <__aeabi_dmul>
 80046c4:	4606      	mov	r6, r0
 80046c6:	460f      	mov	r7, r1
 80046c8:	4602      	mov	r2, r0
 80046ca:	460b      	mov	r3, r1
 80046cc:	4650      	mov	r0, sl
 80046ce:	4659      	mov	r1, fp
 80046d0:	f7fb fd9e 	bl	8000210 <__aeabi_dsub>
 80046d4:	4602      	mov	r2, r0
 80046d6:	460b      	mov	r3, r1
 80046d8:	4680      	mov	r8, r0
 80046da:	4689      	mov	r9, r1
 80046dc:	4650      	mov	r0, sl
 80046de:	4659      	mov	r1, fp
 80046e0:	f7fb fd96 	bl	8000210 <__aeabi_dsub>
 80046e4:	4632      	mov	r2, r6
 80046e6:	463b      	mov	r3, r7
 80046e8:	f7fb fd92 	bl	8000210 <__aeabi_dsub>
 80046ec:	a340      	add	r3, pc, #256	@ (adr r3, 80047f0 <__ieee754_rem_pio2+0x300>)
 80046ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f2:	4606      	mov	r6, r0
 80046f4:	460f      	mov	r7, r1
 80046f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046fa:	f7fb ff41 	bl	8000580 <__aeabi_dmul>
 80046fe:	4632      	mov	r2, r6
 8004700:	463b      	mov	r3, r7
 8004702:	f7fb fd85 	bl	8000210 <__aeabi_dsub>
 8004706:	4602      	mov	r2, r0
 8004708:	460b      	mov	r3, r1
 800470a:	4606      	mov	r6, r0
 800470c:	460f      	mov	r7, r1
 800470e:	4640      	mov	r0, r8
 8004710:	4649      	mov	r1, r9
 8004712:	f7fb fd7d 	bl	8000210 <__aeabi_dsub>
 8004716:	9a05      	ldr	r2, [sp, #20]
 8004718:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b31      	cmp	r3, #49	@ 0x31
 8004720:	dc20      	bgt.n	8004764 <__ieee754_rem_pio2+0x274>
 8004722:	e9c4 0100 	strd	r0, r1, [r4]
 8004726:	46c2      	mov	sl, r8
 8004728:	46cb      	mov	fp, r9
 800472a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800472e:	4650      	mov	r0, sl
 8004730:	4642      	mov	r2, r8
 8004732:	464b      	mov	r3, r9
 8004734:	4659      	mov	r1, fp
 8004736:	f7fb fd6b 	bl	8000210 <__aeabi_dsub>
 800473a:	463b      	mov	r3, r7
 800473c:	4632      	mov	r2, r6
 800473e:	f7fb fd67 	bl	8000210 <__aeabi_dsub>
 8004742:	9b04      	ldr	r3, [sp, #16]
 8004744:	2b00      	cmp	r3, #0
 8004746:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800474a:	f6bf af0e 	bge.w	800456a <__ieee754_rem_pio2+0x7a>
 800474e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8004752:	6063      	str	r3, [r4, #4]
 8004754:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004758:	f8c4 8000 	str.w	r8, [r4]
 800475c:	60a0      	str	r0, [r4, #8]
 800475e:	60e3      	str	r3, [r4, #12]
 8004760:	426d      	negs	r5, r5
 8004762:	e702      	b.n	800456a <__ieee754_rem_pio2+0x7a>
 8004764:	a326      	add	r3, pc, #152	@ (adr r3, 8004800 <__ieee754_rem_pio2+0x310>)
 8004766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800476e:	f7fb ff07 	bl	8000580 <__aeabi_dmul>
 8004772:	4606      	mov	r6, r0
 8004774:	460f      	mov	r7, r1
 8004776:	4602      	mov	r2, r0
 8004778:	460b      	mov	r3, r1
 800477a:	4640      	mov	r0, r8
 800477c:	4649      	mov	r1, r9
 800477e:	f7fb fd47 	bl	8000210 <__aeabi_dsub>
 8004782:	4602      	mov	r2, r0
 8004784:	460b      	mov	r3, r1
 8004786:	4682      	mov	sl, r0
 8004788:	468b      	mov	fp, r1
 800478a:	4640      	mov	r0, r8
 800478c:	4649      	mov	r1, r9
 800478e:	f7fb fd3f 	bl	8000210 <__aeabi_dsub>
 8004792:	4632      	mov	r2, r6
 8004794:	463b      	mov	r3, r7
 8004796:	f7fb fd3b 	bl	8000210 <__aeabi_dsub>
 800479a:	a31b      	add	r3, pc, #108	@ (adr r3, 8004808 <__ieee754_rem_pio2+0x318>)
 800479c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a0:	4606      	mov	r6, r0
 80047a2:	460f      	mov	r7, r1
 80047a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047a8:	f7fb feea 	bl	8000580 <__aeabi_dmul>
 80047ac:	4632      	mov	r2, r6
 80047ae:	463b      	mov	r3, r7
 80047b0:	f7fb fd2e 	bl	8000210 <__aeabi_dsub>
 80047b4:	4606      	mov	r6, r0
 80047b6:	460f      	mov	r7, r1
 80047b8:	e764      	b.n	8004684 <__ieee754_rem_pio2+0x194>
 80047ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004828 <__ieee754_rem_pio2+0x338>)
 80047bc:	4598      	cmp	r8, r3
 80047be:	d935      	bls.n	800482c <__ieee754_rem_pio2+0x33c>
 80047c0:	4632      	mov	r2, r6
 80047c2:	463b      	mov	r3, r7
 80047c4:	4630      	mov	r0, r6
 80047c6:	4639      	mov	r1, r7
 80047c8:	f7fb fd22 	bl	8000210 <__aeabi_dsub>
 80047cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80047d0:	e9c4 0100 	strd	r0, r1, [r4]
 80047d4:	e69e      	b.n	8004514 <__ieee754_rem_pio2+0x24>
 80047d6:	bf00      	nop
 80047d8:	54400000 	.word	0x54400000
 80047dc:	3ff921fb 	.word	0x3ff921fb
 80047e0:	1a626331 	.word	0x1a626331
 80047e4:	3dd0b461 	.word	0x3dd0b461
 80047e8:	1a600000 	.word	0x1a600000
 80047ec:	3dd0b461 	.word	0x3dd0b461
 80047f0:	2e037073 	.word	0x2e037073
 80047f4:	3ba3198a 	.word	0x3ba3198a
 80047f8:	6dc9c883 	.word	0x6dc9c883
 80047fc:	3fe45f30 	.word	0x3fe45f30
 8004800:	2e000000 	.word	0x2e000000
 8004804:	3ba3198a 	.word	0x3ba3198a
 8004808:	252049c1 	.word	0x252049c1
 800480c:	397b839a 	.word	0x397b839a
 8004810:	3fe921fb 	.word	0x3fe921fb
 8004814:	4002d97b 	.word	0x4002d97b
 8004818:	3ff921fb 	.word	0x3ff921fb
 800481c:	413921fb 	.word	0x413921fb
 8004820:	3fe00000 	.word	0x3fe00000
 8004824:	080054d8 	.word	0x080054d8
 8004828:	7fefffff 	.word	0x7fefffff
 800482c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004830:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8004834:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004838:	4630      	mov	r0, r6
 800483a:	460f      	mov	r7, r1
 800483c:	f7fc f93a 	bl	8000ab4 <__aeabi_d2iz>
 8004840:	f7fb fe34 	bl	80004ac <__aeabi_i2d>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	4630      	mov	r0, r6
 800484a:	4639      	mov	r1, r7
 800484c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004850:	f7fb fcde 	bl	8000210 <__aeabi_dsub>
 8004854:	4b22      	ldr	r3, [pc, #136]	@ (80048e0 <__ieee754_rem_pio2+0x3f0>)
 8004856:	2200      	movs	r2, #0
 8004858:	f7fb fe92 	bl	8000580 <__aeabi_dmul>
 800485c:	460f      	mov	r7, r1
 800485e:	4606      	mov	r6, r0
 8004860:	f7fc f928 	bl	8000ab4 <__aeabi_d2iz>
 8004864:	f7fb fe22 	bl	80004ac <__aeabi_i2d>
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	4630      	mov	r0, r6
 800486e:	4639      	mov	r1, r7
 8004870:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004874:	f7fb fccc 	bl	8000210 <__aeabi_dsub>
 8004878:	4b19      	ldr	r3, [pc, #100]	@ (80048e0 <__ieee754_rem_pio2+0x3f0>)
 800487a:	2200      	movs	r2, #0
 800487c:	f7fb fe80 	bl	8000580 <__aeabi_dmul>
 8004880:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8004884:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8004888:	f04f 0803 	mov.w	r8, #3
 800488c:	2600      	movs	r6, #0
 800488e:	2700      	movs	r7, #0
 8004890:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8004894:	4632      	mov	r2, r6
 8004896:	463b      	mov	r3, r7
 8004898:	46c2      	mov	sl, r8
 800489a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800489e:	f7fc f8d7 	bl	8000a50 <__aeabi_dcmpeq>
 80048a2:	2800      	cmp	r0, #0
 80048a4:	d1f4      	bne.n	8004890 <__ieee754_rem_pio2+0x3a0>
 80048a6:	4b0f      	ldr	r3, [pc, #60]	@ (80048e4 <__ieee754_rem_pio2+0x3f4>)
 80048a8:	9301      	str	r3, [sp, #4]
 80048aa:	2302      	movs	r3, #2
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	462a      	mov	r2, r5
 80048b0:	4653      	mov	r3, sl
 80048b2:	4621      	mov	r1, r4
 80048b4:	a806      	add	r0, sp, #24
 80048b6:	f000 f817 	bl	80048e8 <__kernel_rem_pio2>
 80048ba:	9b04      	ldr	r3, [sp, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	4605      	mov	r5, r0
 80048c0:	f6bf ae53 	bge.w	800456a <__ieee754_rem_pio2+0x7a>
 80048c4:	e9d4 2100 	ldrd	r2, r1, [r4]
 80048c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80048cc:	e9c4 2300 	strd	r2, r3, [r4]
 80048d0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80048d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80048d8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80048dc:	e740      	b.n	8004760 <__ieee754_rem_pio2+0x270>
 80048de:	bf00      	nop
 80048e0:	41700000 	.word	0x41700000
 80048e4:	08005558 	.word	0x08005558

080048e8 <__kernel_rem_pio2>:
 80048e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ec:	ed2d 8b02 	vpush	{d8}
 80048f0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80048f4:	f112 0f14 	cmn.w	r2, #20
 80048f8:	9306      	str	r3, [sp, #24]
 80048fa:	9104      	str	r1, [sp, #16]
 80048fc:	4bbe      	ldr	r3, [pc, #760]	@ (8004bf8 <__kernel_rem_pio2+0x310>)
 80048fe:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8004900:	9008      	str	r0, [sp, #32]
 8004902:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	9b06      	ldr	r3, [sp, #24]
 800490a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800490e:	bfa8      	it	ge
 8004910:	1ed4      	subge	r4, r2, #3
 8004912:	9305      	str	r3, [sp, #20]
 8004914:	bfb2      	itee	lt
 8004916:	2400      	movlt	r4, #0
 8004918:	2318      	movge	r3, #24
 800491a:	fb94 f4f3 	sdivge	r4, r4, r3
 800491e:	f06f 0317 	mvn.w	r3, #23
 8004922:	fb04 3303 	mla	r3, r4, r3, r3
 8004926:	eb03 0b02 	add.w	fp, r3, r2
 800492a:	9b00      	ldr	r3, [sp, #0]
 800492c:	9a05      	ldr	r2, [sp, #20]
 800492e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8004be8 <__kernel_rem_pio2+0x300>
 8004932:	eb03 0802 	add.w	r8, r3, r2
 8004936:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8004938:	1aa7      	subs	r7, r4, r2
 800493a:	ae20      	add	r6, sp, #128	@ 0x80
 800493c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004940:	2500      	movs	r5, #0
 8004942:	4545      	cmp	r5, r8
 8004944:	dd13      	ble.n	800496e <__kernel_rem_pio2+0x86>
 8004946:	9b06      	ldr	r3, [sp, #24]
 8004948:	aa20      	add	r2, sp, #128	@ 0x80
 800494a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800494e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8004952:	f04f 0800 	mov.w	r8, #0
 8004956:	9b00      	ldr	r3, [sp, #0]
 8004958:	4598      	cmp	r8, r3
 800495a:	dc31      	bgt.n	80049c0 <__kernel_rem_pio2+0xd8>
 800495c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8004be8 <__kernel_rem_pio2+0x300>
 8004960:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004964:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004968:	462f      	mov	r7, r5
 800496a:	2600      	movs	r6, #0
 800496c:	e01b      	b.n	80049a6 <__kernel_rem_pio2+0xbe>
 800496e:	42ef      	cmn	r7, r5
 8004970:	d407      	bmi.n	8004982 <__kernel_rem_pio2+0x9a>
 8004972:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004976:	f7fb fd99 	bl	80004ac <__aeabi_i2d>
 800497a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800497e:	3501      	adds	r5, #1
 8004980:	e7df      	b.n	8004942 <__kernel_rem_pio2+0x5a>
 8004982:	ec51 0b18 	vmov	r0, r1, d8
 8004986:	e7f8      	b.n	800497a <__kernel_rem_pio2+0x92>
 8004988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800498c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004990:	f7fb fdf6 	bl	8000580 <__aeabi_dmul>
 8004994:	4602      	mov	r2, r0
 8004996:	460b      	mov	r3, r1
 8004998:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800499c:	f7fb fc3a 	bl	8000214 <__adddf3>
 80049a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049a4:	3601      	adds	r6, #1
 80049a6:	9b05      	ldr	r3, [sp, #20]
 80049a8:	429e      	cmp	r6, r3
 80049aa:	f1a7 0708 	sub.w	r7, r7, #8
 80049ae:	ddeb      	ble.n	8004988 <__kernel_rem_pio2+0xa0>
 80049b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80049b4:	f108 0801 	add.w	r8, r8, #1
 80049b8:	ecaa 7b02 	vstmia	sl!, {d7}
 80049bc:	3508      	adds	r5, #8
 80049be:	e7ca      	b.n	8004956 <__kernel_rem_pio2+0x6e>
 80049c0:	9b00      	ldr	r3, [sp, #0]
 80049c2:	f8dd 8000 	ldr.w	r8, [sp]
 80049c6:	aa0c      	add	r2, sp, #48	@ 0x30
 80049c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80049cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80049ce:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80049d0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80049d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80049d6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80049da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80049dc:	ab98      	add	r3, sp, #608	@ 0x260
 80049de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80049e2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80049e6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80049ea:	ac0c      	add	r4, sp, #48	@ 0x30
 80049ec:	ab70      	add	r3, sp, #448	@ 0x1c0
 80049ee:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80049f2:	46a1      	mov	r9, r4
 80049f4:	46c2      	mov	sl, r8
 80049f6:	f1ba 0f00 	cmp.w	sl, #0
 80049fa:	f1a5 0508 	sub.w	r5, r5, #8
 80049fe:	dc77      	bgt.n	8004af0 <__kernel_rem_pio2+0x208>
 8004a00:	4658      	mov	r0, fp
 8004a02:	ed9d 0b02 	vldr	d0, [sp, #8]
 8004a06:	f000 fc53 	bl	80052b0 <scalbn>
 8004a0a:	ec57 6b10 	vmov	r6, r7, d0
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8004a14:	4630      	mov	r0, r6
 8004a16:	4639      	mov	r1, r7
 8004a18:	f7fb fdb2 	bl	8000580 <__aeabi_dmul>
 8004a1c:	ec41 0b10 	vmov	d0, r0, r1
 8004a20:	f000 fcc6 	bl	80053b0 <floor>
 8004a24:	4b75      	ldr	r3, [pc, #468]	@ (8004bfc <__kernel_rem_pio2+0x314>)
 8004a26:	ec51 0b10 	vmov	r0, r1, d0
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f7fb fda8 	bl	8000580 <__aeabi_dmul>
 8004a30:	4602      	mov	r2, r0
 8004a32:	460b      	mov	r3, r1
 8004a34:	4630      	mov	r0, r6
 8004a36:	4639      	mov	r1, r7
 8004a38:	f7fb fbea 	bl	8000210 <__aeabi_dsub>
 8004a3c:	460f      	mov	r7, r1
 8004a3e:	4606      	mov	r6, r0
 8004a40:	f7fc f838 	bl	8000ab4 <__aeabi_d2iz>
 8004a44:	9002      	str	r0, [sp, #8]
 8004a46:	f7fb fd31 	bl	80004ac <__aeabi_i2d>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	4630      	mov	r0, r6
 8004a50:	4639      	mov	r1, r7
 8004a52:	f7fb fbdd 	bl	8000210 <__aeabi_dsub>
 8004a56:	f1bb 0f00 	cmp.w	fp, #0
 8004a5a:	4606      	mov	r6, r0
 8004a5c:	460f      	mov	r7, r1
 8004a5e:	dd6c      	ble.n	8004b3a <__kernel_rem_pio2+0x252>
 8004a60:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8004a64:	ab0c      	add	r3, sp, #48	@ 0x30
 8004a66:	9d02      	ldr	r5, [sp, #8]
 8004a68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004a6c:	f1cb 0018 	rsb	r0, fp, #24
 8004a70:	fa43 f200 	asr.w	r2, r3, r0
 8004a74:	4415      	add	r5, r2
 8004a76:	4082      	lsls	r2, r0
 8004a78:	1a9b      	subs	r3, r3, r2
 8004a7a:	aa0c      	add	r2, sp, #48	@ 0x30
 8004a7c:	9502      	str	r5, [sp, #8]
 8004a7e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8004a82:	f1cb 0217 	rsb	r2, fp, #23
 8004a86:	fa43 f902 	asr.w	r9, r3, r2
 8004a8a:	f1b9 0f00 	cmp.w	r9, #0
 8004a8e:	dd64      	ble.n	8004b5a <__kernel_rem_pio2+0x272>
 8004a90:	9b02      	ldr	r3, [sp, #8]
 8004a92:	2200      	movs	r2, #0
 8004a94:	3301      	adds	r3, #1
 8004a96:	9302      	str	r3, [sp, #8]
 8004a98:	4615      	mov	r5, r2
 8004a9a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8004a9e:	4590      	cmp	r8, r2
 8004aa0:	f300 80b8 	bgt.w	8004c14 <__kernel_rem_pio2+0x32c>
 8004aa4:	f1bb 0f00 	cmp.w	fp, #0
 8004aa8:	dd07      	ble.n	8004aba <__kernel_rem_pio2+0x1d2>
 8004aaa:	f1bb 0f01 	cmp.w	fp, #1
 8004aae:	f000 80bf 	beq.w	8004c30 <__kernel_rem_pio2+0x348>
 8004ab2:	f1bb 0f02 	cmp.w	fp, #2
 8004ab6:	f000 80c6 	beq.w	8004c46 <__kernel_rem_pio2+0x35e>
 8004aba:	f1b9 0f02 	cmp.w	r9, #2
 8004abe:	d14c      	bne.n	8004b5a <__kernel_rem_pio2+0x272>
 8004ac0:	4632      	mov	r2, r6
 8004ac2:	463b      	mov	r3, r7
 8004ac4:	494e      	ldr	r1, [pc, #312]	@ (8004c00 <__kernel_rem_pio2+0x318>)
 8004ac6:	2000      	movs	r0, #0
 8004ac8:	f7fb fba2 	bl	8000210 <__aeabi_dsub>
 8004acc:	4606      	mov	r6, r0
 8004ace:	460f      	mov	r7, r1
 8004ad0:	2d00      	cmp	r5, #0
 8004ad2:	d042      	beq.n	8004b5a <__kernel_rem_pio2+0x272>
 8004ad4:	4658      	mov	r0, fp
 8004ad6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8004bf0 <__kernel_rem_pio2+0x308>
 8004ada:	f000 fbe9 	bl	80052b0 <scalbn>
 8004ade:	4630      	mov	r0, r6
 8004ae0:	4639      	mov	r1, r7
 8004ae2:	ec53 2b10 	vmov	r2, r3, d0
 8004ae6:	f7fb fb93 	bl	8000210 <__aeabi_dsub>
 8004aea:	4606      	mov	r6, r0
 8004aec:	460f      	mov	r7, r1
 8004aee:	e034      	b.n	8004b5a <__kernel_rem_pio2+0x272>
 8004af0:	4b44      	ldr	r3, [pc, #272]	@ (8004c04 <__kernel_rem_pio2+0x31c>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004af8:	f7fb fd42 	bl	8000580 <__aeabi_dmul>
 8004afc:	f7fb ffda 	bl	8000ab4 <__aeabi_d2iz>
 8004b00:	f7fb fcd4 	bl	80004ac <__aeabi_i2d>
 8004b04:	4b40      	ldr	r3, [pc, #256]	@ (8004c08 <__kernel_rem_pio2+0x320>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	4606      	mov	r6, r0
 8004b0a:	460f      	mov	r7, r1
 8004b0c:	f7fb fd38 	bl	8000580 <__aeabi_dmul>
 8004b10:	4602      	mov	r2, r0
 8004b12:	460b      	mov	r3, r1
 8004b14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b18:	f7fb fb7a 	bl	8000210 <__aeabi_dsub>
 8004b1c:	f7fb ffca 	bl	8000ab4 <__aeabi_d2iz>
 8004b20:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004b24:	f849 0b04 	str.w	r0, [r9], #4
 8004b28:	4639      	mov	r1, r7
 8004b2a:	4630      	mov	r0, r6
 8004b2c:	f7fb fb72 	bl	8000214 <__adddf3>
 8004b30:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004b34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b38:	e75d      	b.n	80049f6 <__kernel_rem_pio2+0x10e>
 8004b3a:	d107      	bne.n	8004b4c <__kernel_rem_pio2+0x264>
 8004b3c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8004b40:	aa0c      	add	r2, sp, #48	@ 0x30
 8004b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b46:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8004b4a:	e79e      	b.n	8004a8a <__kernel_rem_pio2+0x1a2>
 8004b4c:	4b2f      	ldr	r3, [pc, #188]	@ (8004c0c <__kernel_rem_pio2+0x324>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f7fb ff9c 	bl	8000a8c <__aeabi_dcmpge>
 8004b54:	2800      	cmp	r0, #0
 8004b56:	d143      	bne.n	8004be0 <__kernel_rem_pio2+0x2f8>
 8004b58:	4681      	mov	r9, r0
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	4630      	mov	r0, r6
 8004b60:	4639      	mov	r1, r7
 8004b62:	f7fb ff75 	bl	8000a50 <__aeabi_dcmpeq>
 8004b66:	2800      	cmp	r0, #0
 8004b68:	f000 80bf 	beq.w	8004cea <__kernel_rem_pio2+0x402>
 8004b6c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8004b70:	2200      	movs	r2, #0
 8004b72:	9900      	ldr	r1, [sp, #0]
 8004b74:	428b      	cmp	r3, r1
 8004b76:	da6e      	bge.n	8004c56 <__kernel_rem_pio2+0x36e>
 8004b78:	2a00      	cmp	r2, #0
 8004b7a:	f000 8089 	beq.w	8004c90 <__kernel_rem_pio2+0x3a8>
 8004b7e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004b82:	ab0c      	add	r3, sp, #48	@ 0x30
 8004b84:	f1ab 0b18 	sub.w	fp, fp, #24
 8004b88:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0f6      	beq.n	8004b7e <__kernel_rem_pio2+0x296>
 8004b90:	4658      	mov	r0, fp
 8004b92:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8004bf0 <__kernel_rem_pio2+0x308>
 8004b96:	f000 fb8b 	bl	80052b0 <scalbn>
 8004b9a:	f108 0301 	add.w	r3, r8, #1
 8004b9e:	00da      	lsls	r2, r3, #3
 8004ba0:	9205      	str	r2, [sp, #20]
 8004ba2:	ec55 4b10 	vmov	r4, r5, d0
 8004ba6:	aa70      	add	r2, sp, #448	@ 0x1c0
 8004ba8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8004c04 <__kernel_rem_pio2+0x31c>
 8004bac:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8004bb0:	4646      	mov	r6, r8
 8004bb2:	f04f 0a00 	mov.w	sl, #0
 8004bb6:	2e00      	cmp	r6, #0
 8004bb8:	f280 80cf 	bge.w	8004d5a <__kernel_rem_pio2+0x472>
 8004bbc:	4644      	mov	r4, r8
 8004bbe:	2c00      	cmp	r4, #0
 8004bc0:	f2c0 80fd 	blt.w	8004dbe <__kernel_rem_pio2+0x4d6>
 8004bc4:	4b12      	ldr	r3, [pc, #72]	@ (8004c10 <__kernel_rem_pio2+0x328>)
 8004bc6:	461f      	mov	r7, r3
 8004bc8:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004bca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004bce:	9306      	str	r3, [sp, #24]
 8004bd0:	f04f 0a00 	mov.w	sl, #0
 8004bd4:	f04f 0b00 	mov.w	fp, #0
 8004bd8:	2600      	movs	r6, #0
 8004bda:	eba8 0504 	sub.w	r5, r8, r4
 8004bde:	e0e2      	b.n	8004da6 <__kernel_rem_pio2+0x4be>
 8004be0:	f04f 0902 	mov.w	r9, #2
 8004be4:	e754      	b.n	8004a90 <__kernel_rem_pio2+0x1a8>
 8004be6:	bf00      	nop
	...
 8004bf4:	3ff00000 	.word	0x3ff00000
 8004bf8:	080056a0 	.word	0x080056a0
 8004bfc:	40200000 	.word	0x40200000
 8004c00:	3ff00000 	.word	0x3ff00000
 8004c04:	3e700000 	.word	0x3e700000
 8004c08:	41700000 	.word	0x41700000
 8004c0c:	3fe00000 	.word	0x3fe00000
 8004c10:	08005660 	.word	0x08005660
 8004c14:	f854 3b04 	ldr.w	r3, [r4], #4
 8004c18:	b945      	cbnz	r5, 8004c2c <__kernel_rem_pio2+0x344>
 8004c1a:	b123      	cbz	r3, 8004c26 <__kernel_rem_pio2+0x33e>
 8004c1c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8004c20:	f844 3c04 	str.w	r3, [r4, #-4]
 8004c24:	2301      	movs	r3, #1
 8004c26:	3201      	adds	r2, #1
 8004c28:	461d      	mov	r5, r3
 8004c2a:	e738      	b.n	8004a9e <__kernel_rem_pio2+0x1b6>
 8004c2c:	1acb      	subs	r3, r1, r3
 8004c2e:	e7f7      	b.n	8004c20 <__kernel_rem_pio2+0x338>
 8004c30:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8004c34:	ab0c      	add	r3, sp, #48	@ 0x30
 8004c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c3a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004c3e:	a90c      	add	r1, sp, #48	@ 0x30
 8004c40:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004c44:	e739      	b.n	8004aba <__kernel_rem_pio2+0x1d2>
 8004c46:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8004c4a:	ab0c      	add	r3, sp, #48	@ 0x30
 8004c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c50:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004c54:	e7f3      	b.n	8004c3e <__kernel_rem_pio2+0x356>
 8004c56:	a90c      	add	r1, sp, #48	@ 0x30
 8004c58:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	e787      	b.n	8004b72 <__kernel_rem_pio2+0x28a>
 8004c62:	3401      	adds	r4, #1
 8004c64:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004c68:	2a00      	cmp	r2, #0
 8004c6a:	d0fa      	beq.n	8004c62 <__kernel_rem_pio2+0x37a>
 8004c6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c6e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004c72:	eb0d 0503 	add.w	r5, sp, r3
 8004c76:	9b06      	ldr	r3, [sp, #24]
 8004c78:	aa20      	add	r2, sp, #128	@ 0x80
 8004c7a:	4443      	add	r3, r8
 8004c7c:	f108 0701 	add.w	r7, r8, #1
 8004c80:	3d98      	subs	r5, #152	@ 0x98
 8004c82:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8004c86:	4444      	add	r4, r8
 8004c88:	42bc      	cmp	r4, r7
 8004c8a:	da04      	bge.n	8004c96 <__kernel_rem_pio2+0x3ae>
 8004c8c:	46a0      	mov	r8, r4
 8004c8e:	e6a2      	b.n	80049d6 <__kernel_rem_pio2+0xee>
 8004c90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c92:	2401      	movs	r4, #1
 8004c94:	e7e6      	b.n	8004c64 <__kernel_rem_pio2+0x37c>
 8004c96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c98:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8004c9c:	f7fb fc06 	bl	80004ac <__aeabi_i2d>
 8004ca0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8004f68 <__kernel_rem_pio2+0x680>
 8004ca4:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004ca8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004cac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004cb0:	46b2      	mov	sl, r6
 8004cb2:	f04f 0800 	mov.w	r8, #0
 8004cb6:	9b05      	ldr	r3, [sp, #20]
 8004cb8:	4598      	cmp	r8, r3
 8004cba:	dd05      	ble.n	8004cc8 <__kernel_rem_pio2+0x3e0>
 8004cbc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004cc0:	3701      	adds	r7, #1
 8004cc2:	eca5 7b02 	vstmia	r5!, {d7}
 8004cc6:	e7df      	b.n	8004c88 <__kernel_rem_pio2+0x3a0>
 8004cc8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8004ccc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004cd0:	f7fb fc56 	bl	8000580 <__aeabi_dmul>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cdc:	f7fb fa9a 	bl	8000214 <__adddf3>
 8004ce0:	f108 0801 	add.w	r8, r8, #1
 8004ce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ce8:	e7e5      	b.n	8004cb6 <__kernel_rem_pio2+0x3ce>
 8004cea:	f1cb 0000 	rsb	r0, fp, #0
 8004cee:	ec47 6b10 	vmov	d0, r6, r7
 8004cf2:	f000 fadd 	bl	80052b0 <scalbn>
 8004cf6:	ec55 4b10 	vmov	r4, r5, d0
 8004cfa:	4b9d      	ldr	r3, [pc, #628]	@ (8004f70 <__kernel_rem_pio2+0x688>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	4620      	mov	r0, r4
 8004d00:	4629      	mov	r1, r5
 8004d02:	f7fb fec3 	bl	8000a8c <__aeabi_dcmpge>
 8004d06:	b300      	cbz	r0, 8004d4a <__kernel_rem_pio2+0x462>
 8004d08:	4b9a      	ldr	r3, [pc, #616]	@ (8004f74 <__kernel_rem_pio2+0x68c>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	4620      	mov	r0, r4
 8004d0e:	4629      	mov	r1, r5
 8004d10:	f7fb fc36 	bl	8000580 <__aeabi_dmul>
 8004d14:	f7fb fece 	bl	8000ab4 <__aeabi_d2iz>
 8004d18:	4606      	mov	r6, r0
 8004d1a:	f7fb fbc7 	bl	80004ac <__aeabi_i2d>
 8004d1e:	4b94      	ldr	r3, [pc, #592]	@ (8004f70 <__kernel_rem_pio2+0x688>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	f7fb fc2d 	bl	8000580 <__aeabi_dmul>
 8004d26:	460b      	mov	r3, r1
 8004d28:	4602      	mov	r2, r0
 8004d2a:	4629      	mov	r1, r5
 8004d2c:	4620      	mov	r0, r4
 8004d2e:	f7fb fa6f 	bl	8000210 <__aeabi_dsub>
 8004d32:	f7fb febf 	bl	8000ab4 <__aeabi_d2iz>
 8004d36:	ab0c      	add	r3, sp, #48	@ 0x30
 8004d38:	f10b 0b18 	add.w	fp, fp, #24
 8004d3c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004d40:	f108 0801 	add.w	r8, r8, #1
 8004d44:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8004d48:	e722      	b.n	8004b90 <__kernel_rem_pio2+0x2a8>
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	4629      	mov	r1, r5
 8004d4e:	f7fb feb1 	bl	8000ab4 <__aeabi_d2iz>
 8004d52:	ab0c      	add	r3, sp, #48	@ 0x30
 8004d54:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004d58:	e71a      	b.n	8004b90 <__kernel_rem_pio2+0x2a8>
 8004d5a:	ab0c      	add	r3, sp, #48	@ 0x30
 8004d5c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004d60:	f7fb fba4 	bl	80004ac <__aeabi_i2d>
 8004d64:	4622      	mov	r2, r4
 8004d66:	462b      	mov	r3, r5
 8004d68:	f7fb fc0a 	bl	8000580 <__aeabi_dmul>
 8004d6c:	4652      	mov	r2, sl
 8004d6e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8004d72:	465b      	mov	r3, fp
 8004d74:	4620      	mov	r0, r4
 8004d76:	4629      	mov	r1, r5
 8004d78:	f7fb fc02 	bl	8000580 <__aeabi_dmul>
 8004d7c:	3e01      	subs	r6, #1
 8004d7e:	4604      	mov	r4, r0
 8004d80:	460d      	mov	r5, r1
 8004d82:	e718      	b.n	8004bb6 <__kernel_rem_pio2+0x2ce>
 8004d84:	9906      	ldr	r1, [sp, #24]
 8004d86:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8004d8a:	9106      	str	r1, [sp, #24]
 8004d8c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8004d90:	f7fb fbf6 	bl	8000580 <__aeabi_dmul>
 8004d94:	4602      	mov	r2, r0
 8004d96:	460b      	mov	r3, r1
 8004d98:	4650      	mov	r0, sl
 8004d9a:	4659      	mov	r1, fp
 8004d9c:	f7fb fa3a 	bl	8000214 <__adddf3>
 8004da0:	3601      	adds	r6, #1
 8004da2:	4682      	mov	sl, r0
 8004da4:	468b      	mov	fp, r1
 8004da6:	9b00      	ldr	r3, [sp, #0]
 8004da8:	429e      	cmp	r6, r3
 8004daa:	dc01      	bgt.n	8004db0 <__kernel_rem_pio2+0x4c8>
 8004dac:	42b5      	cmp	r5, r6
 8004dae:	dae9      	bge.n	8004d84 <__kernel_rem_pio2+0x49c>
 8004db0:	ab48      	add	r3, sp, #288	@ 0x120
 8004db2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004db6:	e9c5 ab00 	strd	sl, fp, [r5]
 8004dba:	3c01      	subs	r4, #1
 8004dbc:	e6ff      	b.n	8004bbe <__kernel_rem_pio2+0x2d6>
 8004dbe:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	dc0b      	bgt.n	8004ddc <__kernel_rem_pio2+0x4f4>
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	dc39      	bgt.n	8004e3c <__kernel_rem_pio2+0x554>
 8004dc8:	d05d      	beq.n	8004e86 <__kernel_rem_pio2+0x59e>
 8004dca:	9b02      	ldr	r3, [sp, #8]
 8004dcc:	f003 0007 	and.w	r0, r3, #7
 8004dd0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8004dd4:	ecbd 8b02 	vpop	{d8}
 8004dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ddc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004dde:	2b03      	cmp	r3, #3
 8004de0:	d1f3      	bne.n	8004dca <__kernel_rem_pio2+0x4e2>
 8004de2:	9b05      	ldr	r3, [sp, #20]
 8004de4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004de8:	eb0d 0403 	add.w	r4, sp, r3
 8004dec:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8004df0:	4625      	mov	r5, r4
 8004df2:	46c2      	mov	sl, r8
 8004df4:	f1ba 0f00 	cmp.w	sl, #0
 8004df8:	f1a5 0508 	sub.w	r5, r5, #8
 8004dfc:	dc6b      	bgt.n	8004ed6 <__kernel_rem_pio2+0x5ee>
 8004dfe:	4645      	mov	r5, r8
 8004e00:	2d01      	cmp	r5, #1
 8004e02:	f1a4 0408 	sub.w	r4, r4, #8
 8004e06:	f300 8087 	bgt.w	8004f18 <__kernel_rem_pio2+0x630>
 8004e0a:	9c05      	ldr	r4, [sp, #20]
 8004e0c:	ab48      	add	r3, sp, #288	@ 0x120
 8004e0e:	441c      	add	r4, r3
 8004e10:	2000      	movs	r0, #0
 8004e12:	2100      	movs	r1, #0
 8004e14:	f1b8 0f01 	cmp.w	r8, #1
 8004e18:	f300 809c 	bgt.w	8004f54 <__kernel_rem_pio2+0x66c>
 8004e1c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8004e20:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8004e24:	f1b9 0f00 	cmp.w	r9, #0
 8004e28:	f040 80a6 	bne.w	8004f78 <__kernel_rem_pio2+0x690>
 8004e2c:	9b04      	ldr	r3, [sp, #16]
 8004e2e:	e9c3 7800 	strd	r7, r8, [r3]
 8004e32:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8004e36:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004e3a:	e7c6      	b.n	8004dca <__kernel_rem_pio2+0x4e2>
 8004e3c:	9d05      	ldr	r5, [sp, #20]
 8004e3e:	ab48      	add	r3, sp, #288	@ 0x120
 8004e40:	441d      	add	r5, r3
 8004e42:	4644      	mov	r4, r8
 8004e44:	2000      	movs	r0, #0
 8004e46:	2100      	movs	r1, #0
 8004e48:	2c00      	cmp	r4, #0
 8004e4a:	da35      	bge.n	8004eb8 <__kernel_rem_pio2+0x5d0>
 8004e4c:	f1b9 0f00 	cmp.w	r9, #0
 8004e50:	d038      	beq.n	8004ec4 <__kernel_rem_pio2+0x5dc>
 8004e52:	4602      	mov	r2, r0
 8004e54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004e58:	9c04      	ldr	r4, [sp, #16]
 8004e5a:	e9c4 2300 	strd	r2, r3, [r4]
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8004e66:	f7fb f9d3 	bl	8000210 <__aeabi_dsub>
 8004e6a:	ad4a      	add	r5, sp, #296	@ 0x128
 8004e6c:	2401      	movs	r4, #1
 8004e6e:	45a0      	cmp	r8, r4
 8004e70:	da2b      	bge.n	8004eca <__kernel_rem_pio2+0x5e2>
 8004e72:	f1b9 0f00 	cmp.w	r9, #0
 8004e76:	d002      	beq.n	8004e7e <__kernel_rem_pio2+0x596>
 8004e78:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	9b04      	ldr	r3, [sp, #16]
 8004e80:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004e84:	e7a1      	b.n	8004dca <__kernel_rem_pio2+0x4e2>
 8004e86:	9c05      	ldr	r4, [sp, #20]
 8004e88:	ab48      	add	r3, sp, #288	@ 0x120
 8004e8a:	441c      	add	r4, r3
 8004e8c:	2000      	movs	r0, #0
 8004e8e:	2100      	movs	r1, #0
 8004e90:	f1b8 0f00 	cmp.w	r8, #0
 8004e94:	da09      	bge.n	8004eaa <__kernel_rem_pio2+0x5c2>
 8004e96:	f1b9 0f00 	cmp.w	r9, #0
 8004e9a:	d002      	beq.n	8004ea2 <__kernel_rem_pio2+0x5ba>
 8004e9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	9b04      	ldr	r3, [sp, #16]
 8004ea4:	e9c3 0100 	strd	r0, r1, [r3]
 8004ea8:	e78f      	b.n	8004dca <__kernel_rem_pio2+0x4e2>
 8004eaa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004eae:	f7fb f9b1 	bl	8000214 <__adddf3>
 8004eb2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004eb6:	e7eb      	b.n	8004e90 <__kernel_rem_pio2+0x5a8>
 8004eb8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004ebc:	f7fb f9aa 	bl	8000214 <__adddf3>
 8004ec0:	3c01      	subs	r4, #1
 8004ec2:	e7c1      	b.n	8004e48 <__kernel_rem_pio2+0x560>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	e7c6      	b.n	8004e58 <__kernel_rem_pio2+0x570>
 8004eca:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8004ece:	f7fb f9a1 	bl	8000214 <__adddf3>
 8004ed2:	3401      	adds	r4, #1
 8004ed4:	e7cb      	b.n	8004e6e <__kernel_rem_pio2+0x586>
 8004ed6:	ed95 7b00 	vldr	d7, [r5]
 8004eda:	ed8d 7b00 	vstr	d7, [sp]
 8004ede:	ed95 7b02 	vldr	d7, [r5, #8]
 8004ee2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ee6:	ec53 2b17 	vmov	r2, r3, d7
 8004eea:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004eee:	f7fb f991 	bl	8000214 <__adddf3>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	4606      	mov	r6, r0
 8004ef8:	460f      	mov	r7, r1
 8004efa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004efe:	f7fb f987 	bl	8000210 <__aeabi_dsub>
 8004f02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004f06:	f7fb f985 	bl	8000214 <__adddf3>
 8004f0a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004f0e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8004f12:	e9c5 6700 	strd	r6, r7, [r5]
 8004f16:	e76d      	b.n	8004df4 <__kernel_rem_pio2+0x50c>
 8004f18:	ed94 7b00 	vldr	d7, [r4]
 8004f1c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8004f20:	ec51 0b17 	vmov	r0, r1, d7
 8004f24:	4652      	mov	r2, sl
 8004f26:	465b      	mov	r3, fp
 8004f28:	ed8d 7b00 	vstr	d7, [sp]
 8004f2c:	f7fb f972 	bl	8000214 <__adddf3>
 8004f30:	4602      	mov	r2, r0
 8004f32:	460b      	mov	r3, r1
 8004f34:	4606      	mov	r6, r0
 8004f36:	460f      	mov	r7, r1
 8004f38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f3c:	f7fb f968 	bl	8000210 <__aeabi_dsub>
 8004f40:	4652      	mov	r2, sl
 8004f42:	465b      	mov	r3, fp
 8004f44:	f7fb f966 	bl	8000214 <__adddf3>
 8004f48:	3d01      	subs	r5, #1
 8004f4a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004f4e:	e9c4 6700 	strd	r6, r7, [r4]
 8004f52:	e755      	b.n	8004e00 <__kernel_rem_pio2+0x518>
 8004f54:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004f58:	f7fb f95c 	bl	8000214 <__adddf3>
 8004f5c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004f60:	e758      	b.n	8004e14 <__kernel_rem_pio2+0x52c>
 8004f62:	bf00      	nop
 8004f64:	f3af 8000 	nop.w
	...
 8004f70:	41700000 	.word	0x41700000
 8004f74:	3e700000 	.word	0x3e700000
 8004f78:	9b04      	ldr	r3, [sp, #16]
 8004f7a:	9a04      	ldr	r2, [sp, #16]
 8004f7c:	601f      	str	r7, [r3, #0]
 8004f7e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8004f82:	605c      	str	r4, [r3, #4]
 8004f84:	609d      	str	r5, [r3, #8]
 8004f86:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004f8a:	60d3      	str	r3, [r2, #12]
 8004f8c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004f90:	6110      	str	r0, [r2, #16]
 8004f92:	6153      	str	r3, [r2, #20]
 8004f94:	e719      	b.n	8004dca <__kernel_rem_pio2+0x4e2>
 8004f96:	bf00      	nop

08004f98 <__kernel_cos>:
 8004f98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f9c:	ec57 6b10 	vmov	r6, r7, d0
 8004fa0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8004fa4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8004fa8:	ed8d 1b00 	vstr	d1, [sp]
 8004fac:	d206      	bcs.n	8004fbc <__kernel_cos+0x24>
 8004fae:	4630      	mov	r0, r6
 8004fb0:	4639      	mov	r1, r7
 8004fb2:	f7fb fd7f 	bl	8000ab4 <__aeabi_d2iz>
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	f000 8088 	beq.w	80050cc <__kernel_cos+0x134>
 8004fbc:	4632      	mov	r2, r6
 8004fbe:	463b      	mov	r3, r7
 8004fc0:	4630      	mov	r0, r6
 8004fc2:	4639      	mov	r1, r7
 8004fc4:	f7fb fadc 	bl	8000580 <__aeabi_dmul>
 8004fc8:	4b51      	ldr	r3, [pc, #324]	@ (8005110 <__kernel_cos+0x178>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	4604      	mov	r4, r0
 8004fce:	460d      	mov	r5, r1
 8004fd0:	f7fb fad6 	bl	8000580 <__aeabi_dmul>
 8004fd4:	a340      	add	r3, pc, #256	@ (adr r3, 80050d8 <__kernel_cos+0x140>)
 8004fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fda:	4682      	mov	sl, r0
 8004fdc:	468b      	mov	fp, r1
 8004fde:	4620      	mov	r0, r4
 8004fe0:	4629      	mov	r1, r5
 8004fe2:	f7fb facd 	bl	8000580 <__aeabi_dmul>
 8004fe6:	a33e      	add	r3, pc, #248	@ (adr r3, 80050e0 <__kernel_cos+0x148>)
 8004fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fec:	f7fb f912 	bl	8000214 <__adddf3>
 8004ff0:	4622      	mov	r2, r4
 8004ff2:	462b      	mov	r3, r5
 8004ff4:	f7fb fac4 	bl	8000580 <__aeabi_dmul>
 8004ff8:	a33b      	add	r3, pc, #236	@ (adr r3, 80050e8 <__kernel_cos+0x150>)
 8004ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffe:	f7fb f907 	bl	8000210 <__aeabi_dsub>
 8005002:	4622      	mov	r2, r4
 8005004:	462b      	mov	r3, r5
 8005006:	f7fb fabb 	bl	8000580 <__aeabi_dmul>
 800500a:	a339      	add	r3, pc, #228	@ (adr r3, 80050f0 <__kernel_cos+0x158>)
 800500c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005010:	f7fb f900 	bl	8000214 <__adddf3>
 8005014:	4622      	mov	r2, r4
 8005016:	462b      	mov	r3, r5
 8005018:	f7fb fab2 	bl	8000580 <__aeabi_dmul>
 800501c:	a336      	add	r3, pc, #216	@ (adr r3, 80050f8 <__kernel_cos+0x160>)
 800501e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005022:	f7fb f8f5 	bl	8000210 <__aeabi_dsub>
 8005026:	4622      	mov	r2, r4
 8005028:	462b      	mov	r3, r5
 800502a:	f7fb faa9 	bl	8000580 <__aeabi_dmul>
 800502e:	a334      	add	r3, pc, #208	@ (adr r3, 8005100 <__kernel_cos+0x168>)
 8005030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005034:	f7fb f8ee 	bl	8000214 <__adddf3>
 8005038:	4622      	mov	r2, r4
 800503a:	462b      	mov	r3, r5
 800503c:	f7fb faa0 	bl	8000580 <__aeabi_dmul>
 8005040:	4622      	mov	r2, r4
 8005042:	462b      	mov	r3, r5
 8005044:	f7fb fa9c 	bl	8000580 <__aeabi_dmul>
 8005048:	e9dd 2300 	ldrd	r2, r3, [sp]
 800504c:	4604      	mov	r4, r0
 800504e:	460d      	mov	r5, r1
 8005050:	4630      	mov	r0, r6
 8005052:	4639      	mov	r1, r7
 8005054:	f7fb fa94 	bl	8000580 <__aeabi_dmul>
 8005058:	460b      	mov	r3, r1
 800505a:	4602      	mov	r2, r0
 800505c:	4629      	mov	r1, r5
 800505e:	4620      	mov	r0, r4
 8005060:	f7fb f8d6 	bl	8000210 <__aeabi_dsub>
 8005064:	4b2b      	ldr	r3, [pc, #172]	@ (8005114 <__kernel_cos+0x17c>)
 8005066:	4598      	cmp	r8, r3
 8005068:	4606      	mov	r6, r0
 800506a:	460f      	mov	r7, r1
 800506c:	d810      	bhi.n	8005090 <__kernel_cos+0xf8>
 800506e:	4602      	mov	r2, r0
 8005070:	460b      	mov	r3, r1
 8005072:	4650      	mov	r0, sl
 8005074:	4659      	mov	r1, fp
 8005076:	f7fb f8cb 	bl	8000210 <__aeabi_dsub>
 800507a:	460b      	mov	r3, r1
 800507c:	4926      	ldr	r1, [pc, #152]	@ (8005118 <__kernel_cos+0x180>)
 800507e:	4602      	mov	r2, r0
 8005080:	2000      	movs	r0, #0
 8005082:	f7fb f8c5 	bl	8000210 <__aeabi_dsub>
 8005086:	ec41 0b10 	vmov	d0, r0, r1
 800508a:	b003      	add	sp, #12
 800508c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005090:	4b22      	ldr	r3, [pc, #136]	@ (800511c <__kernel_cos+0x184>)
 8005092:	4921      	ldr	r1, [pc, #132]	@ (8005118 <__kernel_cos+0x180>)
 8005094:	4598      	cmp	r8, r3
 8005096:	bf8c      	ite	hi
 8005098:	4d21      	ldrhi	r5, [pc, #132]	@ (8005120 <__kernel_cos+0x188>)
 800509a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800509e:	2400      	movs	r4, #0
 80050a0:	4622      	mov	r2, r4
 80050a2:	462b      	mov	r3, r5
 80050a4:	2000      	movs	r0, #0
 80050a6:	f7fb f8b3 	bl	8000210 <__aeabi_dsub>
 80050aa:	4622      	mov	r2, r4
 80050ac:	4680      	mov	r8, r0
 80050ae:	4689      	mov	r9, r1
 80050b0:	462b      	mov	r3, r5
 80050b2:	4650      	mov	r0, sl
 80050b4:	4659      	mov	r1, fp
 80050b6:	f7fb f8ab 	bl	8000210 <__aeabi_dsub>
 80050ba:	4632      	mov	r2, r6
 80050bc:	463b      	mov	r3, r7
 80050be:	f7fb f8a7 	bl	8000210 <__aeabi_dsub>
 80050c2:	4602      	mov	r2, r0
 80050c4:	460b      	mov	r3, r1
 80050c6:	4640      	mov	r0, r8
 80050c8:	4649      	mov	r1, r9
 80050ca:	e7da      	b.n	8005082 <__kernel_cos+0xea>
 80050cc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8005108 <__kernel_cos+0x170>
 80050d0:	e7db      	b.n	800508a <__kernel_cos+0xf2>
 80050d2:	bf00      	nop
 80050d4:	f3af 8000 	nop.w
 80050d8:	be8838d4 	.word	0xbe8838d4
 80050dc:	bda8fae9 	.word	0xbda8fae9
 80050e0:	bdb4b1c4 	.word	0xbdb4b1c4
 80050e4:	3e21ee9e 	.word	0x3e21ee9e
 80050e8:	809c52ad 	.word	0x809c52ad
 80050ec:	3e927e4f 	.word	0x3e927e4f
 80050f0:	19cb1590 	.word	0x19cb1590
 80050f4:	3efa01a0 	.word	0x3efa01a0
 80050f8:	16c15177 	.word	0x16c15177
 80050fc:	3f56c16c 	.word	0x3f56c16c
 8005100:	5555554c 	.word	0x5555554c
 8005104:	3fa55555 	.word	0x3fa55555
 8005108:	00000000 	.word	0x00000000
 800510c:	3ff00000 	.word	0x3ff00000
 8005110:	3fe00000 	.word	0x3fe00000
 8005114:	3fd33332 	.word	0x3fd33332
 8005118:	3ff00000 	.word	0x3ff00000
 800511c:	3fe90000 	.word	0x3fe90000
 8005120:	3fd20000 	.word	0x3fd20000
 8005124:	00000000 	.word	0x00000000

08005128 <__kernel_sin>:
 8005128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800512c:	ec55 4b10 	vmov	r4, r5, d0
 8005130:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8005134:	b085      	sub	sp, #20
 8005136:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800513a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800513e:	4680      	mov	r8, r0
 8005140:	d205      	bcs.n	800514e <__kernel_sin+0x26>
 8005142:	4620      	mov	r0, r4
 8005144:	4629      	mov	r1, r5
 8005146:	f7fb fcb5 	bl	8000ab4 <__aeabi_d2iz>
 800514a:	2800      	cmp	r0, #0
 800514c:	d052      	beq.n	80051f4 <__kernel_sin+0xcc>
 800514e:	4622      	mov	r2, r4
 8005150:	462b      	mov	r3, r5
 8005152:	4620      	mov	r0, r4
 8005154:	4629      	mov	r1, r5
 8005156:	f7fb fa13 	bl	8000580 <__aeabi_dmul>
 800515a:	4682      	mov	sl, r0
 800515c:	468b      	mov	fp, r1
 800515e:	4602      	mov	r2, r0
 8005160:	460b      	mov	r3, r1
 8005162:	4620      	mov	r0, r4
 8005164:	4629      	mov	r1, r5
 8005166:	f7fb fa0b 	bl	8000580 <__aeabi_dmul>
 800516a:	a342      	add	r3, pc, #264	@ (adr r3, 8005274 <__kernel_sin+0x14c>)
 800516c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005170:	e9cd 0100 	strd	r0, r1, [sp]
 8005174:	4650      	mov	r0, sl
 8005176:	4659      	mov	r1, fp
 8005178:	f7fb fa02 	bl	8000580 <__aeabi_dmul>
 800517c:	a33f      	add	r3, pc, #252	@ (adr r3, 800527c <__kernel_sin+0x154>)
 800517e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005182:	f7fb f845 	bl	8000210 <__aeabi_dsub>
 8005186:	4652      	mov	r2, sl
 8005188:	465b      	mov	r3, fp
 800518a:	f7fb f9f9 	bl	8000580 <__aeabi_dmul>
 800518e:	a33d      	add	r3, pc, #244	@ (adr r3, 8005284 <__kernel_sin+0x15c>)
 8005190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005194:	f7fb f83e 	bl	8000214 <__adddf3>
 8005198:	4652      	mov	r2, sl
 800519a:	465b      	mov	r3, fp
 800519c:	f7fb f9f0 	bl	8000580 <__aeabi_dmul>
 80051a0:	a33a      	add	r3, pc, #232	@ (adr r3, 800528c <__kernel_sin+0x164>)
 80051a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a6:	f7fb f833 	bl	8000210 <__aeabi_dsub>
 80051aa:	4652      	mov	r2, sl
 80051ac:	465b      	mov	r3, fp
 80051ae:	f7fb f9e7 	bl	8000580 <__aeabi_dmul>
 80051b2:	a338      	add	r3, pc, #224	@ (adr r3, 8005294 <__kernel_sin+0x16c>)
 80051b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b8:	f7fb f82c 	bl	8000214 <__adddf3>
 80051bc:	4606      	mov	r6, r0
 80051be:	460f      	mov	r7, r1
 80051c0:	f1b8 0f00 	cmp.w	r8, #0
 80051c4:	d11b      	bne.n	80051fe <__kernel_sin+0xd6>
 80051c6:	4602      	mov	r2, r0
 80051c8:	460b      	mov	r3, r1
 80051ca:	4650      	mov	r0, sl
 80051cc:	4659      	mov	r1, fp
 80051ce:	f7fb f9d7 	bl	8000580 <__aeabi_dmul>
 80051d2:	a325      	add	r3, pc, #148	@ (adr r3, 8005268 <__kernel_sin+0x140>)
 80051d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d8:	f7fb f81a 	bl	8000210 <__aeabi_dsub>
 80051dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051e0:	f7fb f9ce 	bl	8000580 <__aeabi_dmul>
 80051e4:	4602      	mov	r2, r0
 80051e6:	460b      	mov	r3, r1
 80051e8:	4620      	mov	r0, r4
 80051ea:	4629      	mov	r1, r5
 80051ec:	f7fb f812 	bl	8000214 <__adddf3>
 80051f0:	4604      	mov	r4, r0
 80051f2:	460d      	mov	r5, r1
 80051f4:	ec45 4b10 	vmov	d0, r4, r5
 80051f8:	b005      	add	sp, #20
 80051fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005202:	4b1b      	ldr	r3, [pc, #108]	@ (8005270 <__kernel_sin+0x148>)
 8005204:	2200      	movs	r2, #0
 8005206:	f7fb f9bb 	bl	8000580 <__aeabi_dmul>
 800520a:	4632      	mov	r2, r6
 800520c:	4680      	mov	r8, r0
 800520e:	4689      	mov	r9, r1
 8005210:	463b      	mov	r3, r7
 8005212:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005216:	f7fb f9b3 	bl	8000580 <__aeabi_dmul>
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	4640      	mov	r0, r8
 8005220:	4649      	mov	r1, r9
 8005222:	f7fa fff5 	bl	8000210 <__aeabi_dsub>
 8005226:	4652      	mov	r2, sl
 8005228:	465b      	mov	r3, fp
 800522a:	f7fb f9a9 	bl	8000580 <__aeabi_dmul>
 800522e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005232:	f7fa ffed 	bl	8000210 <__aeabi_dsub>
 8005236:	a30c      	add	r3, pc, #48	@ (adr r3, 8005268 <__kernel_sin+0x140>)
 8005238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523c:	4606      	mov	r6, r0
 800523e:	460f      	mov	r7, r1
 8005240:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005244:	f7fb f99c 	bl	8000580 <__aeabi_dmul>
 8005248:	4602      	mov	r2, r0
 800524a:	460b      	mov	r3, r1
 800524c:	4630      	mov	r0, r6
 800524e:	4639      	mov	r1, r7
 8005250:	f7fa ffe0 	bl	8000214 <__adddf3>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	4620      	mov	r0, r4
 800525a:	4629      	mov	r1, r5
 800525c:	f7fa ffd8 	bl	8000210 <__aeabi_dsub>
 8005260:	e7c6      	b.n	80051f0 <__kernel_sin+0xc8>
 8005262:	bf00      	nop
 8005264:	f3af 8000 	nop.w
 8005268:	55555549 	.word	0x55555549
 800526c:	3fc55555 	.word	0x3fc55555
 8005270:	3fe00000 	.word	0x3fe00000
 8005274:	5acfd57c 	.word	0x5acfd57c
 8005278:	3de5d93a 	.word	0x3de5d93a
 800527c:	8a2b9ceb 	.word	0x8a2b9ceb
 8005280:	3e5ae5e6 	.word	0x3e5ae5e6
 8005284:	57b1fe7d 	.word	0x57b1fe7d
 8005288:	3ec71de3 	.word	0x3ec71de3
 800528c:	19c161d5 	.word	0x19c161d5
 8005290:	3f2a01a0 	.word	0x3f2a01a0
 8005294:	1110f8a6 	.word	0x1110f8a6
 8005298:	3f811111 	.word	0x3f811111

0800529c <fabs>:
 800529c:	ec51 0b10 	vmov	r0, r1, d0
 80052a0:	4602      	mov	r2, r0
 80052a2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80052a6:	ec43 2b10 	vmov	d0, r2, r3
 80052aa:	4770      	bx	lr
 80052ac:	0000      	movs	r0, r0
	...

080052b0 <scalbn>:
 80052b0:	b570      	push	{r4, r5, r6, lr}
 80052b2:	ec55 4b10 	vmov	r4, r5, d0
 80052b6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80052ba:	4606      	mov	r6, r0
 80052bc:	462b      	mov	r3, r5
 80052be:	b991      	cbnz	r1, 80052e6 <scalbn+0x36>
 80052c0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80052c4:	4323      	orrs	r3, r4
 80052c6:	d03d      	beq.n	8005344 <scalbn+0x94>
 80052c8:	4b35      	ldr	r3, [pc, #212]	@ (80053a0 <scalbn+0xf0>)
 80052ca:	4620      	mov	r0, r4
 80052cc:	4629      	mov	r1, r5
 80052ce:	2200      	movs	r2, #0
 80052d0:	f7fb f956 	bl	8000580 <__aeabi_dmul>
 80052d4:	4b33      	ldr	r3, [pc, #204]	@ (80053a4 <scalbn+0xf4>)
 80052d6:	429e      	cmp	r6, r3
 80052d8:	4604      	mov	r4, r0
 80052da:	460d      	mov	r5, r1
 80052dc:	da0f      	bge.n	80052fe <scalbn+0x4e>
 80052de:	a328      	add	r3, pc, #160	@ (adr r3, 8005380 <scalbn+0xd0>)
 80052e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e4:	e01e      	b.n	8005324 <scalbn+0x74>
 80052e6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80052ea:	4291      	cmp	r1, r2
 80052ec:	d10b      	bne.n	8005306 <scalbn+0x56>
 80052ee:	4622      	mov	r2, r4
 80052f0:	4620      	mov	r0, r4
 80052f2:	4629      	mov	r1, r5
 80052f4:	f7fa ff8e 	bl	8000214 <__adddf3>
 80052f8:	4604      	mov	r4, r0
 80052fa:	460d      	mov	r5, r1
 80052fc:	e022      	b.n	8005344 <scalbn+0x94>
 80052fe:	460b      	mov	r3, r1
 8005300:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005304:	3936      	subs	r1, #54	@ 0x36
 8005306:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800530a:	4296      	cmp	r6, r2
 800530c:	dd0d      	ble.n	800532a <scalbn+0x7a>
 800530e:	2d00      	cmp	r5, #0
 8005310:	a11d      	add	r1, pc, #116	@ (adr r1, 8005388 <scalbn+0xd8>)
 8005312:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005316:	da02      	bge.n	800531e <scalbn+0x6e>
 8005318:	a11d      	add	r1, pc, #116	@ (adr r1, 8005390 <scalbn+0xe0>)
 800531a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800531e:	a31a      	add	r3, pc, #104	@ (adr r3, 8005388 <scalbn+0xd8>)
 8005320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005324:	f7fb f92c 	bl	8000580 <__aeabi_dmul>
 8005328:	e7e6      	b.n	80052f8 <scalbn+0x48>
 800532a:	1872      	adds	r2, r6, r1
 800532c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8005330:	428a      	cmp	r2, r1
 8005332:	dcec      	bgt.n	800530e <scalbn+0x5e>
 8005334:	2a00      	cmp	r2, #0
 8005336:	dd08      	ble.n	800534a <scalbn+0x9a>
 8005338:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800533c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005340:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005344:	ec45 4b10 	vmov	d0, r4, r5
 8005348:	bd70      	pop	{r4, r5, r6, pc}
 800534a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800534e:	da08      	bge.n	8005362 <scalbn+0xb2>
 8005350:	2d00      	cmp	r5, #0
 8005352:	a10b      	add	r1, pc, #44	@ (adr r1, 8005380 <scalbn+0xd0>)
 8005354:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005358:	dac1      	bge.n	80052de <scalbn+0x2e>
 800535a:	a10f      	add	r1, pc, #60	@ (adr r1, 8005398 <scalbn+0xe8>)
 800535c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005360:	e7bd      	b.n	80052de <scalbn+0x2e>
 8005362:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005366:	3236      	adds	r2, #54	@ 0x36
 8005368:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800536c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005370:	4620      	mov	r0, r4
 8005372:	4b0d      	ldr	r3, [pc, #52]	@ (80053a8 <scalbn+0xf8>)
 8005374:	4629      	mov	r1, r5
 8005376:	2200      	movs	r2, #0
 8005378:	e7d4      	b.n	8005324 <scalbn+0x74>
 800537a:	bf00      	nop
 800537c:	f3af 8000 	nop.w
 8005380:	c2f8f359 	.word	0xc2f8f359
 8005384:	01a56e1f 	.word	0x01a56e1f
 8005388:	8800759c 	.word	0x8800759c
 800538c:	7e37e43c 	.word	0x7e37e43c
 8005390:	8800759c 	.word	0x8800759c
 8005394:	fe37e43c 	.word	0xfe37e43c
 8005398:	c2f8f359 	.word	0xc2f8f359
 800539c:	81a56e1f 	.word	0x81a56e1f
 80053a0:	43500000 	.word	0x43500000
 80053a4:	ffff3cb0 	.word	0xffff3cb0
 80053a8:	3c900000 	.word	0x3c900000
 80053ac:	00000000 	.word	0x00000000

080053b0 <floor>:
 80053b0:	ec51 0b10 	vmov	r0, r1, d0
 80053b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80053b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053bc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80053c0:	2e13      	cmp	r6, #19
 80053c2:	460c      	mov	r4, r1
 80053c4:	4605      	mov	r5, r0
 80053c6:	4680      	mov	r8, r0
 80053c8:	dc34      	bgt.n	8005434 <floor+0x84>
 80053ca:	2e00      	cmp	r6, #0
 80053cc:	da17      	bge.n	80053fe <floor+0x4e>
 80053ce:	a332      	add	r3, pc, #200	@ (adr r3, 8005498 <floor+0xe8>)
 80053d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d4:	f7fa ff1e 	bl	8000214 <__adddf3>
 80053d8:	2200      	movs	r2, #0
 80053da:	2300      	movs	r3, #0
 80053dc:	f7fb fb60 	bl	8000aa0 <__aeabi_dcmpgt>
 80053e0:	b150      	cbz	r0, 80053f8 <floor+0x48>
 80053e2:	2c00      	cmp	r4, #0
 80053e4:	da55      	bge.n	8005492 <floor+0xe2>
 80053e6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80053ea:	432c      	orrs	r4, r5
 80053ec:	2500      	movs	r5, #0
 80053ee:	42ac      	cmp	r4, r5
 80053f0:	4c2b      	ldr	r4, [pc, #172]	@ (80054a0 <floor+0xf0>)
 80053f2:	bf08      	it	eq
 80053f4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80053f8:	4621      	mov	r1, r4
 80053fa:	4628      	mov	r0, r5
 80053fc:	e023      	b.n	8005446 <floor+0x96>
 80053fe:	4f29      	ldr	r7, [pc, #164]	@ (80054a4 <floor+0xf4>)
 8005400:	4137      	asrs	r7, r6
 8005402:	ea01 0307 	and.w	r3, r1, r7
 8005406:	4303      	orrs	r3, r0
 8005408:	d01d      	beq.n	8005446 <floor+0x96>
 800540a:	a323      	add	r3, pc, #140	@ (adr r3, 8005498 <floor+0xe8>)
 800540c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005410:	f7fa ff00 	bl	8000214 <__adddf3>
 8005414:	2200      	movs	r2, #0
 8005416:	2300      	movs	r3, #0
 8005418:	f7fb fb42 	bl	8000aa0 <__aeabi_dcmpgt>
 800541c:	2800      	cmp	r0, #0
 800541e:	d0eb      	beq.n	80053f8 <floor+0x48>
 8005420:	2c00      	cmp	r4, #0
 8005422:	bfbe      	ittt	lt
 8005424:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8005428:	4133      	asrlt	r3, r6
 800542a:	18e4      	addlt	r4, r4, r3
 800542c:	ea24 0407 	bic.w	r4, r4, r7
 8005430:	2500      	movs	r5, #0
 8005432:	e7e1      	b.n	80053f8 <floor+0x48>
 8005434:	2e33      	cmp	r6, #51	@ 0x33
 8005436:	dd0a      	ble.n	800544e <floor+0x9e>
 8005438:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800543c:	d103      	bne.n	8005446 <floor+0x96>
 800543e:	4602      	mov	r2, r0
 8005440:	460b      	mov	r3, r1
 8005442:	f7fa fee7 	bl	8000214 <__adddf3>
 8005446:	ec41 0b10 	vmov	d0, r0, r1
 800544a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800544e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8005452:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005456:	40df      	lsrs	r7, r3
 8005458:	4207      	tst	r7, r0
 800545a:	d0f4      	beq.n	8005446 <floor+0x96>
 800545c:	a30e      	add	r3, pc, #56	@ (adr r3, 8005498 <floor+0xe8>)
 800545e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005462:	f7fa fed7 	bl	8000214 <__adddf3>
 8005466:	2200      	movs	r2, #0
 8005468:	2300      	movs	r3, #0
 800546a:	f7fb fb19 	bl	8000aa0 <__aeabi_dcmpgt>
 800546e:	2800      	cmp	r0, #0
 8005470:	d0c2      	beq.n	80053f8 <floor+0x48>
 8005472:	2c00      	cmp	r4, #0
 8005474:	da0a      	bge.n	800548c <floor+0xdc>
 8005476:	2e14      	cmp	r6, #20
 8005478:	d101      	bne.n	800547e <floor+0xce>
 800547a:	3401      	adds	r4, #1
 800547c:	e006      	b.n	800548c <floor+0xdc>
 800547e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8005482:	2301      	movs	r3, #1
 8005484:	40b3      	lsls	r3, r6
 8005486:	441d      	add	r5, r3
 8005488:	4545      	cmp	r5, r8
 800548a:	d3f6      	bcc.n	800547a <floor+0xca>
 800548c:	ea25 0507 	bic.w	r5, r5, r7
 8005490:	e7b2      	b.n	80053f8 <floor+0x48>
 8005492:	2500      	movs	r5, #0
 8005494:	462c      	mov	r4, r5
 8005496:	e7af      	b.n	80053f8 <floor+0x48>
 8005498:	8800759c 	.word	0x8800759c
 800549c:	7e37e43c 	.word	0x7e37e43c
 80054a0:	bff00000 	.word	0xbff00000
 80054a4:	000fffff 	.word	0x000fffff

080054a8 <_init>:
 80054a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054aa:	bf00      	nop
 80054ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ae:	bc08      	pop	{r3}
 80054b0:	469e      	mov	lr, r3
 80054b2:	4770      	bx	lr

080054b4 <_fini>:
 80054b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b6:	bf00      	nop
 80054b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ba:	bc08      	pop	{r3}
 80054bc:	469e      	mov	lr, r3
 80054be:	4770      	bx	lr
